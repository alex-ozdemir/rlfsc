(declare bool type)
(declare tt bool)
(declare ff bool)

(declare var type)

(declare lit type)
(declare pos (! x var lit))
(declare neg (! x var lit))

; Flip the polarity of the literal
(program lit_flip ((l lit)) lit
         (match l
                ((pos v) (neg v))
                ((neg v) (pos v))))

(declare clause type)
(declare cln clause)
(declare clc (! x lit (! c clause clause)))

; A list of clauses, CNF if interpretted as a formula,
; but also sometimes just a list
(declare cnf type)
(declare cnfn cnf)
(declare cnfc (! h clause (! t cnf cnf)))

; constructs for general clauses for R, Q, satlem

(declare concat_cl (! c1 clause (! c2 clause clause)))
(declare clr (! l lit (! c clause clause)))

; code to check resolutions

(program clause_append ((c1 clause) (c2 clause)) clause
  (match c1 (cln c2) ((clc l c1') (clc l (clause_append c1' c2)))))

; we use marks as follows:
; -- mark 1 to record if we are supposed to remove a positive occurrence of the variable.
; -- mark 2 to record if we are supposed to remove a negative occurrence of the variable.
; -- mark 3 if we did indeed remove the variable positively
; -- mark 4 if we did indeed remove the variable negatively
(program simplify_clause ((c clause)) clause
  (match c
    (cln cln)
    ((clc l c1)
      (match l
        ; Set mark 1 on v if it is not set, to indicate we should remove it.
        ; After processing the rest of the clause, set mark 3 if we were already
        ; supposed to remove v (so if mark 1 was set when we began).  Clear mark3
        ; if we were not supposed to be removing v when we began this call.
        ((pos v)
          (let m (ifmarked v tt (do (markvar v) ff))
          (let c' (simplify_clause c1)
            (match m
              (tt (do (ifmarked3 v v (markvar3 v)) c'))
              (ff (do (ifmarked3 v (markvar3 v) v) (markvar v) (clc l c')))))))
        ; the same as the code for tt, but using different marks.
        ((neg v)
          (let m (ifmarked2 v tt (do (markvar2 v) ff))
          (let c' (simplify_clause c1)
            (match m
              (tt (do (ifmarked4 v v (markvar4 v)) c'))
              (ff (do (ifmarked4 v (markvar4 v) v) (markvar2 v) (clc l c')))))))))
    ((concat_cl c1 c2) (clause_append (simplify_clause c1) (simplify_clause c2)))
    ((clr l c1)
      (match l
        ; set mark 1 to indicate we should remove v, and fail if
        ; mark 3 is not set after processing the rest of the clause
        ; (we will set mark 3 if we remove a positive occurrence of v).
        ((pos v)
            (let m (ifmarked v tt (do (markvar v) ff))
            (let m3 (ifmarked3 v (do (markvar3 v) tt) ff)
            (let c' (simplify_clause c1)
              (ifmarked3 v (do (match m3 (tt v) (ff (markvar3 v)))
                                (match m (tt v) (ff (markvar v))) c')
                          (fail clause))))))
        ; same as the tt case, but with different marks.
        ((neg v)
            (let m2 (ifmarked2 v tt (do (markvar2 v) ff))
            (let m4 (ifmarked4 v (do (markvar4 v) tt) ff)
            (let c' (simplify_clause c1)
              (ifmarked4 v (do (match m4 (tt v) (ff (markvar4 v)))
                                (match m2 (tt v) (ff (markvar2 v))) c')
                          (fail clause))))))
   ))))


; resolution proofs

(declare holds (! c clause type))

(declare R (! c1 clause (! c2 clause
           (! u1 (holds c1)
           (! u2 (holds c2)
           (! n var
            (holds (concat_cl (clr (pos n) c1)
                     (clr (neg n) c2)))))))))

(declare Q (! c1 clause (! c2 clause
           (! u1 (holds c1)
           (! u2 (holds c2)
           (! n var
            (holds (concat_cl (clr (neg n) c1)
                     (clr (pos n) c2)))))))))

(declare satlem_simplify
                (! c1 clause
                (! c2 clause
                (! c3 clause
                (! u1 (holds c1)
                (! r (^ (simplify_clause c1) c2)
                (! u2 (! x (holds c2) (holds c3))
                   (holds c3))))))))

(declare satlem
  (! c clause
  (! c2 clause
  (! u (holds c)
  (! u2 (! v (holds c) (holds c2))
    (holds c2))))))


; Returns a copy of `c` with any duplicate literals removed.
; Never fails.
; Uses marks 3 & 4. Expects them to be clear before hand, and leaves them clear
; afterwards.
(program clause_dedup ((c clause)) clause
         (match c
                (cln cln)
                ((clc l rest)
                 (match l
                        ((pos v) (ifmarked3
                                   v
                                   (clause_dedup rest)
                                   (do (markvar3 v)
                                     (let result (clc (pos v) (clause_dedup rest))
                                       (do (markvar3 v) result)))))
                        ((neg v) (ifmarked4
                                   v
                                   (clause_dedup rest)
                                   (do (markvar4 v)
                                     (let result (clc (neg v) (clause_dedup rest))
                                       (do (markvar4 v) result)))))))))

(declare cnf_holds (! c cnf type))
(declare cnfn_proof (cnf_holds cnfn))
(declare cnfc_proof
         (! c clause
         (! deduped_c clause
            (! rest cnf
               (! proof_c (holds c)
                  (! proof_rest (cnf_holds rest)
                     (! sc (^ (clause_dedup c) deduped_c)
                        (cnf_holds (cnfc c rest)))))))))

; A little example to demonstrate simplify_clause.
; It can handle nested clr's of both polarities,
; and correctly cleans up marks when it leaves a
; clr or clc scope.  Uncomment and run with
; --show-runs to see it in action.
;
; (check
;   (% v1 var
;   (% u1 (holds (concat_cl (clr (neg v1) (clr (pos v1) (clc (pos v1) (clr (pos v1) (clc (pos v1) (clc (neg v1) cln))))))
;                    (clc (pos v1) (clc (pos v1) cln))))
;    (satlem _ _ _ u1 (\ x x))))))


;(check
;   (% v1 var
;   (% u1 (holds (clr (neg v1) (concat_cl (clc (neg v1) cln)
;                                      (clr (neg v1) (clc (neg v1) cln)))))
;    (satlem _ _ _ u1 (\ x x))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; SMT syntax and semantics (not theory-specific)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; depends on sat.plf

(declare formula type)
(declare th_holds (! f formula type))

; standard logic definitions
(declare true formula)
(declare false formula)

(define formula_op1
	(! f formula
	formula))

(define formula_op2
	(! f1 formula
	(! f2 formula
	   formula)))

(define formula_op3
	(! f1 formula
	(! f2 formula
	(! f3 formula
	   formula))))

(declare not formula_op1)
(declare and formula_op2)
(declare or formula_op2)
(declare impl formula_op2)
(declare iff formula_op2)
(declare xor formula_op2)
(declare ifte formula_op3)

; terms
(declare sort type)
(declare term (! t sort type))	; declared terms in formula

; standard definitions for =, ite, let and flet
(declare = (! s sort
           (! x (term s)
           (! y (term s)
             formula))))
(declare ite (! s sort
             (! f formula
             (! t1 (term s)
             (! t2 (term s)
               (term s))))))
; TODO(aozdemir) allow this.
;(declare let (! s sort
;             (! t (term s)
;             (! f (! v (term s) formula)
;               formula))))
(declare flet (! f1 formula
              (! f2 (! v formula formula)
                formula)))

; We view applications of predicates as terms of sort "Bool".
; Such terms can be injected as atomic formulas using "p_app".
(declare Bool sort)				; the special sort for predicates
(declare p_app (! x (term Bool) formula))	; propositional application of term

; boolean terms
(declare t_true (term Bool))
(declare t_false (term Bool))
(declare t_t_neq_f
 (th_holds (not (= Bool t_true t_false))))
(declare pred_eq_t
 (! x (term Bool)
 (! u (th_holds (p_app x))
   (th_holds (= Bool x t_true)))))

(declare pred_eq_f
 (! x (term Bool)
 (! u (th_holds (not (p_app x)))
   (th_holds (= Bool x t_false)))))

(declare f_to_b
  (! f formula
    (term Bool)))

(declare true_preds_equal
  (! x1 (term Bool)
  (! x2 (term Bool)
  (! u1 (th_holds (p_app x1))
  (! u2 (th_holds (p_app x2))
    (th_holds (= Bool x1 x2)))))))

(declare false_preds_equal
  (! x1 (term Bool)
  (! x2 (term Bool)
  (! u1 (th_holds (not (p_app x1)))
  (! u2 (th_holds (not (p_app x2)))
    (th_holds (= Bool x1 x2)))))))

(declare pred_refl_pos
  (! x1 (term Bool)
  (! u1 (th_holds (p_app x1))
    (th_holds (= Bool x1 x1)))))

(declare pred_refl_neg
  (! x1 (term Bool)
  (! u1 (th_holds (not (p_app x1)))
    (th_holds (= Bool x1 x1)))))

(declare pred_not_iff_f
  (! x (term Bool)
  (! u (th_holds (not (iff false (p_app x))))
    (th_holds (= Bool t_true x)))))

(declare pred_not_iff_f_2
  (! x (term Bool)
  (! u (th_holds (not (iff (p_app x) false)))
    (th_holds (= Bool x t_true)))))

(declare pred_not_iff_t
  (! x (term Bool)
  (! u (th_holds (not (iff true (p_app x))))
    (th_holds (= Bool t_false x)))))

(declare pred_not_iff_t_2
  (! x (term Bool)
  (! u (th_holds (not (iff (p_app x) true)))
    (th_holds (= Bool x t_false)))))

(declare pred_iff_f
  (! x (term Bool)
  (! u (th_holds (iff false (p_app x)))
    (th_holds (= Bool t_false x)))))

(declare pred_iff_f_2
  (! x (term Bool)
  (! u (th_holds (iff (p_app x) false))
    (th_holds (= Bool x t_false)))))

(declare pred_iff_t
  (! x (term Bool)
  (! u (th_holds (iff true (p_app x)))
    (th_holds (= Bool t_true x)))))

(declare pred_iff_t_2
  (! x (term Bool)
  (! u (th_holds (iff (p_app x) true))
    (th_holds (= Bool x t_true)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; CNF Clausification
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; binding between an LF var and an (atomic) formula

(declare atom (! v var (! p formula type)))

; binding between two LF vars
(declare bvatom (! sat_v var (! bv_v var type)))

(declare decl_atom
  (! f formula
  (! u (! v var
       (! a (atom v f)
         (holds cln)))
    (holds cln))))

;; declare atom enhanced with mapping
;; between SAT prop variable and BVSAT prop variable
(declare decl_bvatom
  (! f formula
  (! u (! v var
       (! bv_v var
       (! a (atom v f)
       (! bva (atom bv_v f)
       (! vbv (bvatom v bv_v)
         (holds cln))))))
    (holds cln))))


; clausify a formula directly
(declare clausify_form
  (! f formula
  (! v var
  (! a (atom v f)
  (! u (th_holds f)
    (holds (clc (pos v) cln)))))))

(declare clausify_form_not
  (! f formula
  (! v var
  (! a (atom v f)
  (! u (th_holds (not f))
    (holds (clc (neg v) cln)))))))

(declare clausify_false
  (! u (th_holds false)
    (holds cln)))

(declare th_let_pf
  (! f formula
  (! u (th_holds f)
  (! u2 (! v (th_holds f) (holds cln))
    (holds cln)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Natural deduction rules : used for CNF
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; for eager bit-blasting
(declare iff_symm
	(! f formula
	   (th_holds (iff f f))))


;; contradiction

(declare contra
  (! f formula
  (! r1 (th_holds f)
  (! r2 (th_holds (not f))
    (th_holds false)))))

; truth
(declare truth (th_holds true))

;; not not

(declare not_not_intro
  (! f formula
  (! u (th_holds f)
    (th_holds (not (not f))))))

(declare not_not_elim
  (! f formula
  (! u (th_holds (not (not f)))
    (th_holds f))))

;; or elimination

(declare or_elim_1
  (! f1 formula
  (! f2 formula
  (! u1 (th_holds (not f1))
  (! u2 (th_holds (or f1 f2))
    (th_holds f2))))))

(declare or_elim_2
  (! f1 formula
  (! f2 formula
  (! u1 (th_holds (not f2))
  (! u2 (th_holds (or f1 f2))
    (th_holds f1))))))

(declare not_or_elim
  (! f1 formula
  (! f2 formula
  (! u2 (th_holds (not (or f1 f2)))
    (th_holds (and (not f1) (not f2)))))))

;; and elimination

(declare and_elim_1
  (! f1 formula
  (! f2 formula
  (! u (th_holds (and f1 f2))
    (th_holds f1)))))

(declare and_elim_2
  (! f1 formula
  (! f2 formula
  (! u (th_holds (and f1 f2))
    (th_holds f2)))))

(declare not_and_elim
  (! f1 formula
  (! f2 formula
  (! u2 (th_holds (not (and f1 f2)))
    (th_holds (or (not f1) (not f2)))))))

;; impl elimination

(declare impl_intro (! f1 formula
                    (! f2 formula
                    (! i1 (! u (th_holds f1)
                              (th_holds f2))
                      (th_holds (impl f1 f2))))))

(declare impl_elim
  (! f1 formula
  (! f2 formula
  (! u2 (th_holds (impl f1 f2))
    (th_holds (or (not f1) f2))))))

(declare not_impl_elim
  (! f1 formula
  (! f2 formula
  (! u (th_holds (not (impl f1 f2)))
    (th_holds (and f1 (not f2)))))))

;; iff elimination

(declare iff_elim_1
  (! f1 formula
  (! f2 formula
  (! u1 (th_holds (iff f1 f2))
    (th_holds (or (not f1) f2))))))

(declare iff_elim_2
  (! f1 formula
  (! f2 formula
  (! u1 (th_holds (iff f1 f2))
    (th_holds (or f1 (not f2)))))))

(declare not_iff_elim
  (! f1 formula
  (! f2 formula
  (! u2 (th_holds (not (iff f1 f2)))
    (th_holds (iff f1 (not f2)))))))

; xor elimination

(declare xor_elim_1
  (! f1 formula
  (! f2 formula
  (! u1 (th_holds (xor f1 f2))
    (th_holds (or (not f1) (not f2)))))))

(declare xor_elim_2
  (! f1 formula
  (! f2 formula
  (! u1 (th_holds (xor f1 f2))
    (th_holds (or f1 f2))))))

(declare not_xor_elim
  (! f1 formula
  (! f2 formula
  (! u2 (th_holds (not (xor f1 f2)))
    (th_holds (iff f1 f2))))))

;; ite elimination

(declare ite_elim_1
  (! a formula
  (! b formula
  (! c formula
  (! u2 (th_holds (ifte a b c))
    (th_holds (or (not a) b)))))))

(declare ite_elim_2
  (! a formula
  (! b formula
  (! c formula
  (! u2 (th_holds (ifte a b c))
    (th_holds (or a c)))))))

(declare ite_elim_3
  (! a formula
  (! b formula
  (! c formula
  (! u2 (th_holds (ifte a b c))
    (th_holds (or b c)))))))

(declare not_ite_elim_1
  (! a formula
  (! b formula
  (! c formula
  (! u2 (th_holds (not (ifte a b c)))
    (th_holds (or (not a) (not b))))))))

(declare not_ite_elim_2
  (! a formula
  (! b formula
  (! c formula
  (! u2 (th_holds (not (ifte a b c)))
    (th_holds (or a (not c))))))))

(declare not_ite_elim_3
  (! a formula
  (! b formula
  (! c formula
  (! u2 (th_holds (not (ifte a b c)))
    (th_holds (or (not b) (not c))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; For theory lemmas
; - make a series of assumptions and then derive a contradiction (or false)
; - then the assumptions yield a formula like "v1 -> v2 -> ... -> vn -> false"
; - In CNF, it becomes a clause: "~v1, ~v2, ..., ~vn"
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare ast
  (! v var
  (! f formula
  (! C clause
  (! r (atom v f)       ;this is specified
  (! u (! o (th_holds f)
         (holds C))
    (holds (clc (neg v) C))))))))

(declare asf
  (! v var
  (! f formula
  (! C clause
  (! r (atom v f)
  (! u (! o (th_holds (not f))
         (holds C))
    (holds (clc (pos v) C))))))))

;; Bitvector lemma constructors to assume
;; the unit clause containing the assumptions
;; it also requires the mapping between bv_v and v
;; The resolution proof proving false will use bv_v as the definition clauses use bv_v
;; but the Problem clauses in the main SAT solver will use v so the learned clause is in terms of v
(declare bv_asf
  (! v var
  (! bv_v var
  (! f formula
  (! C clause
  (! r (atom v f) ;; passed in
  (! x (bvatom v bv_v) ; establishes the equivalence of v to bv_
  (! u (! o (holds (clc (neg bv_v) cln)) ;; l binding to be used in proof
         (holds C))
    (holds (clc (pos v) C))))))))))

(declare bv_ast
  (! v var
  (! bv_v var
  (! f formula
  (! C clause
  (! r (atom v f)       ; this is specified
  (! x (bvatom v bv_v) ; establishes the equivalence of v to bv_v
  (! u (! o (holds (clc (pos bv_v) cln))
         (holds C))
    (holds (clc (neg v) C))))))))))

;; Numeric primitives

(program mpz_sub ((x mpz) (y mpz)) mpz
	 (mp_add x (mp_mul (~1) y)))

(program mp_ispos ((x mpz)) formula
	 (mp_ifneg x false true))

(program mpz_eq ((x mpz) (y mpz)) formula
    (mp_ifzero (mpz_sub x y) true false))

(program mpz_lt ((x mpz) (y mpz)) formula
    (mp_ifneg (mpz_sub x y) true false))

(program mpz_lte ((x mpz) (y mpz)) formula
    (mp_ifneg (mpz_sub x y) true (mpz_eq x y)))

;; Example:
;;
;; Given theory literals (F1....Fn), and an input formula A of the form (th_holds (or F1 (or F2 .... (or F{n-1} Fn))))).
;;
;; We introduce atoms (a1,...,an) to map boolean literals (v1,...,vn) top literals (F1,...,Fn).
;; Do this at the beginning of the proof:
;;
;; (decl_atom F1 (\ v1 (\ a1
;; (decl_atom F2 (\ v2 (\ a2
;; ....
;; (decl_atom Fn (\ vn (\ an
;;
;;  A is then clausified by the following proof:
;;
;;(satlem _ _
;;(asf _ _ _ a1 (\ l1
;;(asf _ _ _ a2 (\ l2
;;...
;;(asf _ _ _ an (\ ln
;;(clausify_false
;;
;;   (contra _
;;      (or_elim_1 _ _ l{n-1}
;;	...
;;      (or_elim_1 _ _ l2
;; 	(or_elim_1 _ _ l1 A))))) ln)
;;
;;))))))) (\ C
;;
;; We now have the free variable C, which should be the clause (v1 V ... V vn).
;;
;; Polarity of literals should be considered, say we have A of the form (th_holds (or (not F1) (or F2 (not F3)))).
;; Where necessary, we use "ast" instead of "asf", introduce negations by "not_not_intro" for pattern matching, and flip
;; the arguments of contra:
;;
;;(satlem _ _
;;(ast _ _ _ a1 (\ l1
;;(asf _ _ _ a2 (\ l2
;;(ast _ _ _ a3 (\ l3
;;(clausify_false
;;
;;   (contra _ l3
;;      (or_elim_1 _ _ l2
;; 	(or_elim_1 _ _ (not_not_intro l1) A))))
;;
;;))))))) (\ C
;;
;; C should be the clause (~v1 V v2 V ~v3 )
; LRAT Proof signature
; LRAT format detailed in "Efficient Certified RAT Verification"
; Link: https://www.cs.utexas.edu/~marijn/publications/lrat.pdf
; Author: aozdemir
; Depends On: sat.plf, smt.plf


; A general note about the design of the side conditions:
;  Some side-conditions make use of a _global assignment_ encoded in
;  0 (true) / 1 (false) marks on variables.

; Unit (https://en.wikipedia.org/wiki/Unit_type)
; For functions that don't return anything
(declare Unit type) ; The type with only one value (like `void` in C)
(declare unit Unit) ; That value

; Boolean operator (not short-circuiting)
(program bool_or ((l bool) (r bool)) bool (match l (ff r) (tt tt)))
(program bool_and ((l bool) (r bool)) bool (match l (tt r) (ff ff)))
(program bool_not ((b bool)) bool (match b (tt ff) (ff tt)))
(program bool_eq ((l bool) (r bool)) bool
         (match l
                (tt (match r
                           (tt tt)
                           (ff ff)))
                (ff (match r
                           (tt ff)
                           (ff tt)))))

; =================== ;
; Working CNF formula ;
; =================== ;

; Represents a CNF formula as a map from clause indices to clauses
; Should be sorted ascending, always!
; Here, and for all collections, the suffix "n" denotes the empty collection and
; the suffix "c" denotes the constructor for the collection in the style of lisp's
; "cons cells"
(declare CMap type)
(declare CMapn CMap)
(declare CMapc (! i mpz (! c clause (! r CMap CMap))))

; ================= ;
; LRAT Proof Format ;
; ================= ;

; CI lists are lists of clause indices.
; They represent clauses to delete.
; They must be sorted.
(declare CIList type)
(declare CIListn CIList)
(declare CIListc (! z mpz (! zs CIList CIList)))

; Traces are a list of clause indices into the working CNF formula
; They represent the clauses that will be unit in a unit propegation to bottom
; Thus their elements are *not* in value order.
(declare Trace type)
(declare Tracen Trace)
(declare Tracec (! z mpz (! zs Trace Trace)))

; RAT Hint list
; Each hint is
;   * An index indicating a clause in the working CNF formula to resolve with
;   * A trace indicating how UP should be done after that resolution
(declare RATHints type)
(declare RATHintsn RATHints)
(declare RATHintsc
         (! target mpz
            (! trace Trace
               (! rest RATHints
                  RATHints))))

; LRAT proof
(declare LRATProof type)
(declare LRATProofn LRATProof)
; Deletion (includes a list of clause indices to delete)
(declare LRATProofd (! cis CIList (! rest LRATProof LRATProof)))
; Addition: a clause index, a clause, RUP trace for that clause, and hints for
; what resolutions should happen then, and how those resolutions imply bottom
; via UP.
; If the list of hints is empty, then bottom is already implied.
(declare LRATProofa
         (! ci mpz
            (! c clause
               (! t Trace
                  (! h RATHints
                     (! rest LRATProof
                        LRATProof))))))

; ========================================== ;
; Functional programs for manipulating types ;
; ========================================== ;

; Are two literal equal?
(program lit_eq ((l1 lit) (l2 lit)) bool
         (match l1
                ((pos v1) (match l2
                                 ((pos v2) (ifequal v1 v2 tt ff))
                                 ((neg v2) ff)))
                ((neg v1) (match l2
                                 ((pos v2) ff)
                                 ((neg v2) (ifequal v1 v2 tt ff))))))

; Remove **all** occurences of a literal from clause
(program clause_remove_all ((l lit) (c clause)) clause
         (match c
                (cln cln)
                ((clc l' c')
                 (let rest_res (clause_remove_all l c')
                   (match (lit_eq l l')
                          (tt rest_res)
                          (ff (clc l' rest_res)))))))

; Return the clause's first  literal
; fails on an empty clause
(program clause_head ((c clause)) lit
         (match c
                (cln (fail lit))
                ((clc l c') l)))

; Does a clause contain some literal?
(program clause_contains_lit ((c clause) (l lit)) bool
         (match c
                ((clc l' c') (match (lit_eq l l')
                                    (tt tt)
                                    (ff (clause_contains_lit c' l))))
                (cln ff)))

; Append two traces
(program Trace_concat ((t1 Trace) (t2 Trace)) Trace
         (match t1
                (Tracen t2)
                ((Tracec h1 r1) (Tracec h1 (Trace_concat r1 t2)))))

; Return whether a list of RAT hits is empty
(program RATHints_is_empty ((h RATHints)) bool
         (match h
                (RATHintsn tt)
                ((RATHintsc a b c) ff)))

; Insert into a CMap, preserving order
(program CMap_insert ((i mpz) (c clause) (cs CMap)) CMap
         (match cs
                (CMapn (CMapc i c CMapn))
                ((CMapc i' c' r)
                 (mp_ifneg (mpz_sub i i')
                        (CMapc i c cs)
                        (CMapc i' c' (CMap_insert i c r))))))

; Get from a CMap
(program CMap_get ((i mpz) (cs CMap)) clause
         (match cs
                (CMapn (fail clause))
                ((CMapc i' c r)
                 (mp_ifzero (mpz_sub i i')
                        c
                        (CMap_get i r)))))

; Remove from CMap. Only removes one element.
(program CMap_remove ((i mpz) (cs CMap)) CMap
         (match cs
                (CMapn CMapn)
                ((CMapc i' c r)
                 (mp_ifzero (mpz_sub i i')
                        r
                        (CMapc i' c (CMap_remove i r))))))

; Remove many indices from a CMap. Asuumes the input list is sorted.
(program CMap_remove_many ((is CIList) (cs CMap)) CMap
         (match
           is
           (CIListn cs)
           ((CIListc i is')
            (match
              cs
              (CMapn (fail CMap)) ; All deletion indices must be valid!
              ((CMapc ci c cs')
               (mp_ifzero (mpz_sub i ci)
                       (CMap_remove_many is' cs')
                       (CMapc ci c (CMap_remove_many is cs'))))))))

; Given a map of clauses and a literal, return all indices in the map
; corresponsing to clauses that could resolve against that literal. i.e. for x,
; return the indices of all clauses containing x.
(program collect_resolution_targets_w_lit ((cs CMap) (l lit)) CIList
         (match cs
                (CMapn CIListn)
                ((CMapc i c cs')
                 (let rest_solution (collect_resolution_targets_w_lit cs' l)
                   (match (clause_contains_lit c l)
                        (tt (CIListc i rest_solution))
                        (ff rest_solution))))))

; Given a clause and a maps of clauses, return all indices in the map
; corresponding to clauses which could resolve with this one on its first
; literal
(program collect_resolution_targets ((cs CMap) (c clause)) CIList
         (collect_resolution_targets_w_lit cs (lit_flip (clause_head c))))

; Is this clause a tautology?
; Internally uses mark 5 to flag variables that occur (+)
; and mark 6 to flag variables that occur (-)
(program is_t ((c clause)) bool
         (match
           c
           (cln ff)
           ((clc l c') (match
                         l
                         ((pos v)
                          (ifmarked5
                            v
                            (is_t c')
                            (ifmarked6
                              v
                              tt
                              (do
                                (markvar5 v)
                                (let r (is_t c') (do (markvar5 v) r))))))
                         ((neg v)
                          (ifmarked6
                            v
                            (is_t c')
                            (ifmarked5
                              v
                              tt
                              (do
                                (markvar6 v)
                                (let r (is_t c') (do (markvar6 v) r))))))))))

; ===================================================================== ;
; Programs for manipulating and querying the global variable assignment ;
; ===================================================================== ;

; This assignment marks values of type `var`.
; It marks a variable with 1 if that variable is true
; It marks a variable with 2 if that variable is false
; A variable should not be marked with both!
; A variable may be marked with neither, indicating that variable is presently
; unassigned, which we call "floating".

; Mark the variable within to satisfy this literal.
; fails if the literal is already UNSAT
(program lit_mk_sat ((l lit)) Unit
         (match l
                ((pos v) (ifmarked2 v
                                    (fail Unit)
                                    (ifmarked1 v unit (do (markvar1 v) unit))))
                ((neg v) (ifmarked1 v
                                    (fail Unit)
                                    (ifmarked2 v unit (do (markvar2 v) unit))))))

; Mark the variable within to falsify this literal.
; fails is the literal is already SAT
(program lit_mk_unsat ((l lit)) Unit
         (match l
                ((neg v) (ifmarked2 v
                                    (fail Unit)
                                    (ifmarked1 v unit (do (markvar1 v) unit))))
                ((pos v) (ifmarked1 v
                                    (fail Unit)
                                    (ifmarked2 v unit (do (markvar2 v) unit))))))

; Unmarks the variable within a satified literal to render it neither satified nor falsified
; fails if the literal is not already satisfied
(program lit_un_mk_sat ((l lit)) Unit
         (match l
                ((pos v) (ifmarked1 v (do (markvar1 v) unit) (fail Unit)))
                ((neg v) (ifmarked2 v (do (markvar2 v) unit) (fail Unit)))))

; Unmarks the variable within a falsified literal to render it neither satified nor falsified
; fails if the literal is not already falsified
(program lit_un_mk_unsat ((l lit)) Unit
         (match l
                ((pos v) (ifmarked2 v (do (markvar2 v) unit) (fail Unit)))
                ((neg v) (ifmarked1 v (do (markvar1 v) unit) (fail Unit)))))

;  Is a literal presently satisfied?
(program lit_is_sat ((l lit)) bool
         (match l
                ((pos v) (ifmarked1 v tt ff))
                ((neg v) (ifmarked2 v tt ff))))

;  Is a literal presently falsified?
(program lit_is_unsat ((l lit)) bool
         (match l
                ((pos v) (ifmarked2 v tt ff))
                ((neg v) (ifmarked1 v tt ff))))

;  Is a  literal presently neither satisfied nor falsified?
(program lit_is_floating ((l lit)) bool
         (bool_not (bool_or (lit_is_sat l) (lit_is_unsat l))))

; Does this clause contain a floating literal?
(program clause_has_floating ((c clause)) bool
         (match c
                (cln ff)
                ((clc l c') (match (lit_is_floating l)
                                   (tt tt)
                                   (ff (clause_has_floating c'))))))

; Is this clause falsified? i.e. are all its clauses falsified?
(program clause_is_unsat ((c clause)) bool
         (match c
                (cln tt)
                ((clc l c') (match (lit_is_unsat l)
                                   (tt (clause_is_unsat c'))
                                   (ff ff)))))

; Is this clause presently satisfied?
(program clause_is_sat ((c clause)) bool
         (match c
                (cln ff)
                ((clc l c') (match (lit_is_sat l)
                                   (tt tt)
                                   (ff (clause_is_sat c'))))))

; Falsify **all** contained literals.
; Fails on a tautological clause
(program clause_mk_all_unsat ((c clause)) Unit
         (match c
                (cln unit)
                ((clc l c') (do
                              (lit_mk_unsat l)
                              (clause_mk_all_unsat c')))))

; Unfalsifies **all** contained literals
; Fails on a clause with duplicate literals
(program clause_un_mk_all_unsat ((c clause)) Unit
         (match c
                (cln unit)
                ((clc l c') (do
                              (lit_un_mk_unsat l)
                              (clause_un_mk_all_unsat c')))))

; Get the first floating literal out of this clause.
; fails if there are no floating literals
(program clause_first_floating ((c clause)) lit
         (match c
                (cln (fail lit))
                ((clc l c') (match (lit_is_floating l)
                                   (tt l)
                                   (ff (clause_first_floating c'))))))

; ===================================== ;
; High-Level Programs for LRAT Checking ;
; ===================================== ;

; The return type for verifying that a clause is unit and modifying the global
; assignment to satisfy it
(declare MarkResult type)
; The clause is unit, and this is the (previoiusly floating) literal that is now satified.
(declare MRUnit (! l lit MarkResult))
; The clause was unsat!
(declare MRUnsat MarkResult)
; The clauss was already satisfied.
(declare MRSat MarkResult)
; The clause had multiple floating literals.
(declare MRNotUnit MarkResult)

; Determine wether this clause is sat, unsat, unit, or not unit, and if it is
; unit, it modifies the global assignment to satisfy the clause, and returns
; the literal that was made SAT by the new mark.
;
; If `c` is a tautology, reports `MRSat`, since it is (trivially) satisfied.
(program clause_check_unit_and_maybe_mark ((c clause)) MarkResult
         (match (clause_is_sat c)
                (tt MRSat)
                (ff (match (clause_is_unsat c)
                           (tt MRUnsat)
                           (ff (match (is_t c)
                                      (tt MRSat)
                                      (ff ; Dedent
         (match (clause_has_floating c)
                (tt (let first (clause_first_floating c)
                      (do (lit_mk_sat first)
                        (match (clause_has_floating c)
                               (tt (do (lit_un_mk_sat first) MRNotUnit))
                                      (ff (MRUnit first))))))
                ; Unreachable. If clause is not floating it must have been SAT or UNSAT.
                (ff (fail MarkResult))
                ))))))))

; The return type for the process of Trace-guided unit propegation
(declare UPResult type)
; The trace guided unit propegation correctly, but that unit propegation did not end in an empty clause
(declare UPR_Ok UPResult)
; The trace guided unit propegation correctly to an empty clause
(declare UPR_Bottom UPResult)
; The trace was malformed,
;; i.e. at some point indicates that a non-unit, non-empty clause should be examined
(declare UPR_Broken UPResult)

; Execute the unit propegation indicated by the trace. Report whether that
; unit propegation succeeds and produces bottom, fails, or succeeds but does
; not produce bottom.
;
; If the trace tries to propegate through a TAUT clause, fails.
(program do_up ((cs CMap) (t Trace)) UPResult
         (match
           t
           (Tracen UPR_Ok)
           ((Tracec i r) (match (clause_check_unit_and_maybe_mark (CMap_get i cs))
                                ((MRUnit l)
                                 (let res (do_up cs r)
                                   (do (lit_un_mk_sat l) res)))
                                (MRUnsat UPR_Bottom)
                                (MRSat UPR_Broken)
                                (MRNotUnit UPR_Broken)))))


; Determine whether a list of indices agrees with the list of indices latent in
; a list of hints. Both lists should be sorted.
(program resolution_targets_match (
                                   (computed CIList)
                                   (given RATHints)) bool
         (match given
                (RATHintsn
                  (match computed
                         (CIListn tt)
                         ((CIListc a b) ff)))
                ((RATHintsc hint_idx t given')
                 (match computed
                        ((CIListc comp_idx computed')
                         (mp_ifzero (mpz_sub hint_idx comp_idx)
                                    (resolution_targets_match computed' given')
                                    (ff)))
                        (CIListn ff)))))


; Determines whether `t` is a witness that `c` is an Assymetric Tautology in `cs`.
;
; Does unit propegation in the formula `cs`, beginning by falsifying
; all literals in `c`, and then looking at the clauses indicated by `t`.
; Assumes no marks, and cleans up marks afterwards.
;
; Fails if `c` has duplicates
(program is_at_trace ((cs CMap) (c clause) (t Trace)) UPResult
         (match (is_t c)
                (ff
                  (do
                    (clause_mk_all_unsat c)
                    (let result (do_up cs t)
                      (do (clause_un_mk_all_unsat c) result))))
                (tt
                  UPR_Bottom)))



; List of (clause, trace) pairs
(declare CTPairs type)
(declare CTPn CTPairs)
(declare CTPc (! c clause (! t Trace (! rest CTPairs CTPairs))))

; For each RAT hint, construct the pseudo-resolvant for that hint, and the net
; trace for that hint. Return a list of these.
;
; Pseudo resolvant: if l v C is the clause, and D is another clause containing
; ~l, then l v C v (D \ ~l) is the pseudo-resolvant, which is the actual
; resolant, plut l, which would be implied by UP.
;
; The net trace is the global trace (`t`), plut the trace for that specific
; resolvant.
(program construct_ct_pairs (
                             (cs CMap)
                             (c clause)
                             (t Trace)
                             (hints RATHints)
                            ) CTPairs
         (match hints
                (RATHintsn CTPn)
                ((RATHintsc i ht hints')
                 (CTPc
                   (clause_dedup (clause_append c
                                  (clause_remove_all (lit_flip (clause_head c))
                                                     (CMap_get i cs))))
                   (Trace_concat t ht)
                   (construct_ct_pairs cs c t hints')))))

; Goes through a list of clause, trace pairs and verifies that each clause is
; an AT via that trace.
; Fails if any putative AT is a TAUT or contains duplicates
(program are_all_at_trace (
                     (cs CMap)
                     (l CTPairs)
                    ) UPResult
         (match l
                (CTPn UPR_Bottom)
                ((CTPc c t l')
                 (match (is_at_trace cs c t)
                        (UPR_Ok UPR_Ok)
                        (UPR_Broken UPR_Broken)
                        (UPR_Bottom (are_all_at_trace cs l'))))))

; Is this trace, and list of hints, proof that `c` is an Resolution Assymeytic
; Tautology?
; Fails is the hints are empty (which means `c` should  be AT) and `c` contains
; duplicates)
(program is_rat_trace ((cs CMap) (c clause) (t Trace) (hints RATHints)) UPResult
         (match
           (RATHints_is_empty hints)
           (tt ; Empty RAT hints -- the clause must be AT
             (is_at_trace cs c t))
           (ff ; Ew -- we must verify this is a RAT
             (match (resolution_targets_match
                      (collect_resolution_targets cs c)
                      hints)
                    (ff ; Resolution targets disagree with hints.
                      UPR_Broken)
                    (tt
                      (are_all_at_trace cs (construct_ct_pairs cs c t hints)))))))

; Is this proof an LRAT proof of bottom?
; Fails if any added AT is a TAUT or contains duplicates OR if any added RAT
; produces pseudo-resolvants which are TAUT or contain duplicates
(program is_lrat_proof_of_bottom ((f CMap) (proof LRATProof)) bool
         (match proof
                ((LRATProofd indices rest)
                 (is_lrat_proof_of_bottom
                   (CMap_remove_many indices f)
                   rest))
                ((LRATProofa idx c trace hints rest)
                 (match (is_rat_trace f c trace hints)
                    (UPR_Bottom
                      (match
                        c
                        (cln tt)
                        ((clc a b)
                         (is_lrat_proof_of_bottom (CMap_insert idx c f) rest))))
                    (UPR_Ok ff)
                    (UPR_Broken ff)))
                (LRATProofn ff))
         )


; Proof of a CMap from clause proofs.
; The idx is unelidable b/c it is unspecified.
;  Robust against clauses with duplicat literals, but not against tautological
;  clauses.
(declare CMap_holds (! c CMap type))
(declare CMapn_proof (CMap_holds CMapn))
(declare CMapc_proof
         (! idx mpz ; Not elidable!
            (! c clause
               (! deduped_c clause
                  (! rest CMap
                     (! proof_c (holds c)
                        (! proof_rest (CMap_holds rest)
                            (! sc (^ (clause_dedup c) deduped_c)
                               (CMap_holds (CMapc idx deduped_c rest))))))))))

(define bottom (holds cln))
(declare lrat_proof_of_bottom
         (! cm CMap
            (! proof_cm (CMap_holds cm)
               (! proof LRATProof
                  (! sc (^ (is_lrat_proof_of_bottom cm proof) tt)
                     bottom)))))


; TODO(aozdemir) Reducing the amount of checking that resides in side-conditions.
; Steps
;  1. Unroll the traversal of is_lrat_proof_of_bottom into a serialized
;     sequence of axiom applications.
;     The axioms would likely correspond to DELETE, IS T, IS AT, IS RAT.
;     They would manipulate a CMap by way of side-conditions.
;  2. Unroll AT checks by manifesting the assignment in data rather than marks,
;     and having axioms like IS_UNSAT, IS_UNIT_ON_LITERAL.
;  3. Unroll RAT checks in a similar fashion, although more painfully.
; Depends on lrat.plf
;
; Implementation of DRAT checking.
;
; Unfortunately, there are **two** different notions of DRAT floating around in
; the world:
;   * Specified   DRAT : This is a reasonable proof format
;   * Operational DRAT : This is a variant of specified DRAT warped by the
;                        details of common SAT solver architectures.
;
; Both are detailed in this paper, along with their differences:
;   http://fmv.jku.at/papers/RebolaPardoBiere-POS18.pdf
;
; This signature contains implementations for a checker for each.
; **Specified DRAT** is first.

; A DRAT proof itself: a list of addition or deletion instructions.
(declare DRATProof type)
(declare DRATProofn DRATProof)
(declare DRATProofa (! c clause (! p DRATProof DRATProof)))
(declare DRATProofd (! c clause (! p DRATProof DRATProof)))

; ==================== ;
; Functional  Programs ;
; ==================== ;

; Are two clauses equal (i.e., if interpretted as sets of literals, are those
; sets equal?)
;
; Assumes that marks 1,2,3,4 are clear for the constituent variables, and
; leaves them clear afterwards.
;
; Since clauses are sets, it is insufficient to do list equality.
; We could sort them, but that would require defining an order on our variables,
; and incurring the cost of sorting.
;
;
; Instead, we do the following:
;  1. Sweep the first clause, marking variables with flags 1,3 (pos) and 2,4 (neg)
;  2. Sweep the second clause, erasing marks 1,2. Returning FALSE if no mark 3,4.
;  3. Unsweep the first clause, returning FALSE on marks 1,2.
;     Also unmarking 3,4, and 1,2 if needed
;
; So the mark 1 means (seen as + in c1, but not yet in c2)
;    the mark 3 means (seen as + in c1)
;    the mark 2 means (seen as - in c1, but not yet in c2)
;    the mark 4 means (seen as - in c1)
;
; This implementation **does not**:
;    1. assume that clauses do not have duplicates
;       (so the clause [x v x v ~y] is an accceptable input)
;    2. assume that clauses are non-tautological
;       (so the clause [x v ~x] is an acceptable input)
;
; TODO(aozdemir) This implementation could be further optimized b/c once c1 is
; drained, we need not continue to pattern match on it.
(program clause_eq ((c1 clause) (c2 clause)) bool
         (match
           c1
           (cln (match
                  c2
                  (cln tt)
                  ((clc c2h c2t) (match
                                   c2h
                                   ((pos v)
                                    (ifmarked1
                                      v
                                      (do (markvar1 v)
                                        (clause_eq c1 c2t))
                                      (ifmarked3
                                        v
                                        (clause_eq c1 c2t)
                                        ff)))
                                   ((neg v)
                                    (ifmarked2
                                      v
                                      (do (markvar2 v)
                                        (clause_eq c1 c2t))
                                      (ifmarked4
                                        v
                                        (clause_eq c1 c2t)
                                        ff)))))))
           ((clc c1h c1t) (match
                            c1h
                            ((pos v)
                             (ifmarked3
                               v
                               (clause_eq c1t c2)
                               (do (markvar3 v)
                                 (do (markvar1 v)
                                   (let res (clause_eq c1t c2)
                                     (do (markvar3 v)
                                       (ifmarked1
                                         v
                                         (do (markvar1 v) ff)
                                         res)))))))
                            ((neg v)
                             (ifmarked4
                               v
                               (clause_eq c1t c2)
                               (do (markvar4 v)
                                 (do (markvar2 v)
                                   (let res (clause_eq c1t c2)
                                     (do (markvar4 v)
                                       (ifmarked2
                                         v
                                         (do (markvar2 v) ff)
                                         res)))))))))))


; Does this formula contain bottom as one of its clauses?
(program cnf_has_bottom ((cs cnf)) bool
         (match cs
                (cnfn ff)
                ((cnfc c rest) (match c
                                      (cln tt)
                                      ((clc l c') (cnf_has_bottom rest))))))

; Return a new cnf with one copy of this clause removed.
; If the clause is absent, returns the original cnf.
(program cnf_remove_clause ((c clause) (cs cnf)) cnf
         (match cs
                (cnfn cnfn)
                ((cnfc c' cs')
                 (match (clause_eq c c')
                        (tt cs')
                        (ff (cnfc c' (cnf_remove_clause c cs')))))))

; return (c1 union (c2 \ ~l))
; Significant for how a RAT is defined.
(program clause_pseudo_resolvent ((c1 clause) (c2 clause)) clause
         (clause_dedup (clause_append c1
                                      (clause_remove_all
                                        (lit_flip (clause_head c1)) c2))))

; Given a formula, `cs` and a clause `c`, return all pseudo resolvents, i.e. all
;     (c union (c' \ ~head(c)))
;   for c' in cs, where c' contains ~head(c)
(program collect_pseudo_resolvents ((cs cnf) (c clause)) cnf
         (match cs
                (cnfn cnfn)
                ((cnfc c' cs')
                 (let rest_of_resolvents (collect_pseudo_resolvents cs' c)
                   (match (clause_contains_lit c' (lit_flip (clause_head c)))
                          (tt (cnfc (clause_pseudo_resolvent
                                      c
                                      c')
                                    rest_of_resolvents))
                          (ff rest_of_resolvents))))))

; =============================================================== ;
; Unit Propegation implementation (manipulates global assignment) ;
; =============================================================== ;
; See the lrat file for a description of the global assignment.

; The result of search for a unit clause in
(declare UnitSearchResult type)
; There was a unit, and
;    this is the (previously floating) literal that is now satisfied.
;    this is a version of the input cnf with satisfied clauses removed.
(declare USRUnit (! l lit (! f cnf UnitSearchResult)))
; There was an unsat clause
(declare USRBottom UnitSearchResult)
; There was no unit.
(declare USRNoUnit UnitSearchResult)

; If a UnitSearchResult is a Unit, containing a cnf, adds this clause to that
; cnf. Otherwise, returns the UnitSearchResult unmodified.
(program USR_add_clause ((c clause) (usr UnitSearchResult)) UnitSearchResult
         (match usr
                ((USRUnit l f) (USRUnit l (cnfc c f)))
                (USRBottom USRBottom)
                (USRNoUnit USRNoUnit)))

; Searches through the clauses, looking for a unit clause.
; Reads the global assignment. Possibly assigns one variable.
;  Returns
;    USRBottom     if there is an unsat clause
;    (USRUnit l f) if there is a unit, with lit l, and
;                  f is the cnf with some SAT clauses removed.
;    USRNoUnit     if there is no unit
(program unit_search ((f cnf)) UnitSearchResult
         (match f
                (cnfn USRNoUnit)
                ((cnfc c f')
                 (match (clause_check_unit_and_maybe_mark c)
                        (MRSat (unit_search f'))
                        ((MRUnit l) (USRUnit l f'))
                        (MRUnsat USRBottom)
                        (MRNotUnit (USR_add_clause c (unit_search f')))))))


; Given the current global assignment, does the formula `f` imply bottom via
; unit propegation? Leaves the global assignment in the same state that it was
; initially.
(program unit_propegates_to_bottom ((f cnf)) bool
         (match (unit_search f)
                (USRBottom tt)
                ((USRUnit l f') (let result (unit_propegates_to_bottom f')
                               (do (lit_un_mk_sat l)
                                 result)))
                (USRNoUnit ff)))

; ================================== ;
; High-Level DRAT checking functions ;
; ================================== ;

; Is this clause an AT?
(program is_at ((cs cnf) (c clause)) bool
         (match (is_t c)
                (tt tt)
                (ff (do (clause_mk_all_unsat c)
                      (let r (unit_propegates_to_bottom cs)
                        (do (clause_un_mk_all_unsat c)
                          r))))))

; Are all of these clauses ATs?
(program are_all_at ((cs cnf) (clauses cnf)) bool
         (match clauses
                (cnfn tt)
                ((cnfc c clauses')
                 (match (is_at cs c)
                        (tt (are_all_at cs clauses'))
                        (ff ff)))))

; Is the clause `c` a RAT for the formula `cs`?
(program is_rat ((cs cnf) (c clause)) bool
         (match (is_t c)
                (tt tt)
                (ff (match (is_at cs c)
                           (tt tt)
                           (ff (match c
                                      (cln ff)
                                      ((clc a b) (are_all_at ; dedent
                                 cs
                                 (collect_pseudo_resolvents cs c)))))))))

; Is this proof a valid DRAT proof of bottom?
(program is_specified_drat_proof ((f cnf) (proof DRATProof)) bool
         (match proof
                (DRATProofn (cnf_has_bottom f))
                ((DRATProofa c p) (match
                                    (is_rat f c)
                                    (tt (is_specified_drat_proof (cnfc c f) p))
                                    (ff ff)))
                ((DRATProofd c p)
                 (is_specified_drat_proof (cnf_remove_clause c f) p))))


; =============================== ;
; Operational DRAT implementation ;
; =============================== ;

; Operation DRAT is defined in the paper "Two Flavors of DRAT".
; Below is an extension of the DRAT signature to handle it.

; Notes on types.
; For operational DRAT it is useful to manifest partial assignments in values
; (although we still use the global assignment in some places). To this end,
; literals are used to represent single-variable assignments ((pos v) denotes
; {v maps to true}) and clauses are partial assignments by way of being
; literal lists.

; Copy the partial assignment represented by a clause into the global
; assignment. Fails if that clause represents an inconsistent partial
; assignment (e.g. v is both true and false)
(program clause_into_global ((a clause)) Unit
         (match a
                (cln unit)
                ((clc l rest)
                 (do (lit_mk_sat l) (clause_into_global rest)))))

; Remove the partial assignment represented by c from the global assignment
(program clause_undo_into_global ((a clause)) Unit
         (match a
                (cln unit)
                ((clc l rest)
                 (do (lit_un_mk_sat l) (clause_undo_into_global rest)))))

; Does this clause have no floating literals w.r.t. the global assignment?
(program clause_no_floating ((c clause)) bool
         (match c
                (cln tt)
                ((clc l rest) (match (lit_is_floating l)
                                    (tt ff)
                                    (ff (clause_no_floating rest))))))

; Does this clause have no sat literals w.r.t. the global assignment?
(program clause_no_sat ((c clause)) bool
         (match c
                (cln tt)
                ((clc l rest) (match (lit_is_sat l)
                                    (tt ff)
                                    (ff (clause_no_sat rest))))))

; Does this clause have one sat literal w.r.t. the global assignment?
(program clause_one_sat ((c clause)) bool
         (match c
                (cln ff)
                ((clc l rest) (match (lit_is_sat l)
                                    (tt (clause_no_sat rest))
                                    (ff (clause_one_sat rest))))))

; Is this clause a unit clause w.r.t. the global assignment?
; This notion is defined as:
;    * A clause where no literals are floating, and exactly one is sat.
(program clause_is_unit_wrt_up_model ((c clause) (up_model clause)) bool
         (let c' (clause_dedup c)
         (do (clause_into_global up_model)
           (let result (match (clause_no_floating c')
                              (tt (clause_one_sat c'))
                              (ff ff))
             (do (clause_undo_into_global up_model)
               result)))))

; Result from constructing a UP model (defined in "Two Flavors of DRAT")
; Technically, we're constructing the shared UP model -- the intersection of all
; UP models.
; Informally, this is just the partial assignment implied by UP.
;
; This type is necessary, because constructing a UP model can reveal an
; inconsistent UP model -- one which assigns some variable to true and false.
; This would break our machinery, so we special case it.
(declare UPConstructionResult type)
; An actual model
(declare UPCRModel (! up_model clause UPConstructionResult))
; Bottom is implied!
(declare UPCRBottom UPConstructionResult)


; Do unit propagation on `f`, constructing a UP model for it.
(program build_up_model ((f cnf)) UPConstructionResult
         (match (unit_search f)
                (USRBottom UPCRBottom)
                (USRNoUnit (UPCRModel cln))
                ((USRUnit l f')
                 (let result (build_up_model f')
                   (do (lit_un_mk_sat l)
                     (match result
                            (UPCRBottom UPCRBottom)
                            ((UPCRModel model) (UPCRModel (clc l model)))))))))

; Given some starting assignment (`up_model`), continue UP to construct a larger
; model.
(program extend_up_model ((f cnf) (up_model clause)) UPConstructionResult
         (do (clause_into_global up_model)
           (let result (build_up_model f)
             (do (clause_undo_into_global up_model)
               (match result
                      (UPCRBottom UPCRBottom)
                      ((UPCRModel up_model')
                       (UPCRModel (clause_append up_model up_model'))))))))

; Helper for `is_operational_drat_proof` which takes a UP model for the working
; formula. The UP model is important for determining which clause deletions
; actually are executed in operational DRAT. Passing the UP model along
; prevents it from being fully recomputed everytime.
(program is_operational_drat_proof_h ((f cnf) (up_model clause) (pf DRATProof)) bool
         (match pf
                (DRATProofn (cnf_has_bottom f))
                ((DRATProofd c pf')
                 (match (clause_is_unit_wrt_up_model c up_model)
                        (tt (is_operational_drat_proof_h f up_model pf'))
                        (ff (is_operational_drat_proof_h
                              (cnf_remove_clause c f) up_model pf'))))
                ((DRATProofa c pf')
                 (let f' (cnfc c f)
                   (match (is_rat f c)
                          (tt (match (extend_up_model f' up_model)
                                     (UPCRBottom tt)
                                     ((UPCRModel up_model')
                                      (is_operational_drat_proof_h f' up_model' pf'))))
                          (ff ff))))))

; Is this an operational DRAT proof of bottom for this formula?
(program is_operational_drat_proof ((f cnf) (pf DRATProof)) bool
         (match (build_up_model f)
                (UPCRBottom tt)
                ((UPCRModel model) (is_operational_drat_proof_h f model pf))))

; Is this a specified or operational DRAT proof of bottom for this formula?
(program is_drat_proof ((f cnf) (pf DRATProof)) bool
         (match (is_specified_drat_proof f pf)
                (tt tt)
                (ff (is_operational_drat_proof f pf))))

(declare drat_proof_of_bottom
         (! f cnf
            (! proof_of_formula (cnf_holds f)
               (! proof DRATProof
                  (! sc (^ (is_drat_proof f proof) tt)
                     bottom)))))

; Depends on sat.plf

; This file exists to support the **definition introduction** (or **extension**)
; rule in the paper:
;  "Extended Resolution Simulates DRAT"
; which can be found at http://www.cs.utexas.edu/~marijn/publications/ijcar18.pdf
;
; The core idea of extended resolution is that given **any** formula f
; involving the variables from some SAT problem, one can introduce the
; constraint
;
;    new <=> f
;
; without changing satisfiability, where "new" is a fresh variable.
;
; This signature does not provide axioms for facilitating full use of this
; idea. Instead, this signature facilitates use of one specific kind of
; extension, that of the form:
;
;     new <=> old v (~l_1 ^ ~l_2 ^ ... ^ ~l_n)
;
; which translates into the clauses:
;
;                      new v l_1 v l_2 v ... v l_n
;                      new v ~old
;     for each i <= n: l_i v ~new v old
;
; This kind of extension is (a) sufficient to simulate DRAT proofs and (b) easy
; to convert to clauses, which is why we use it.

; A definition witness value for:
;              new <=> old v (~others_1 ^ ~others_2 ^ ... ^ ~others_n)
; It witnesses the fact that new was fresh when it was defined by the above.
;
; Thus it witnesses that the above, when added to the formula consisting of the
; conjunction all the already-proven clauses, produces an equisatisfiable
; formula.
(declare definition (! new var (! old lit (! others clause type))))

; Given `old` and `others`, this takes a continuation which expects
;      1. a fresh variable `new`
;      2. a definition witness value for:
;              new <=> old v (~others_1 ^ ~others_2 ^ ... ^ ~others_n)
;
; Aside:
;    In programming a **continuation** of some computation is a function that
;    takes the results of that computation as arguments to produce a final
;    result.
;
;    In proof-construction a **continuation** of some reasoning is a function
;    that takes the results of that reasoning as arguments to proof a final
;    result.
;
; That definition witness value can be clausified using the rule below.
;
; There need to be two different rules because the side-condition for
; clausification needs access to the new variable, which doesn't exist except
; inside the continuation, which is out-of-scope for any side-condition
; associated with this rule.
(declare decl_definition
         (! old lit
            (! others clause ; List of vars
               (! pf_continuation (! new var (! def (definition new old others)
                                           (holds cln)))
                  (holds cln)))))

; Represents multiple conjoined clauses.
; There is a list, `heads` of literals, each of which is suffixed by the
; same `tail`.
(declare common_tail_cnf_t type)
(declare common_tail_cnf
         (! heads clause
         (! tail  clause common_tail_cnf_t)))

; A member of this type is a proof of a common_tail_cnf.
(declare common_tail_cnf_holds
         (! cnf common_tail_cnf_t type))

; This translates a definition witness value for the def:
;
;    new <=> old v (~l_1 ^ ~l_2 ^ ... ^ ~l_n)
;
; into the clauses:
;
;                      new v l_1 v l_2 v ... v l_n
;                      new v ~old
;     for each i <= n: l_i v ~new v old              (encoded as (cnf_holds ...))
(declare clausify_definition
         (! new var
         (! old lit
         (! others clause
         ; Given a definition { new <-> old v (~l_1 ^ ~l_2 ^ ... ^ ~l_n) }
         (! def (definition new old others)
         (! negOld lit
         (! mkNegOld (^ (lit_flip old) negOld)
         ; If you can prove bottom from its clausal representation
         (! pf_continuation
            ; new v l_1 v l_2 v ... v l_n
            (! pf_c1 (holds (clc (pos new) others))
               ; new v ~old
               (! pf_c2 (holds (clc (pos new) (clc negOld cln)))
                  ; for each i <= n: l_i v ~new v old
                  (! pf_cs (common_tail_cnf_holds
                             (common_tail_cnf
                               others
                               (clc (neg new) (clc old cln))))
                     (holds cln))))
         ; Then you've proven bottom
         (holds cln)))))))))

; These axioms are useful for converting a proof of some CNF formula represented
; using the `common_tail_cnf` type (a value of type `common_tail_cnf_holds`),
; into proofs of its constituent clauses (many values of type `holds`).
; Given
;    1. a proof of some `common_tail_cnf`
; Then
;    1. the first axiom gives you a proof of the first `clause` therein and
;    2. the second gives you a proof of the rest of the `common_tail_cnf`.
(declare common_tail_cnf_prove_head
         (! first lit
         (! rest clause
         (! tail clause
         (! pf (common_tail_cnf_holds (common_tail_cnf (clc first rest) tail))
            (holds (clc first tail)))))))
(declare common_tail_cnf_prove_tail
         (! first lit
         (! rest clause
         (! tail clause
         (! pf (common_tail_cnf_holds (common_tail_cnf (clc first rest) tail))
            (common_tail_cnf_holds (common_tail_cnf rest tail)))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Theory of Equality and Congruence Closure
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; depends on : smt.plf

; sorts :

(declare arrow (! s1 sort (! s2 sort sort)))	; function constructor

; functions :

(declare apply (! s1 sort
               (! s2 sort
               (! t1 (term (arrow s1 s2))
               (! t2 (term s1)
                (term s2))))))


; inference rules :

(declare trust (th_holds false))	; temporary
(declare trust_f (! f formula (th_holds f)))  ; temporary

(declare refl
  (! s sort
  (! t (term s)
    (th_holds (= s t t)))))

(declare symm (! s sort
              (! x (term s)
              (! y (term s)
              (! u (th_holds (= s x y))
                (th_holds (= s y x)))))))

(declare trans (! s sort
               (! x (term s)
               (! y (term s)
               (! z (term s)
               (! u (th_holds (= s x y))
               (! u (th_holds (= s y z))
                 (th_holds (= s x z)))))))))

(declare negsymm (! s sort
              	 (! x (term s)
              	 (! y (term s)
              	 (! u (th_holds (not (= s x y)))
                   (th_holds (not (= s y x))))))))

(declare negtrans1 (! s sort
                   (! x (term s)
              	   (! y (term s)
               	   (! z (term s)
               	   (! u (th_holds (not (= s x y)))
               	   (! u (th_holds (= s y z))
                     (th_holds (not (= s x z))))))))))

(declare negtrans2 (! s sort
                   (! x (term s)
              	   (! y (term s)
               	   (! z (term s)
               	   (! u (th_holds (= s x y))
               	   (! u (th_holds (not (= s y z)))
                     (th_holds (not (= s x z))))))))))

(declare cong (! s1 sort
              (! s2 sort
              (! a1 (term (arrow s1 s2))
              (! b1 (term (arrow s1 s2))
              (! a2 (term s1)
              (! b2 (term s1)
              (! u1 (th_holds (= (arrow s1 s2) a1 b1))
              (! u2 (th_holds (= s1 a2 b2))
                (th_holds (= s2 (apply s1 s2 a1 a2) (apply s1 s2 b1 b2))))))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Examples

; an example of "(p1 or p2(0)) and t1=t2(1)"
;(! p1 (term Bool)
;(! p2 (term (arrow Int Bool))
;(! t1 (term Int)
;(! t2 (term (arrow Int Int))
;(! F (th_holds (and (or (p_app p1) (p_app (apply _ _ p2 0)))
;                    (= _ t1 (apply _ _ t2 1))))
;  ...

; another example of "p3(a,b)"
;(! a (term Int)
;(! b (term Int)
;(! p3 (term (arrow Int (arrow Int Bool)))	; arrow is right assoc.
;(! F (th_holds (p_app (apply _ _ (apply _ _ p3 a) b))) ; apply is left assoc.
;  ...
;;;; TEMPORARY:

(declare trust-bad (th_holds false))

; helper stuff

(program mpz_ ((x mpz) (y mpz)) formula
    (mp_ifzero (mpz_sub x y) true false))


; "bitvec" is a term of type "sort"
; (declare BitVec sort)
(declare BitVec (!n mpz sort))

; bit type
(declare bit type)
(declare b0 bit)
(declare b1 bit)

; bit vector type used for constants
(declare bv type)
(declare bvn bv)
(declare bvc (! b bit (! v bv bv)))

; calculate the length of a bitvector
;; (program bv_len ((v bv)) mpz
;;   (match v
;;     (bvn 0)
;;     ((bvc b v') (mp_add (bv_len v') 1))))


; a bv constant term
(declare a_bv
	 (! n mpz
	 (! v bv
	    (term (BitVec n)))))

(program bv_constants_are_disequal ((x bv) (y bv)) formula
  (match x
      (bvn (fail formula))
      ((bvc bx x')
        (match y
          (bvn (fail formula))
          ((bvc by y') (match bx
                             (b0 (match by (b0 (bv_constants_are_disequal x' y')) (b1 (true))))
                             (b1 (match by (b0 (true)) (b1 (bv_constants_are_disequal x' y'))))
          ))
      ))
))

(declare bv_disequal_constants
	 (! n mpz
	 (! x bv
	 (! y bv
	 (! c (^ (bv_constants_are_disequal x y) true)
  	   (th_holds (not (= (BitVec n) (a_bv n x) (a_bv n y)))))))))

; a bv variable
(declare var_bv type)
; a bv variable term
(declare a_var_bv
	 (! n mpz
	 (! v var_bv
	    (term (BitVec n)))))

; bit vector binary operators
(define bvop2
	(! n mpz
	(! x (term (BitVec n))
        (! y (term (BitVec n))
             	   (term (BitVec n))))))

(declare bvand bvop2)
(declare bvor bvop2)
(declare bvor bvop2)
(declare bvxor bvop2)
(declare bvnand bvop2)
(declare bvnor bvop2)
(declare bvxnor bvop2)
(declare bvmul bvop2)
(declare bvadd bvop2)
(declare bvsub bvop2)
(declare bvudiv bvop2)
(declare bvurem bvop2)
(declare bvsdiv bvop2)
(declare bvsrem bvop2)
(declare bvsmod bvop2)
(declare bvshl bvop2)
(declare bvlshr bvop2)
(declare bvashr bvop2)
(declare concat bvop2)

; bit vector unary operators
(define bvop1
	(! n mpz
	(! x (term (BitVec n))
             	   (term (BitVec n)))))


(declare bvneg bvop1)
(declare bvnot bvop1)
(declare rotate_left  bvop1)
(declare rotate_right bvop1)

(declare bvcomp
	 (! n mpz
 	 (! t1 (term (BitVec n))
	 (! t2 (term (BitVec n))
	    (term (BitVec 1))))))


(declare concat
	 (! n mpz
	 (! m mpz
	 (! m' mpz
	 (! t1 (term (BitVec m))
	 (! t2 (term (BitVec m'))
	    (term (BitVec n))))))))

;; side-condition fails in signature only??
;;	 (! s (^ (mp_add m m') n)

;; (declare repeat bvopp)

(declare extract
	 (! n mpz
	 (! i mpz
	 (! j mpz
	 (! m mpz
	 (! t2 (term (BitVec m))
	    (term (BitVec n))))))))

(declare zero_extend
	 (! n mpz
	 (! i mpz
	 (! m mpz
	 (! t2 (term (BitVec m))
	    (term (BitVec n)))))))

(declare sign_extend
	 (! n mpz
	 (! i mpz
	 (! m mpz
	 (! t2 (term (BitVec m))
	    (term (BitVec n)))))))

(declare repeat
	 (! n mpz
	 (! i mpz
	 (! m mpz
	 (! t2 (term (BitVec m))
	    (term (BitVec n)))))))



;; TODO: add checks for valid typing for these operators
;; (! c1 (^ (mpz_lte i j)
;; (! c2 (^ (mpz_lt i n) true)
;; (! c3 (^ (mp_ifneg i false true) true)
;; (! c4 (^ (mp_ifneg j false true) true)
;; (! s (^ (mp_add (mpz_sub i j) 1) m)


; bit vector predicates
(define bvpred
	(! n mpz
	(! x (term (BitVec n))
	(! y (term (BitVec n))
	           formula))))

(declare bvult bvpred)
(declare bvule bvpred)
(declare bvugt bvpred)
(declare bvuge bvpred)
(declare bvslt bvpred)
(declare bvsle bvpred)
(declare bvsgt bvpred)
(declare bvsge bvpred)
; bit blasted terms as list of formulas
(declare bblt type)
(declare bbltn bblt)
(declare bbltc (! f formula (! v bblt bblt)))

; calculate the length of a bit-blasted term
(program bblt_len ((v bblt)) mpz
  (match v
    (bbltn 0)
    ((bbltc b v') (mp_add (bblt_len v') 1))))


; (bblast_term x y) means term y corresponds to bit level interpretation x
(declare bblast_term
	 (! n mpz
	 (! x (term (BitVec n))
	 (! y bblt
	    type))))

; FIXME: for unsupported bit-blast terms
(declare trust_bblast_term
	 (! n mpz
	 (! x (term (BitVec n))
	 (! y bblt
	    (bblast_term n x y)))))


; Binds a symbol to the bblast_term to be used later on.
(declare decl_bblast
	 (! n mpz
	 (! b bblt
	 (! t (term (BitVec n))
	 (! bb (bblast_term n t b)
	 (! s (^ (bblt_len b) n)
	 (! u (! v (bblast_term n t b) (holds cln))
		   (holds cln))))))))

(declare decl_bblast_with_alias
	 (! n mpz
	 (! b bblt
	 (! t (term (BitVec n))
	 (! a (term (BitVec n))
	 (! bb (bblast_term n t b)
	 (! e (th_holds (= (BitVec n) t a))
	 (! s (^ (bblt_len b) n)
	 (! u (! v (bblast_term n a b) (holds cln))
		   (holds cln))))))))))

; a predicate to represent the n^th bit of a bitvector term
(declare bitof
	 (! x var_bv
	 (! n mpz formula)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;           BITBLASTING RULES
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST CONSTANT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program bblast_const ((v bv) (n mpz)) bblt
  (mp_ifneg n (match v (bvn bbltn)
                       (default (fail bblt)))
              (match v ((bvc b v') (bbltc (match b (b0 false) (b1 true)) (bblast_const v' (mp_add n (~ 1)))))
                       (default (fail bblt)))))

(declare bv_bbl_const (! n mpz
                      (! f bblt
                      (! v bv
                      (! c (^ (bblast_const v (mp_add n (~ 1))) f)
                           (bblast_term n (a_bv n v) f))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST VARIABLE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program bblast_var ((x var_bv) (n mpz)) bblt
  (mp_ifneg n bbltn
              (bbltc (bitof x n) (bblast_var x (mp_add n (~ 1))))))

(declare bv_bbl_var (! n mpz
                    (! x var_bv
                    (! f bblt
                    (! c (^ (bblast_var x (mp_add n (~ 1))) f)
                         (bblast_term n (a_var_bv n x) f))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST CONCAT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program bblast_concat ((x bblt) (y bblt)) bblt
  (match x
    (bbltn (match y ((bbltc by y') (bbltc by (bblast_concat x y')))
    	   	    (bbltn bbltn)))
    ((bbltc bx x') (bbltc bx (bblast_concat x' y)))))

(declare bv_bbl_concat (! n mpz
	 	       (! m mpz
		       (! m1 mpz
                       (! x (term (BitVec m))
		       (! y (term (BitVec m1))
		       (! xb bblt
		       (! yb bblt
		       (! rb bblt
		       (! xbb (bblast_term m x xb)
		       (! ybb (bblast_term m1 y yb)
                       (! c (^ (bblast_concat xb yb ) rb)
                           (bblast_term n (concat n m m1 x y) rb)))))))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST EXTRACT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program bblast_extract_rec ((x bblt) (i mpz) (j mpz) (n mpz)) bblt
  (match x
    ((bbltc bx x') (mp_ifneg (mpz_sub (mpz_sub j n) 1)
    	       	   	     (mp_ifneg (mpz_sub (mpz_sub n i) 1)
			    	  	  (bbltc bx (bblast_extract_rec x' i j (mpz_sub n 1)))
					  (bblast_extract_rec x' i j (mpz_sub n 1)))

			     bbltn))
   (bbltn bbltn)))

(program bblast_extract ((x bblt) (i mpz) (j mpz) (n mpz)) bblt
 (bblast_extract_rec x i j (mpz_sub n 1)))

(declare bv_bbl_extract (! n mpz
			(! i mpz
			(! j mpz
			(! m mpz
                       	(! x (term (BitVec m))
		       	(! xb bblt
		       	(! rb bblt
		       	(! xbb (bblast_term m x xb)
			(! c ( ^ (bblast_extract xb i j m) rb)
                           (bblast_term n (extract n i j m x) rb)))))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST ZERO/SIGN EXTEND
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program extend_rec ((x bblt) (i mpz) (b formula)) bblt
  (mp_ifneg i x
  	    (bbltc b (extend_rec x (mpz_sub i 1) b))))

(program bblast_zextend ((x bblt) (i mpz)) bblt
 (extend_rec x (mpz_sub i 1) false))

(declare bv_bbl_zero_extend (! n mpz
			(! k mpz
			(! m mpz
                       	(! x (term (BitVec m))
		       	(! xb bblt
		       	(! rb bblt
		       	(! xbb (bblast_term m x xb)
			(! c ( ^ (bblast_zextend xb k) rb)
                           (bblast_term n (zero_extend n k m x) rb))))))))))

(program bblast_sextend ((x bblt) (i mpz)) bblt
 (match x (bbltn (fail bblt))
 	  ((bbltc xb x') (extend_rec x (mpz_sub i 1) xb))))

(declare bv_bbl_sign_extend (! n mpz
			(! k mpz
			(! m mpz
                       	(! x (term (BitVec m))
		       	(! xb bblt
		       	(! rb bblt
		       	(! xbb (bblast_term m x xb)
			(! c ( ^ (bblast_sextend xb k) rb)
                           (bblast_term n (sign_extend n k m x) rb))))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST BVAND
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program bblast_bvand ((x bblt) (y bblt)) bblt
  (match x
    (bbltn (match y (bbltn bbltn) (default (fail bblt))))
    ((bbltc bx x') (match y
                      (bbltn (fail bblt))
                      ((bbltc by y') (bbltc (and bx by) (bblast_bvand x' y')))))))

(declare bv_bbl_bvand (! n mpz
                      (! x (term (BitVec n))
		      (! y (term (BitVec n))
		      (! xb bblt
		      (! yb bblt
		      (! rb bblt
		      (! xbb (bblast_term n x xb)
		      (! ybb (bblast_term n y yb)
                      (! c (^ (bblast_bvand xb yb ) rb)
                           (bblast_term n (bvand n x y) rb)))))))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST BVNOT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program bblast_bvnot ((x bblt)) bblt
  (match x
    (bbltn bbltn)
    ((bbltc bx x') (bbltc (not bx) (bblast_bvnot x')))))

(declare bv_bbl_bvnot (! n mpz
                      (! x (term (BitVec n))
		      (! xb bblt
		      (! rb bblt
		      (! xbb (bblast_term n x xb)
                      (! c (^ (bblast_bvnot xb ) rb)
                           (bblast_term n (bvnot n x) rb))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST BVOR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program bblast_bvor ((x bblt) (y bblt)) bblt
  (match x
    (bbltn (match y (bbltn bbltn) (default (fail bblt))))
    ((bbltc bx x') (match y
                      (bbltn (fail bblt))
                      ((bbltc by y') (bbltc (or bx by) (bblast_bvor x' y')))))))

(declare bv_bbl_bvor (! n mpz
                      (! x (term (BitVec n))
		      (! y (term (BitVec n))
		      (! xb bblt
		      (! yb bblt
		      (! rb bblt
		      (! xbb (bblast_term n x xb)
		      (! ybb (bblast_term n y yb)
                      (! c (^ (bblast_bvor xb yb ) rb)
                           (bblast_term n (bvor n x y) rb)))))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST BVXOR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program bblast_bvxor ((x bblt) (y bblt)) bblt
  (match x
    (bbltn (match y (bbltn bbltn) (default (fail bblt))))
    ((bbltc bx x') (match y
                      (bbltn (fail bblt))
                      ((bbltc by y') (bbltc (xor bx by) (bblast_bvxor x' y')))))))

(declare bv_bbl_bvxor (! n mpz
                      (! x (term (BitVec n))
		      (! y (term (BitVec n))
		      (! xb bblt
		      (! yb bblt
		      (! rb bblt
		      (! xbb (bblast_term n x xb)
		      (! ybb (bblast_term n y yb)
                      (! c (^ (bblast_bvxor xb yb ) rb)
                           (bblast_term n (bvxor n x y) rb)))))))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST BVADD
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; return the carry bit after adding x y
;; FIXME: not the most efficient thing in the world
(program bblast_bvadd_carry ((a bblt) (b bblt) (carry formula)) formula
(match a
  ( bbltn (match b (bbltn carry) (default (fail formula))))
  ((bbltc ai a') (match b
  	     	   (bbltn (fail formula))
	 	   ((bbltc bi b') (or (and ai bi) (and (xor ai bi) (bblast_bvadd_carry a' b' carry))))))))

;; ripple carry adder where carry is the initial carry bit
(program bblast_bvadd ((a bblt) (b bblt) (carry formula)) bblt
(match a
  ( bbltn (match b (bbltn bbltn) (default (fail bblt))))
  ((bbltc ai a') (match b
  	     	   (bbltn (fail bblt))
	 	   ((bbltc bi b') (bbltc (xor (xor ai bi) (bblast_bvadd_carry a' b' carry))
				  	 (bblast_bvadd a' b' carry)))))))


(program reverse_help ((x bblt) (acc bblt)) bblt
(match x
       (bbltn acc)
       ((bbltc xi x') (reverse_help x' (bbltc xi acc)))))


(program reverseb ((x bblt)) bblt
	 (reverse_help x bbltn))


; AJR: use this version?
;(program bblast_bvadd_2h ((a bblt) (b bblt) (carry formula)) bblt
;(match a
;  ( bbltn (match b (bbltn bbltn) (default (fail bblt))))
;  ((bbltc ai a') (match b
;       (bbltn (fail bblt))
;	 	   ((bbltc bi b')
;	 	     (let carry' (or (and ai bi) (and (xor ai bi) carry))
;	 	     (bbltc (xor (xor ai bi) carry)
;				  	    (bblast_bvadd_2h a' b' carry'))))))))

;(program bblast_bvadd_2 ((a bblt) (b bblt) (carry formula)) bblt
;(let ar (reverseb a) ;; reverse a and b so that we can build the circuit
;(let br (reverseb b) ;; from the least significant bit up
;(let ret (bblast_bvadd_2h ar br carry)
;  (reverseb ret)))))

(declare bv_bbl_bvadd (! n mpz
                      (! x (term (BitVec n))
		      (! y (term (BitVec n))
		      (! xb bblt
		      (! yb bblt
		      (! rb bblt
		      (! xbb (bblast_term n x xb)
		      (! ybb (bblast_term n y yb)
                      (! c (^ (bblast_bvadd xb yb false) rb)
                           (bblast_term n (bvadd n x y) rb)))))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST BVNEG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program bblast_zero ((n mpz)) bblt
(mp_ifzero n bbltn
	     (bbltc false (bblast_zero (mp_add n (~1))))))

(program bblast_bvneg ((x bblt) (n mpz)) bblt
  (bblast_bvadd (bblast_bvnot x) (bblast_zero n) true))


(declare bv_bbl_bvneg (! n mpz
                      (! x (term (BitVec n))
		      (! xb bblt
		      (! rb bblt
		      (! xbb (bblast_term n x xb)
                      (! c (^ (bblast_bvneg xb n) rb)
                           (bblast_term n (bvneg n x) rb))))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST BVMUL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; shift add multiplier

;; (program concat ((a bblt) (b bblt)) bblt
;;   (match a (bbltn b)
;;   	   ((bbltc ai a') (bbltc ai (concat a' b)))))


(program top_k_bits ((a bblt) (k mpz)) bblt
  (mp_ifzero k bbltn
  	     (match a (bbltn (fail bblt))
	     	      ((bbltc ai a') (bbltc ai (top_k_bits a' (mpz_sub k 1)))))))

(program bottom_k_bits ((a bblt) (k mpz)) bblt
 (reverseb (top_k_bits (reverseb a) k)))

;; assumes the least signigicant bit is at the beginning of the list
(program k_bit ((a bblt) (k mpz)) formula
(mp_ifneg k (fail formula)
(match a (bbltn (fail formula))
         ((bbltc ai a') (mp_ifzero k ai (k_bit a' (mpz_sub k 1)))))))

(program and_with_bit ((a bblt) (bt formula)) bblt
(match a (bbltn bbltn)
         ((bbltc ai a') (bbltc (and bt ai) (and_with_bit a' bt)))))

;; a is going to be the current result
;; carry is going to be false initially
;; b is the and of a and b[k]
;; res is going to be bbltn initially
(program mult_step_k_h ((a bblt) (b bblt) (res bblt) (carry formula) (k mpz)) bblt
(match a
  (bbltn (match b (bbltn res) (default (fail bblt))))
  ((bbltc ai a')
    (match b (bbltn (fail bblt))
             ((bbltc bi b')
	     (mp_ifneg (mpz_sub k 1)
	     	         (let carry_out (or (and ai bi) (and (xor ai bi) carry))
			 (let curr (xor (xor ai bi) carry)
			    (mult_step_k_h a' b' (bbltc curr res) carry_out (mpz_sub k 1))))
			 (mult_step_k_h a' b (bbltc ai res) carry (mpz_sub k 1))
))))))

;; assumes that a, b and res have already been reversed
(program mult_step ((a bblt) (b bblt) (res bblt) (n mpz) (k mpz)) bblt
(let k' (mpz_sub n k )
(let ak (top_k_bits a k')
(let b' (and_with_bit ak (k_bit b k))
 (mp_ifzero (mpz_sub k' 1)
   (mult_step_k_h res b' bbltn false k)
   (let res' (mult_step_k_h res b' bbltn false k)
   (mult_step a b (reverseb res') n (mp_add k 1))))))))


(program bblast_bvmul ((a bblt) (b bblt) (n mpz)) bblt
(let ar (reverseb a) ;; reverse a and b so that we can build the circuit
(let br (reverseb b) ;; from the least significant bit up
(let res (and_with_bit ar (k_bit br 0))
     (mp_ifzero (mpz_sub n 1)     ;; if multiplying 1 bit numbers no need to call mult_step
     		res
		(mult_step ar br res n 1))))))

(declare bv_bbl_bvmul (! n mpz
                      (! x (term (BitVec n))
		      (! y (term (BitVec n))
		      (! xb bblt
		      (! yb bblt
		      (! rb bblt
		      (! xbb (bblast_term n x xb)
		      (! ybb (bblast_term n y yb)
                      (! c (^ (bblast_bvmul xb yb n) rb)
                           (bblast_term n (bvmul n x y) rb)))))))))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST EQUALS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; bit blast  x = y
; for x,y of size n, it will return a conjunction (x.0 = y.0 ^ ( ... ^ (x.{n-1} = y.{n-1})))
; f is the accumulator formula that builds the equality in the right order
(program bblast_eq_rec ((x bblt) (y bblt) (f formula)) formula
  (match x
    (bbltn (match y (bbltn f) (default (fail formula))))
    ((bbltc fx x') (match y
                      (bbltn (fail formula))
                      ((bbltc fy y') (bblast_eq_rec x' y' (and (iff fx fy) f)))))
    (default (fail formula))))

(program bblast_eq ((x bblt) (y bblt)) formula
	 (match x
	 	((bbltc bx x') (match y ((bbltc by y') (bblast_eq_rec x' y' (iff bx by)))
			       	      	(default (fail formula))))
		(default (fail formula))))


;; TODO: a temporary bypass for rewrites that we don't support yet. As soon
;; as we do, remove this rule.

(declare bv_bbl_=_false
	 (! n mpz
	 (! x (term (BitVec n))
         (! y (term (BitVec n))
         (! bx bblt
         (! by bblt
         (! f formula
         (! bbx (bblast_term n x bx)
         (! bby (bblast_term n y by)
         (! c (^ (bblast_eq bx by) f)
            (th_holds (iff (= (BitVec n) x y) false))))))))))))

(declare bv_bbl_=
	 (! n mpz
	 (! x (term (BitVec n))
         (! y (term (BitVec n))
         (! bx bblt
         (! by bblt
         (! f formula
         (! bbx (bblast_term n x bx)
         (! bby (bblast_term n y by)
         (! c (^ (bblast_eq bx by) f)
            (th_holds (iff (= (BitVec n) x y) f))))))))))))

(declare bv_bbl_=_swap
	 (! n mpz
	 (! x (term (BitVec n))
         (! y (term (BitVec n))
         (! bx bblt
         (! by bblt
         (! f formula
         (! bbx (bblast_term n x bx)
         (! bby (bblast_term n y by)
         (! c (^ (bblast_eq by bx) f)
            (th_holds (iff (= (BitVec n) x y) f))))))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST BVULT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program bblast_bvult ((x bblt) (y bblt) (n mpz)) formula
(match x
  ( bbltn (fail formula))
  ((bbltc xi x') (match y
  	     	   (bbltn (fail formula))
	 	   ((bbltc yi y') (mp_ifzero n
		                    (and (not xi) yi)
				    (or (and (iff xi yi) (bblast_bvult x' y' (mp_add n (~1)))) (and (not xi) yi))))))))

(declare bv_bbl_bvult
	 (! n mpz
	 (! x (term (BitVec n))
         (! y (term (BitVec n))
         (! bx bblt
         (! by bblt
         (! f formula
         (! bbx (bblast_term n x bx)
         (! bby (bblast_term n y by)
         (! c (^ (bblast_bvult bx by (mp_add n (~1))) f)
            (th_holds (iff (bvult n x y) f))))))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST BVSLT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program bblast_bvslt ((x bblt) (y bblt) (n mpz)) formula
(match x
  ( bbltn (fail formula))
  ((bbltc xi x') (match y
  	     	   (bbltn (fail formula))
	 	   ((bbltc yi y') (mp_ifzero (mpz_sub n 1)
		   	      	  	     (and xi (not yi))
		   	      		     (or (and (iff xi yi)
					     	      (bblast_bvult x' y' (mpz_sub n 2)))
					     	 (and xi (not yi)))))))))

(declare bv_bbl_bvslt
	 (! n mpz
	 (! x (term (BitVec n))
         (! y (term (BitVec n))
         (! bx bblt
         (! by bblt
         (! f formula
         (! bbx (bblast_term n x bx)
         (! bby (bblast_term n y by)
         (! c (^ (bblast_bvslt bx by n) f)
            (th_holds (iff (bvslt n x y) f))))))))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITBLAST BVCOMP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(program bblast_bvcomp ((x bblt) (y bblt) (n mpz)) bblt
  (match x ((bbltc bx x') (match y ((bbltc by y')
  	   	                      (bbltc (bblast_eq_rec x' y' (iff bx by)) bbltn))
                                   (default (fail bblt))))
           (default (fail bblt))
	   ))

(declare bv_bbl_bvcomp (! n mpz
                       (! x (term (BitVec n))
		       (! y (term (BitVec n))
		       (! xb bblt
		       (! yb bblt
		       (! rb bblt
		       (! xbb (bblast_term n x xb)
		       (! ybb (bblast_term n y yb)
                       (! c (^ (bblast_bvcomp xb yb n) rb)
                              (bblast_term 1 (bvcomp n x y) rb)))))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;           BITBLASTING CONNECTORS
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; bit-blasting connections

(declare intro_assump_t
	 (! f formula
	 (! v var
	 (! C clause
	 (! h (th_holds f)
	 (! a (atom v f)
	 (! u (! unit (holds (clc (pos v) cln))
	      	 (holds C))
	 (holds C))))))))

(declare intro_assump_f
	 (! f formula
	 (! v var
	 (! C clause
	 (! h (th_holds (not f))
	 (! a (atom v f)
	 (! u (! unit (holds (clc (neg v) cln))
	      	 (holds C))
	 (holds C))))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;           REWRITE RULES
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; rewrite rule :
; x + y = y + x
(declare bvadd_symm
	 (! n mpz
	 (! x (term (BitVec n))
	 (! y (term (BitVec n))
	    (th_holds (= (BitVec n) (bvadd n x y) (bvadd n y x)))))))

;; (declare bvcrazy_rewrite
;; 	 (! n mpz
;; 	 (! x (term (BitVec n))
;; 	 (! y (term (BitVec n))
;; 	 (! xn bv_poly
;; 	 (! yn bv_poly
;; 	 (! hxn (bv_normalizes x xn)
;; 	 (! hyn (bv_normalizes y yn)
;; 	 (! s (^ (rewrite_scc xn yn) true)
;; 	 (! u (! x (term (BitVec n)) (holds cln))
;; 	     (holds cln)))))))))))

;; 	    (th_holds (= (BitVec n) (bvadd x y) (bvadd y x)))))))



; necessary?
;; (program calc_bvand ((a bv) (b bv)) bv
;;   (match a
;;     (bvn (match b (bvn bvn) (default (fail bv))))
;;     ((bvc ba a') (match b
;;                       ((bvc bb b') (bvc (match ba (b0 b0) (b1 bb)) (calc_bvand a' b')))
;;                       (default (fail bv))))))

;; ; rewrite rule (w constants) :
;; ; a & b = c
;; (declare bvand_const (! c bv
;; 		     (! a bv
;;                      (! b bv
;;                      (! u (^ (calc_bvand a b) c)
;;                         (th_holds (= BitVec (bvand (a_bv a) (a_bv b)) (a_bv c))))))))


;; making constant bit-vectors
(program mk_ones ((n mpz)) bv
	(mp_ifzero n bvn (bvc b1 (mk_ones (mpz_sub n 1)))))

(program mk_zero ((n mpz)) bv
	(mp_ifzero n bvn (bvc b0 (mk_ones (mpz_sub n 1)))))



;; (bvxnor a b) => (bvnot (bvxor a b))
;; (declare bvxnor_elim
;; 	 (! n mpz
;; 	 (! a (term (BitVec n))
;; 	 (! b (term (BitVec n))
;; 	 (! a' (term (BitVec n))
;; 	 (! b' (term (BitVec n))
;; 	 (! rwa (rw_term _ a a')
;; 	 (! rwb (rw_term _ b b')
;; 	 (rw_term n (bvxnor _ a b)
;; 	 	  (bvnot _ (bvxor _ a' b')))))))))))



;; ;; (bvxor a 0) => a
;; (declare bvxor_zero
;; 	 (! n mpz
;; 	 (! zero_bits bv
;; 	 (! sc (^ (mk_zero n)  zero_bits)
;; 	 (! a (term (BitVec n))
;; 	 (! b (term (BitVec n))
;; 	 (! a' (term (BitVec n))
;; 	 (! rwa (rw_term _  a a')
;; 	 (! rwb (rw_term _ b (a_bv _ zero_bits))
;; 	 (rw_term _  (bvxor _ a b)
;; 	 	  a'))))))))))

;; ;; (bvxor a 11) => (bvnot a)
;; (declare bvxor_one
;; 	 (! n mpz
;; 	 (! one_bits bv
;; 	 (! sc (^ (mk_ones n)  one_bits)
;; 	 (! a (term (BitVec n))
;; 	 (! b (term (BitVec n))
;; 	 (! a' (term (BitVec n))
;; 	 (! rwa (rw_term _  a a')
;; 	 (! rwb (rw_term _  b (a_bv _ one_bits))
;; 	 (rw_term _ (bvxor _ a b)
;; 	 	  (bvnot _ a')))))))))))


;; ;; (bvnot (bvnot a)) => a
;; (declare bvnot_idemp
;; 	 (! n mpz
;; 	 (! a (term (BitVec n))
;; 	 (! a' (term (BitVec n))
;; 	 (! rwa (rw_term _  a a')
;; 	 (rw_term _ (bvnot _ (bvnot _ a))
;; 	 	  a'))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Theory of Arrays
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; depends on : th_base.plf

; sorts

(declare Array (! s1 sort (! s2 sort sort)))	; s1 is index, s2 is element

; functions
(declare write (! s1 sort
               (! s2 sort
                 (term (arrow (Array s1 s2)
                       (arrow s1
                       (arrow s2 (Array s1 s2))))))))

(declare read (! s1 sort
              (! s2 sort
              	(term (arrow (Array s1 s2)
               	      (arrow s1 s2))))))

; inference rules

; read( a[i] = b, i ) == b
(declare row1 (! s1 sort
              (! s2 sort
              (! t1 (term (Array s1 s2))
              (! t2 (term s1)
              (! t3 (term s2)
              	(th_holds (= _
		(apply _ _ (apply _ _ (read s1 s2) (apply _ _ (apply _ _ (apply _ _ (write s1 s2) t1) t2) t3)) t2) t3))))))))

; read( a[i] = b, j ) == read( a, j ) if i != j
(declare row (! s1 sort
             (! s2 sort
             (! t2 (term s1)
             (! t3 (term s1)
             (! t1 (term (Array s1 s2))
             (! t4 (term s2)
             (! u (th_holds (not (= _ t2 t3)))
               (th_holds (= _ (apply _ _ (apply _ _ (read s1 s2) (apply _ _ (apply _ _ (apply _ _ (write s1 s2) t1) t2) t4)) t3)
               		      (apply _ _ (apply _ _ (read s1 s2) t1) t3)))))))))))

; i == j if read( a, j ) != read( a[i] = b, j )
(declare negativerow (! s1 sort
                     (! s2 sort
                     (! t2 (term s1)
                     (! t3 (term s1)
                     (! t1 (term (Array s1 s2))
                     (! t4 (term s2)
		     (! u (th_holds (not (= _
                        (apply _ _ (apply _ _ (read s1 s2) (apply _ _ (apply _ _ (apply _ _ (write s1 s2) t1) t2) t4)) t3)
                        (apply _ _ (apply _ _ (read s1 s2) t1) t3))))
                     (th_holds (= _ t2 t3))))))))))

(declare ext (! s1 sort
             (! s2 sort
             (! t1 (term (Array s1 s2))
             (! t2 (term (Array s1 s2))
             (! u1 (! k (term s1)
                   (! u2 (th_holds (or (= _ t1 t2) (not (= _ (apply _ _ (apply _ _ (read s1 s2) t1) k) (apply _ _ (apply _ _ (read s1 s2) t2) k)))))
                     (holds cln)))
               (holds cln)))))))
(declare Int sort)

(define arithpred_Int (! x (term Int)
                      (! y (term Int)
                        formula)))

(declare >_Int arithpred_Int)
(declare >=_Int arithpred_Int)
(declare <_Int  arithpred_Int)
(declare <=_Int arithpred_Int)

(define arithterm_Int (! x (term Int)
		      (! y (term Int)
		        (term Int))))

(declare +_Int arithterm_Int)
(declare -_Int arithterm_Int)
(declare *_Int arithterm_Int)  ; is * ok to use?
(declare /_Int arithterm_Int)  ; is / ok to use?

; a constant term
(declare a_int (! x mpz (term Int)))

; unary negation
(declare u-_Int (! t (term Int) (term Int)))
(declare forall (! s sort
                (! t (term s)
                (! f formula
                  formula))))

;This program recursively checks the instantiation.
;Composite terms (such as "apply _ _ ...") are handled recursively.
;Then, if ti and t are equal, we return true. Otherwise, we first verify that t is the variable for which ti is substitued (ifmarked). if this is the case, ti should be equal to k.

;(program is_inst_t ((ti term) (t term) (k term)) bool
; (match t
;   ((apply s1 s2 t1 t2)
;     (match ti
;       ((apply si1 si2 ti1 ti2) 
;           (match (is_inst_t ti1 t1 k) (tt (is_inst_t ti2 t2 k)) (ff ff)))
;       (default ff)))
;   (default (ifequal ti t tt (ifmarked t (ifequal ti k tt ff) ff)))))
;
;
;(program is_inst_f ((fi formula) (f formula) (k term)) bool
;  (match f
;    ((and f1 f2) (match fi
;    		   ((and fi1 fi2) (match (is_inst_f fi1 f1 k) (tt (is_inst_f fi2 f2 k)) (ff ff)))
;    		   (default ff)))
;    ((or f1 f2) (match fi
;    		   ((or fi1 fi2) (match (is_inst_f fi1 f1 k) (tt (is_inst_f fi2 f2 k)) (ff ff)))
;    		   (default ff)))
;    ((impl f1 f2) (match fi
;    		   ((impl fi1 fi2) (match (is_inst_f fi1 f1 k) (tt (is_inst_f fi2 f2 k)) (ff ff)))
;    		   (default ff)))
;    ((not f1) (match fi
;    		   ((not fi1) (is_inst_f fi1 f1 k))
;    		   (default ff)))
;    ((iff f1 f2) (match fi
;    		   ((iff fi1 fi2) (match (is_inst_f fi1 f1 k) (tt (is_inst_f fi2 f2 k)) (ff ff)))
;    		   (default ff)))
;    ((xor f1 f2) (match fi
;    		   ((xor fi1 fi2) (match (is_inst_f fi1 f1 k) (tt (is_inst_f fi2 f2 k)) (ff ff)))
;    		   (default ff)))
;    ((ifte f1 f2 f3) (match fi
;    		       ((ifte fi1 fi2 fi3) (match (is_inst_f fi1 f1 k)
;    		       			     (tt (match (is_inst_f fi2 f2 k) (tt (is_inst_f fi3 f3 k)) (ff ff)))
;    		       			     (ff ff)))
;    		       (default ff)))
;    ((= s t1 t2) (match fi
;    		   ((= s ti1 ti2) (match (is_inst_t ti1 t1 k) (tt (is_inst_t ti2 t2 k)) (ff ff)))
;    		   (default ff)))
;    ((forall s t1 f1) (match fi
;    		      ((forall s ti1 fi1) (is_inst_f fi1 f1 k))
;    		      (default ff)))
;    (default ff)))
;
;(program is_inst ((fi formula) (f formula) (t term) (k term)) bool
;  (do (markvar t)
;     (let f1 (is_inst_f fi f k)
;        (do (markvar t) f1))))
;
;(declare skolem
;  (! s sort
;  (! t (term s)
;  (! f formula
;  (! p (th_holds (not (forall s t f)))
;  (! u (! k (term s)
;       (! fi formula
;       (! p1 (th_holds (not fi))
;       (! r (^ (is_inst fi f t k) tt)
;         (holds cln)))))
;    (holds cln)))))))

;(declare inst
;  (! s sort
;  (! t (term s)
;  (! f formula
;  (! k (term s)
;  (! fi formula
;  (! p (th_holds (forall s t f))
;  (! r (^ (is_inst fi f t k) tt)
;  (! u (! p1 (th_holds fi)
;            (holds cln))
;    (holds cln))))))))))
; Depends On: th_smt.plf
(declare Real sort)

(define arithpred_Real (! x (term Real)
                       (! y (term Real)
                         formula)))
(declare >_Real arithpred_Real)
(declare >=_Real arithpred_Real)
(declare <_Real  arithpred_Real)
(declare <=_Real arithpred_Real)

(define arithterm_Real (! x (term Real)
                       (! y (term Real)
                         (term Real))))

(declare +_Real arithterm_Real)
(declare -_Real arithterm_Real)
(declare *_Real arithterm_Real)  ; is * ok to use?
(declare /_Real arithterm_Real)  ; is / ok to use?

; a constant term
(declare a_real (! x mpq (term Real)))

(declare >=0_Real (! x (term Real) formula))
(declare =0_Real (! x (term Real) formula))
(declare >0_Real (! x (term Real) formula))
(declare distinct0_Real (! x (term Real) formula))

; unary negation
(declare u-_Real (! t (term Real) (term Real)))

; Is this rational positive?
(program mpq_ispos ((x mpq)) bool
  (mp_ifneg x ff (mp_ifzero x ff tt)))
; Depends on th_real.plf, th_int.plf, smt.plf, sat.plf

; Some axiom arguments are marked "; Omit", because they can be deduced from
; other arguments and should be replaced with a "_" when invoking the axiom.

;; ====================================== ;;
;; Arith Terms, Predicates, & Conversions ;;
;; ====================================== ;;

; Types for arithmetic variables
; Specifically a real
(declare real_var type)
; Specifically an integer
(declare int_var type)

; Functions to map them to terms
(declare term_real_var (! v real_var (term Real)))
(declare term_int_var (! v int_var (term Int)))

; A function to cast an integer term to real.
(declare term_int_to_real (! i (term Int) (term Real)))


; The recursive functions `reify_int_term` and `reify_real_term` work
; together to  reify or "make real" an integer term. That is, to convert it to
; a real term.  More precisely, they take an integer term and return a real
; term in which any integer variables are immediately converted to real terms,
; and all non-leaves in the term are real-sorted.
;
; They explicitly do not work on integer division, because such a conversion
; would not be correct when integer division is involved.

; This function recursively converts an integer term to a real term.
(program reify_int_term ((t (term Int))) (term Real)
  (match t
    ((term_int_var v) (term_int_to_real (term_int_var v)))
    ((a_int i) (a_real (mpz_to_mpq i)))
    ((+_Int x y) (+_Real (reify_int_term x) (reify_int_term y)))
    ((-_Int x y) (-_Real (reify_int_term x) (reify_int_term y)))
    ((u-_Int x) (u-_Real (reify_int_term x)))
    ((*_Int x y) (*_Real (reify_int_term x) (reify_int_term y)))
    ; Reifying integer division is an error, since it changes the value!
    ((/_Int x y) (fail (term Real)))
  ))

; This function recursively converts a real term to a real term.
; It will never change the top-level node in the term (since that node is
; real), but it may change subterms...
(program reify_real_term ((t (term Real))) (term Real)
  (match t
    ((term_real_var v) (term_real_var v))
    ((a_real v) (a_real v))
    ; We've found an integer term -- reify it!
    ((term_int_to_real t') (reify_int_term t'))
    ((+_Real x y) (+_Real (reify_real_term x) (reify_real_term y)))
    ((-_Real x y) (-_Real (reify_real_term x) (reify_real_term y)))
    ((u-_Real x) (u-_Real (reify_real_term x)))
    ((*_Real x y) (*_Real (reify_real_term x) (reify_real_term y)))
    ((/_Real x y) (/_Real (reify_real_term x) (reify_real_term y)))
  ))

; Predicates of the form (term Integer) (comparison) (term Real)
(define arithpred_IntReal (! x (term Int)
                          (! y (term Real)
                          formula)))
(declare >_IntReal arithpred_IntReal)
(declare >=_IntReal arithpred_IntReal)
(declare <_IntReal  arithpred_IntReal)
(declare <=_IntReal arithpred_IntReal)

; From an arith predicate, compute the equivalent real predicate
; All arith predicates are (possibly negated) >='s with a real on the right.
; Technically it's a real literal on the right, but we don't assume that here.
(program reify_arith_pred ((p formula)) formula
  (match p
         ((not p') (not (reify_arith_pred p')))
         ((>=_Real x y) (>=_Real (reify_real_term x) (reify_real_term y)))
         ((>=_Int x y) (>=_Real (reify_int_term x) (reify_int_term y)))
         ((>=_IntReal x y) (>=_Real (reify_int_term x) (reify_real_term y)))
         (default (fail formula))
         ))

; From an arith predicate, prove the equivalent real predicate
(declare pf_reified_arith_pred
  (! p formula
  (! p' formula
    (! pf (th_holds p)
      (! reify_sc (^ (reify_arith_pred p) p')
         (th_holds p'))))))

;; ========================== ;;
;; Int Bound Tightening Rules ;;
;; ========================== ;;

; Returns whether `ceil` is the ceiling of `q`.
(program is_ceil ((q mpq) (ceil mpz)) bool
  (let diff (mp_add (mpz_to_mpq ceil) (mp_neg q))
    (mp_ifneg diff
              ff
              (mp_ifneg (mp_add diff (~ 1/1))
                        tt
                        ff))))

; Returns whether `n` is the greatest integer less than `q`.
(program is_greatest_integer_below ((n mpz) (q mpq)) bool
  (is_ceil q (mp_add n 1)))


; Negates terms of the form:
; (a) k     OR
; (b) x     OR
; (c) k * x
; where k is a constant and x is a variable.
; Otherwise fails.
; This aligns closely with the LFSCArithProof::printLinearMonomialNormalizer
; function.
(program negate_linear_monomial_int_term ((t (term Int))) (term Int)
  (match t
    ((term_int_var v) (*_Int (a_int (~ 1)) (term_int_var v)))
    ((a_int k) (a_int (mp_neg k)))
    ((*_Int x y)
     (match x
            ((a_int k)
             (match y
                    ((term_int_var v) (*_Int (a_int (mp_neg k)) y))
                    (default (fail (term Int)))))
            (default (fail (term Int)))))
    (default (fail (term Int)))
  ))

; This function negates linear interger terms---sums of terms of the form
; recognized by `negate_linear_monomial_int_term`.
(program negate_linear_int_term ((t (term Int))) (term Int)
  (match t
    ((term_int_var v) (negate_linear_monomial_int_term t))
    ((a_int i) (negate_linear_monomial_int_term t))
    ((+_Int x y) (+_Int (negate_linear_int_term x) (negate_linear_int_term y)))
    ((*_Int x y) (negate_linear_monomial_int_term t))
    (default (fail (term Int)))
  ))

; Statement that z is the greatest integer less than z'.
(declare holds_neg_of_greatest_integer_below_int
  (! z mpz
  (! z' mpz
    type)))

; For proving statements of the above form.
(declare check_neg_of_greatest_integer_below_int
  (! z mpz
  (! z' mpz
    (! sc_check (^ (is_greatest_integer_below (mp_neg z) (mpz_to_mpq z')) tt)
       (holds_neg_of_greatest_integer_below_int z z')))))

; Axiom for tightening [Int] < i into -[Int] >= -(i - 1).
; Note that [Int] < i is actually not([Int] >= i)
(declare tighten_not_>=_IntInt
  (! t       (term Int)  ; Omit
  (! neg_t   (term Int)  ; Omit
  (! old_bound     mpz ; Omit
  (! neg_int_bound mpz ; Omit
    (! pf_step (holds_neg_of_greatest_integer_below_int neg_int_bound old_bound)
    ; Note that even when the RHS is an integer, we convert it to real and use >_IntReal
    (! pf_real_bound (th_holds (not (>=_IntReal t (term_int_to_real (a_int old_bound)))))
      (! sc_neg (^ (negate_linear_int_term t) neg_t)
        (th_holds (>=_IntReal neg_t (term_int_to_real (a_int neg_int_bound))))))))))))

;; ======================================== ;;
;; Linear Combinations and Affine functions ;;
;; ======================================== ;;

; Unifying type for both kinds of arithmetic variables
(declare arith_var type)
(declare av_from_int (! v int_var arith_var))
(declare av_from_real (! v real_var arith_var))

; Total order type -- return value for the comparison of two things
(declare ord type)
(declare ord_lt ord)
(declare ord_eq ord)
(declare ord_gt ord)

; Compare two arith vars. Integers come before reals, and otherwise we use the
; LFSC ordering
(program arith_var_cmp ((v1 arith_var) (v2 arith_var)) ord
  (match v1
    ((av_from_int  i1)
      (match v2
        ((av_from_int  i2)
          (ifequal i1 i2
            ord_eq
            (compare i1 i2 ord_lt ord_gt)))
        ((av_from_real r2) ord_lt)))
    ((av_from_real r1)
      (match v2
        ((av_from_int  i2) ord_gt)
        ((av_from_real r2)
          (ifequal r1 r2
            ord_eq
            (compare r1 r2 ord_lt ord_gt)))))))

; Type for linear combinations of variables
; NB: Functions below will assume that the list is always sorted by variable!
(declare lc type)
(declare lc_null lc)
(declare lc_cons (! c mpq (! v arith_var (! rest lc lc))))

; Sum of linear combinations.
(program lc_add ((l1 lc) (l2 lc)) lc
  (match l1
    (lc_null l2)
    ((lc_cons c1 v1 l1')
      (match l2
        (lc_null l1)
        ((lc_cons c2 v2 l2')
          (match (arith_var_cmp v1 v2)
            (ord_lt (lc_cons c1 v1 (lc_add l1' l2)))
            (ord_eq
              (let c (mp_add c1 c2)
                (mp_ifzero c
                  (lc_add l1' l2')
                  (lc_cons c v1 (lc_add l1' l2')))))
            (ord_gt (lc_cons c2 v2 (lc_add l1 l2')))))))))

; Scaling a linear combination
(program lc_mul_c ((l lc) (c mpq)) lc
  (match l
    (lc_null l)
    ((lc_cons c' v' l') (lc_cons (mp_mul c c') v' (lc_mul_c l' c)))))

; Negating a linear combination
(program lc_neg ((l lc)) lc
         (lc_mul_c l (~ 1/1)))

; An affine function of variables (a linear combination + a constant)
(declare aff type)
(declare aff_cons (! c mpq (! l lc aff)))

; Sum of affine functions
(program aff_add ((p1 aff) (p2 aff)) aff
  (match p1
    ((aff_cons c1 l1)
      (match p2
        ((aff_cons c2 l2) (aff_cons (mp_add c1 c2) (lc_add l1 l2)))))))

; Scaling an affine function
(program aff_mul_c ((p aff) (c mpq)) aff
  (match p
    ((aff_cons c' l') (aff_cons (mp_mul c' c) (lc_mul_c l' c)))))

; Negating an affine function
(program aff_neg ((p aff)) aff
  (aff_mul_c p (~ 1/1)))

; Subtracting affine functions
(program aff_sub ((p1 aff) (p2 aff)) aff
  (aff_add p1 (aff_neg p2)))

;; ================================= ;;
;; Proving (Real) terms to be affine ;;
;; ================================= ;;

; truth type for some real term being affine
; * `t` the real term
; * `a` the equivalent affine function
(declare is_aff (! t (term Real) (! a aff type)))

; Constants are affine
(declare is_aff_const
  (! x mpq
    (is_aff (a_real x) (aff_cons x lc_null))))

; Real variables are affine
(declare is_aff_var_real
  (! v real_var
    (is_aff (term_real_var v)
            (aff_cons 0/1 (lc_cons 1/1 (av_from_real v) lc_null)))))

; Int variables are affine
(declare is_aff_var_int
  (! v int_var
    (is_aff (term_int_to_real (term_int_var v))
            (aff_cons 0/1 (lc_cons 1/1 (av_from_int v) lc_null)))))

; affine functions are closed under addition
(declare is_aff_+
  (! x (term Real)      ; Omit
  (! aff_x aff          ; Omit
  (! y (term Real)      ; Omit
  (! aff_y aff          ; Omit
  (! aff_z aff          ; Omit
    (! is_affx (is_aff x aff_x)
    (! is_affy (is_aff y aff_y)
      (! a (^ (aff_add aff_x aff_y) aff_z)
        (is_aff (+_Real x y) aff_z))))))))))

; affine functions are closed under subtraction
(declare is_aff_-
  (! x (term Real)      ; Omit
  (! aff_x aff          ; Omit
  (! y (term Real)      ; Omit
  (! aff_y aff          ; Omit
  (! aff_z aff          ; Omit
    (! is_affx (is_aff x aff_x)
    (! is_affy (is_aff y aff_y)
      (! a (^ (aff_sub aff_x aff_y) aff_z)
        (is_aff (-_Real x y) aff_z))))))))))

; affine functions are closed under left-multiplication by scalars
(declare is_aff_mul_c_L
  (! y (term Real)      ; Omit
  (! aff_y aff          ; Omit
  (! aff_z aff          ; Omit
    (! x mpq
    (! is_affy (is_aff y aff_y)
      (! a (^ (aff_mul_c aff_y x) aff_z)
        (is_aff (*_Real (a_real x) y) aff_z))))))))

; affine functions are closed under right-multiplication by scalars
(declare is_aff_mul_c_R
  (! y (term Real)      ; Omit
  (! aff_y aff          ; Omit
  (! aff_z aff          ; Omit
    (! x mpq
    (! is_affy (is_aff y aff_y)
      (! a (^ (aff_mul_c aff_y x) aff_z)
        (is_aff (*_Real y (a_real x)) aff_z))))))))

;; ========================== ;;
;; Bounds on Affine Functions ;;
;; ========================== ;;

; Bounds that an affine function might satisfy
(declare bound type)
(declare bound_pos bound)           ; > 0
(declare bound_non_neg bound)       ; >= 0

; formulas over affine functions
; the statement that `a` satisfies `b` for all inputs
(declare bounded_aff (! a aff (! b bound formula)))

; Sum of two bounds (the bound satisfied by the sum of two functions satifying
; the input bounds)
(program bound_add ((b bound) (b2 bound)) bound
  (match b
    (bound_pos bound_pos)
    (bound_non_neg b2)))

; The implication of `a1` satisfying `b` and `a2` satisfying `b2`, obtained by
; summing the inequalities.
(program bounded_aff_add ((a1 aff) (b bound) (a2 aff) (b2 bound)) formula
  (bounded_aff (aff_add a1 a2) (bound_add b b2)))


; The implication of scaling the inequality of `a1` satisfying `b`.
(program bounded_aff_mul_c ((a1 aff) (b bound) (c mpq)) formula
  (match (mpq_ispos c)
    (tt (bounded_aff (aff_mul_c a1 c) b))
    (ff (fail formula))))

; Does an affine function actuall satisfy a bound, for some input?
(program bound_respected ((b bound) (a aff)) bool
  (match a
    ((aff_cons c combo)
      (match combo
        (lc_null
          (match b
            (bound_pos (mpq_ispos c))
            (bound_non_neg (mp_ifneg c ff tt))))
        (default tt)))))

;; =================================== ;;
;; Axioms for bounded affine functions ;;
;; =================================== ;;

; Always true (used as a initial value when summing many bounds together)
(declare bounded_aff_ax_0_>=_0
  (th_holds (bounded_aff (aff_cons 0/1 lc_null) bound_non_neg)))

; Contradiction axiom: an affine function that does not respect its bounds
(declare bounded_aff_contra
  (! a aff      ; Omit
  (! b bound    ; Omit
    (! pf (th_holds (bounded_aff a b))
      (! sc (^ (bound_respected b a) ff)
         (th_holds false))))))

; Rule for summing two affine bounds to get a third
(declare bounded_aff_add
  (! a1 aff             ; Omit
  (! a2 aff             ; Omit
  (! b bound            ; Omit
  (! b2 bound           ; Omit
  (! ba_sum formula     ; Omit
    (! pf_a1 (th_holds (bounded_aff a1 b))
    (! pf_a2 (th_holds (bounded_aff a2 b2))
       (! sc (^ (bounded_aff_add a1 b a2 b2) ba_sum)
         (th_holds ba_sum))))))))))

; Rule for scaling an affine bound
(declare bounded_aff_mul_c
  (! a aff          ; Omit
  (! b bound        ; Omit
  (! ba formula     ; Omit
    (! c mpq
    (! pf_a (th_holds (bounded_aff a b))
       (! sc (^ (bounded_aff_mul_c a b c) ba)
         (th_holds ba))))))))


; [y >= x] implies that the aff. function y - x is >= 0
(declare aff_>=_from_term
  (! y (term Real)  ; Omit
  (! x (term Real)  ; Omit
  (! p aff          ; Omit
    (! pf_affine (is_aff (-_Real y x) p)
    (! pf_term_bound (th_holds (>=_Real y x))
      (th_holds (bounded_aff p bound_non_neg))))))))

; not [y >= x] implies that the aff. function -(y - x) is > 0
(declare aff_>_from_term
  (! y (term Real)  ; Omit
  (! x (term Real)  ; Omit
  (! p aff          ; Omit
  (! p_n aff        ; Omit
    (! pf_affine (is_aff (-_Real y x) p)
    (! pf_term_bound (th_holds (not (>=_Real y x)))
      (! sc_neg (^ (aff_neg p) p_n)
        (th_holds (bounded_aff p_n bound_pos))))))))))

(check
 ;; Declarations
(% imove var_bv
(% s$154 var_bv
(% move$next_rhs var_bv
(% s$139$next var_bv
(% s$140$next var_bv
(% s$137$next var_bv
(% s$136$next var_bv
(% s$133$next var_bv
(% s$132$next var_bv
(% s$129$next var_bv
(% s$130$next var_bv
(% s$22$next var_bv
(% s$24$next var_bv
(% s$1661$next var_bv
(% s$25$next var_bv
(% s$1663$next var_bv
(% s$19$next var_bv
(% s$18$next var_bv
(% s$1658$next var_bv
(% s$21$next var_bv
(% s$1660$next var_bv
(% s$11$next var_bv
(% s$13$next var_bv
(% s$1656$next var_bv
(% s$1657$next var_bv
(% |b[5]$next| var_bv
(% |b[7]$next| var_bv
(% s$8$next var_bv
(% |b[6]$next| var_bv
(% |b[3]$next| var_bv
(% |b[1]$next| var_bv
(% s$6$next var_bv
(% s$1652$next var_bv
(% |b[0]$next| var_bv
(% s$7$next var_bv
(% s$15$next var_bv
(% winX$next var_bv
(% w$19$next var_bv
(% w$18$next var_bv
(% prop_1$next var_bv
(% s$128$next var_bv
(% s$141$next var_bv
(% prop_4$next var_bv
(% s$142$next var_bv
(% prop_5$next var_bv
(% s$144$next var_bv
(% prop_7$next var_bv
(% s$146$next var_bv
(% s$140 var_bv
(% s$137 var_bv
(% s$138 var_bv
(% s$135 var_bv
(% s$134 var_bv
(% s$131 var_bv
(% s$130 var_bv
(% s$23 var_bv
(% s$1661 var_bv
(% s$25 var_bv
(% s$1662 var_bv
(% s$20 var_bv
(% s$1659 var_bv
(% s$18 var_bv
(% s$17 var_bv
(% s$21 var_bv
(% s$1660 var_bv
(% s$12 var_bv
(% s$11 var_bv
(% s$13 var_bv
(% s$1656 var_bv
(% |b[5]| var_bv
(% s$9 var_bv
(% s$8 var_bv
(% |b[8]| var_bv
(% |b[6]| var_bv
(% |b[2]| var_bv
(% |b[1]| var_bv
(% s$5 var_bv
(% s$1652 var_bv
(% s$10 var_bv
(% s$1654 var_bv
(% winO var_bv
(% winX var_bv
(% w$19 var_bv
(% w$18 var_bv
(% prop_1 var_bv
(% s$128 var_bv
(% s$141 var_bv
(% prop_4 var_bv
(% s$143 var_bv
(% prop_6 var_bv
(% s$144 var_bv
(% prop_7 var_bv
(% s$146 var_bv
(% prop$next var_bv
(% prop0 var_bv
(% termITE_320 var_bv
(% z$929 var_bv
(% termITE_319 var_bv
(% z$150 var_bv
(% termITE_318 var_bv
(% z$928 var_bv
(% termITE_317 var_bv
(% termITE_316 var_bv
(% z$785 var_bv
(% termITE_315 var_bv
(% termITE_314 var_bv
(% z$736 var_bv
(% termITE_313 var_bv
(% termITE_312 var_bv
(% z$647 var_bv
(% termITE_311 var_bv
(% termITE_310 var_bv
(% z$649 var_bv
(% termITE_309 var_bv
(% termITE_308 var_bv
(% z$652 var_bv
(% termITE_307 var_bv
(% termITE_306 var_bv
(% z$924 var_bv
(% termITE_305 var_bv
(% termITE_304 var_bv
(% z$923 var_bv
(% termITE_303 var_bv
(% termITE_302 var_bv
(% z$922 var_bv
(% termITE_301 var_bv
(% termITE_300 var_bv
(% z$642 var_bv
(% termITE_299 var_bv
(% z$921 var_bv
(% termITE_298 var_bv
(% z$629 var_bv
(% termITE_297 var_bv
(% termITE_296 var_bv
(% z$631 var_bv
(% termITE_295 var_bv
(% z$919 var_bv
(% termITE_294 var_bv
(% z$634 var_bv
(% termITE_293 var_bv
(% termITE_292 var_bv
(% termITE_291 var_bv
(% z$620 var_bv
(% termITE_290 var_bv
(% z$917 var_bv
(% termITE_289 var_bv
(% termITE_288 var_bv
(% termITE_287 var_bv
(% z$625 var_bv
(% termITE_286 var_bv
(% z$624 var_bv
(% termITE_285 var_bv
(% z$915 var_bv
(% termITE_284 var_bv
(% termITE_283 var_bv
(% z$914 var_bv
(% termITE_282 var_bv
(% z$613 var_bv
(% termITE_281 var_bv
(% z$913 var_bv
(% termITE_280 var_bv
(% termITE_279 var_bv
(% z$615 var_bv
(% termITE_278 var_bv
(% termITE_277 var_bv
(% z$602 var_bv
(% termITE_276 var_bv
(% termITE_275 var_bv
(% z$604 var_bv
(% termITE_274 var_bv
(% termITE_273 var_bv
(% z$607 var_bv
(% termITE_272 var_bv
(% termITE_271 var_bv
(% z$909 var_bv
(% termITE_270 var_bv
(% termITE_269 var_bv
(% z$908 var_bv
(% termITE_268 var_bv
(% termITE_267 var_bv
(% z$907 var_bv
(% termITE_266 var_bv
(% z$581 var_bv
(% termITE_265 var_bv
(% termITE_264 var_bv
(% z$579 var_bv
(% z$n9s4 var_bv
(% termITE_263 var_bv
(% z$n0s4 var_bv
(% termITE_262 var_bv
(% z$583 var_bv
(% z$927 var_bv
(% termITE_261 var_bv
(% z$904 var_bv
(% z$925 var_bv
(% termITE_260 var_bv
(% z$638 var_bv
(% termITE_259 var_bv
(% z$643 var_bv
(% termITE_258 var_bv
(% z$591 var_bv
(% z$920 var_bv
(% termITE_257 var_bv
(% z$902 var_bv
(% z$633 var_bv
(% termITE_256 var_bv
(% z$622 var_bv
(% termITE_255 var_bv
(% s$134$next var_bv
(% termITE_254 var_bv
(% z$901 var_bv
(% s$131$next var_bv
(% termITE_253 var_bv
(% z$570 var_bv
(% z$912 var_bv
(% termITE_252 var_bv
(% z$910 var_bv
(% termITE_251 var_bv
(% z$900 var_bv
(% z$589 var_bv
(% termITE_250 var_bv
(% z$906 var_bv
(% termITE_249 var_bv
(% z$566 var_bv
(% s$23$next var_bv
(% termITE_248 var_bv
(% z$899 var_bv
(% z$903 var_bv
(% termITE_247 var_bv
(% z$593 var_bv
(% termITE_246 var_bv
(% z$898 var_bv
(% z$569 var_bv
(% termITE_245 var_bv
(% z$574 var_bv
(% z$572 var_bv
(% termITE_244 var_bv
(% z$565 var_bv
(% s$1659$next var_bv
(% termITE_243 var_bv
(% z$559 var_bv
(% z$558 var_bv
(% termITE_242 var_bv
(% z$557 var_bv
(% s$16$next var_bv
(% termITE_239 var_bv
(% z$896 var_bv
(% s$26$next var_bv
(% termITE_238 var_bv
(% z$554 var_bv
(% z$553 var_bv
(% s$1655$next var_bv
(% termITE_235 var_bv
(% termITE_241 var_bv
(% z$895 var_bv
(% s$14$next var_bv
(% termITE_234 var_bv
(% z$561 var_bv
(% |b[4]$next| var_bv
(% termITE_233 var_bv
(% z$894 var_bv
(% termITE_240 var_bv
(% z$563 var_bv
(% s$1653$next var_bv
(% termITE_230 var_bv
(% z$893 var_bv
(% z$576 var_bv
(% z$595 var_bv
(% z$891 var_bv
(% s$1654$next var_bv
(% termITE_224 var_bv
(% z$890 var_bv
(% winO$next var_bv
(% termITE_223 var_bv
(% z$540 var_bv
(% termITE_237 var_bv
(% z$889 var_bv
(% z$536 var_bv
(% prop_3$next var_bv
(% termITE_219 var_bv
(% z$534 var_bv
(% z$887 var_bv
(% termITE_236 var_bv
(% z$538 var_bv
(% s$145$next var_bv
(% termITE_216 var_bv
(% z$886 var_bv
(% prop_8$next var_bv
(% termITE_215 var_bv
(% z$542 var_bv
(% s$139 var_bv
(% termITE_214 var_bv
(% z$546 var_bv
(% z$884 var_bv
(% z$533 var_bv
(% z$883 var_bv
(% z$524 var_bv
(% s$132 var_bv
(% termITE_206 var_bv
(% termITE_232 var_bv
(% z$882 var_bv
(% s$129 var_bv
(% termITE_205 var_bv
(% z$522 var_bv
(% z$881 var_bv
(% s$22 var_bv
(% termITE_202 var_bv
(% termITE_231 var_bv
(% z$527 var_bv
(% s$24 var_bv
(% termITE_201 var_bv
(% z$411 var_bv
(% termITE_97 var_bv
(% z$49 var_bv
(% z$90 var_bv
(% termITE_112 var_bv
(% z$926 var_bv
(% termITE_96 var_bv
(% z$34 var_bv
(% z$651 var_bv
(% termITE_95 var_bv
(% z$813 var_bv
(% z$640 var_bv
(% termITE_94 var_bv
(% s$138$next var_bv
(% termITE_93 var_bv
(% z$811 var_bv
(% s$135$next var_bv
(% termITE_92 var_bv
(% z$n1s2 var_bv
(% z$93 var_bv
(% termITE_111 var_bv
(% z$918 var_bv
(% termITE_91 var_bv
(% z$916 var_bv
(% termITE_90 var_bv
(% z$808 var_bv
(% s$16 var_bv
(% termITE_28 var_bv
(% z$911 var_bv
(% termITE_87 var_bv
(% z$606 var_bv
(% termITE_86 var_bv
(% z$585 var_bv
(% termITE_85 var_bv
(% z$78 var_bv
(% termITE_109 var_bv
(% z$611 var_bv
(% termITE_89 var_bv
(% z$417 var_bv
(% s$26 var_bv
(% termITE_27 var_bv
(% s$1662$next var_bv
(% termITE_82 var_bv
(% z$471 var_bv
(% z$578 var_bv
(% termITE_81 var_bv
(% z$567 var_bv
(% termITE_80 var_bv
(% z$482 var_bv
(% z$830 var_bv
(% termITE_108 var_bv
(% z$616 var_bv
(% termITE_88 var_bv
(% z$805 var_bv
(% termITE_30 var_bv
(% z$82 var_bv
(% z$555 var_bv
(% termITE_77 var_bv
(% z$84 var_bv
(% termITE_107 var_bv
(% termITE_193 var_bv
(% z$828 var_bv
(% z$97 var_bv
(% termITE_106 var_bv
(% z$888 var_bv
(% termITE_72 var_bv
(% termITE_192 var_bv
(% z$116 var_bv
(% s$1657 var_bv
(% termITE_187 var_bv
(% termITE_191 var_bv
(% z$825 var_bv
(% z$60 var_bv
(% termITE_104 var_bv
(% z$905 var_bv
(% termITE_84 var_bv
(% termITE_26 var_bv
(% z$824 var_bv
(% |b[4]| var_bv
(% termITE_22 var_bv
(% |b[8]$next| var_bv
(% termITE_65 var_bv
(% termITE_190 var_bv
(% z$54 var_bv
(% |b[7]| var_bv
(% termITE_185 var_bv
(% z$822 var_bv
(% termITE_103 var_bv
(% s$5$next var_bv
(% termITE_62 var_bv
(% z$587 var_bv
(% termITE_83 var_bv
(% z$800 var_bv
(% termITE_189 var_bv
(% z$821 var_bv
(% s$10$next var_bv
(% termITE_60 var_bv
(% z$62 var_bv
(% termITE_102 var_bv
(% termITE_188 var_bv
(% z$66 var_bv
(% termITE_61 var_bv
(% z$507 var_bv
(% termITE_59 var_bv
(% z$873 var_bv
(% z$53 var_bv
(% termITE_100 var_bv
(% termITE_58 var_bv
(% z$502 var_bv
(% s$143$next var_bv
(% termITE_53 var_bv
(% termITE_57 var_bv
(% z$505 var_bv
(% z$45 var_bv
(% z$88 var_bv
(% prop_6$next var_bv
(% termITE_52 var_bv
(% termITE_56 var_bv
(% z$869 var_bv
(% termITE_186 var_bv
(% z$44 var_bv
(% termITE_55 var_bv
(% z$868 var_bv
(% s$20$next var_bv
(% termITE_79 var_bv
(% termITE_21 var_bv
(% z$817 var_bv
(% z$832 var_bv
(% termITE_54 var_bv
(% z$618 var_bv
(% z$76 var_bv
(% z$41 var_bv
(% z$816 var_bv
(% z$152 var_bv
(% termITE_98 var_bv
(% z$73 var_bv
(% termITE_51 var_bv
(% z$863 var_bv
(% move var_bv
(% z$548 var_bv
(% termITE_69 var_bv
(% prop_3 var_bv
(% termITE_7 var_bv
(% z$833 var_bv
(% z$806 var_bv
(% termITE_11 var_bv
(% z$525 var_bv
(% termITE_68 var_bv
(% s$1653 var_bv
(% termITE_19 var_bv
(% z$521 var_bv
(% termITE_67 var_bv
(% z$804 var_bv
(% termITE_20 var_bv
(% z$47 var_bv
(% s$9$next var_bv
(% termITE_66 var_bv
(% s$145 var_bv
(% termITE_4 var_bv
(% z$803 var_bv
(% termITE_17 var_bv
(% z$30 var_bv
(% z$425 var_bv
(% termITE_8 var_bv
(% z$64 var_bv
(% z$87 var_bv
(% z$423 var_bv
(% termITE_12 var_bv
(% termITE_16 var_bv
(% z$812 var_bv
(% z$827 var_bv
(% z$444 var_bv
(% z$68 var_bv
(% termITE_1 var_bv
(% termITE_5 var_bv
(% z$462 var_bv
(% z$820 var_bv
(% prop var_bv
(% termITE_2 var_bv
(% termITE_6 var_bv
(% z$801 var_bv
(% z$798 var_bv
(% termITE_163 var_bv
(% prop_8 var_bv
(% termITE_3 var_bv
(% z$656 var_bv
(% z$823 var_bv
(% termITE_164 var_bv
(% z$802 var_bv
(% z$58 var_bv
(% termITE_25 var_bv
(% prop0$next var_bv
(% termITE_167 var_bv
(% z$420 var_bv
(% z$n2s2 var_bv
(% s$1655 var_bv
(% termITE_24 var_bv
(% z$453 var_bv
(% termITE_14 var_bv
(% termITE_18 var_bv
(% z$33 var_bv
(% |b[2]$next| var_bv
(% termITE_63 var_bv
(% z$826 var_bv
(% s$136 var_bv
(% termITE_45 var_bv
(% termITE_49 var_bv
(% z$478 var_bv
(% z$799 var_bv
(% termITE_169 var_bv
(% z$75 var_bv
(% z$416 var_bv
(% termITE_9 var_bv
(% termITE_13 var_bv
(% z$809 var_bv
(% z$480 var_bv
(% termITE_168 var_bv
(% z$414 var_bv
(% s$1658 var_bv
(% termITE_29 var_bv
(% z$80 var_bv
(% z$421 var_bv
(% termITE_10 var_bv
(% z$38 var_bv
(% termITE_15 var_bv
(% z$512 var_bv
(% termITE_64 var_bv
(% termITE_50 var_bv
(% z$473 var_bv
(% s$14 var_bv
(% termITE_23 var_bv
(% s$142 var_bv
(% termITE_171 var_bv
(% z$810 var_bv
(% z$86 var_bv
(% termITE_32 var_bv
(% z$885 var_bv
(% termITE_70 var_bv
(% s$12$next var_bv
(% termITE_71 var_bv
(% z$51 var_bv
(% z$27 var_bv
(% z$70 var_bv
(% z$831 var_bv
(% termITE_31 var_bv
(% z$544 var_bv
(% termITE_73 var_bv
(% s$19 var_bv
(% termITE_33 var_bv
(% z$36 var_bv
(% z$835 var_bv
(% termITE_34 var_bv
(% z$892 var_bv
(% termITE_74 var_bv
(% z$29 var_bv
(% s$1663 var_bv
(% termITE_35 var_bv
(% termITE_181 var_bv
(% z$28 var_bv
(% z$807 var_bv
(% termITE_176 var_bv
(% z$40 var_bv
(% z$839 var_bv
(% termITE_37 var_bv
(% z$112 var_bv
(% termITE_36 var_bv
(% z$552 var_bv
(% termITE_75 var_bv
(% z$100 var_bv
(% termITE_38 var_bv
(% z$42 var_bv
(% z$843 var_bv
(% termITE_39 var_bv
(% termITE_183 var_bv
(% z$814 var_bv
(% s$7 var_bv
(% termITE_178 var_bv
(% z$32 var_bv
(% z$818 var_bv
(% z$433 var_bv
(% termITE_40 var_bv
(% termITE_184 var_bv
(% z$815 var_bv
(% |b[0]| var_bv
(% termITE_179 var_bv
(% s$17$next var_bv
(% termITE_76 var_bv
(% z$819 var_bv
(% z$428 var_bv
(% termITE_41 var_bv
(% z$848 var_bv
(% termITE_42 var_bv
(% termITE_46 var_bv
(% z$457 var_bv
(% z$850 var_bv
(% termITE_43 var_bv
(% termITE_47 var_bv
(% z$468 var_bv
(% z$56 var_bv
(% s$133 var_bv
(% termITE_44 var_bv
(% termITE_48 var_bv
(% z$858 var_bv
(% z$897 var_bv
(% termITE_78 var_bv
(% z$829 var_bv
(% termITE_194 var_bv
(% z$836 var_bv
(% z$931 var_bv
(% termITE_99 var_bv
(% z$99 var_bv
(% z$114 var_bv
(% termITE_113 var_bv
(% termITE_101 var_bv
(% z$74 var_bv
(% termITE_195 var_bv
(% z$838 var_bv
(% termITE_114 var_bv
(% z$108 var_bv
(% termITE_105 var_bv
(% z$104 var_bv
(% z$840 var_bv
(% z$841 var_bv
(% termITE_116 var_bv
(% termITE_110 var_bv
(% termITE_203 var_bv
(% z$102 var_bv
(% z$834 var_bv
(% termITE_198 var_bv
(% z$842 var_bv
(% z$106 var_bv
(% z$110 var_bv
(% termITE_117 var_bv
(% termITE_115 var_bv
(% termITE_204 var_bv
(% z$844 var_bv
(% z$91 var_bv
(% termITE_199 var_bv
(% z$432 var_bv
(% termITE_118 var_bv
(% z$845 var_bv
(% termITE_119 var_bv
(% z$847 var_bv
(% z$430 var_bv
(% termITE_120 var_bv
(% z$846 var_bv
(% termITE_121 var_bv
(% termITE_122 var_bv
(% z$448 var_bv
(% termITE_123 var_bv
(% z$459 var_bv
(% z$441 var_bv
(% termITE_124 var_bv
(% z$855 var_bv
(% z$442 var_bv
(% termITE_125 var_bv
(% z$469 var_bv
(% termITE_126 var_bv
(% z$464 var_bv
(% termITE_207 var_bv
(% z$439 var_bv
(% termITE_127 var_bv
(% z$860 var_bv
(% z$849 var_bv
(% termITE_128 var_bv
(% z$862 var_bv
(% z$437 var_bv
(% termITE_129 var_bv
(% termITE_130 var_bv
(% termITE_208 var_bv
(% z$450 var_bv
(% termITE_131 var_bv
(% z$627 var_bv
(% z$451 var_bv
(% termITE_132 var_bv
(% z$867 var_bv
(% z$851 var_bv
(% termITE_133 var_bv
(% termITE_134 var_bv
(% termITE_209 var_bv
(% z$852 var_bv
(% termITE_135 var_bv
(% z$870 var_bv
(% z$446 var_bv
(% termITE_136 var_bv
(% z$872 var_bv
(% z$853 var_bv
(% termITE_137 var_bv
(% termITE_138 var_bv
(% termITE_210 var_bv
(% z$460 var_bv
(% termITE_139 var_bv
(% z$854 var_bv
(% termITE_140 var_bv
(% z$516 var_bv
(% termITE_141 var_bv
(% z$509 var_bv
(% termITE_142 var_bv
(% termITE_211 var_bv
(% z$455 var_bv
(% termITE_143 var_bv
(% z$520 var_bv
(% z$856 var_bv
(% termITE_144 var_bv
(% termITE_145 var_bv
(% termITE_146 var_bv
(% termITE_212 var_bv
(% z$857 var_bv
(% termITE_147 var_bv
(% z$466 var_bv
(% termITE_148 var_bv
(% termITE_149 var_bv
(% termITE_150 var_bv
(% termITE_213 var_bv
(% z$859 var_bv
(% termITE_151 var_bv
(% z$477 var_bv
(% termITE_152 var_bv
(% termITE_153 var_bv
(% termITE_154 var_bv
(% z$475 var_bv
(% termITE_155 var_bv
(% z$861 var_bv
(% termITE_156 var_bv
(% termITE_157 var_bv
(% termITE_158 var_bv
(% z$654 var_bv
(% termITE_159 var_bv
(% termITE_160 var_bv
(% z$645 var_bv
(% termITE_161 var_bv
(% z$864 var_bv
(% termITE_162 var_bv
(% termITE_217 var_bv
(% z$636 var_bv
(% z$865 var_bv
(% termITE_165 var_bv
(% termITE_218 var_bv
(% z$866 var_bv
(% termITE_166 var_bv
(% z$609 var_bv
(% prop_5 var_bv
(% termITE_170 var_bv
(% termITE_220 var_bv
(% z$599 var_bv
(% z$600 var_bv
(% z$435 var_bv
(% termITE_172 var_bv
(% z$426 var_bv
(% termITE_173 var_bv
(% termITE_221 var_bv
(% z$501 var_bv
(% z$n0s3 var_bv
(% termITE_174 var_bv
(% z$504 var_bv
(% termITE_175 var_bv
(% termITE_222 var_bv
(% move$next var_bv
(% z$499 var_bv
(% s$15 var_bv
(% termITE_177 var_bv
(% z$871 var_bv
(% z$597 var_bv
(% s$6 var_bv
(% termITE_180 var_bv
(% z$550 var_bv
(% |b[3]| var_bv
(% termITE_182 var_bv
(% z$874 var_bv
(% termITE_225 var_bv
(% z$531 var_bv
(% z$875 var_bv
(% termITE_226 var_bv
(% z$518 var_bv
(% z$876 var_bv
(% termITE_227 var_bv
(% z$877 var_bv
(% z$508 var_bv
(% termITE_228 var_bv
(% z$510 var_bv
(% z$878 var_bv
(% termITE_229 var_bv
(% z$513 var_bv
(% z$79 var_bv
(% termITE_196 var_bv
(% z$514 var_bv
(% z$95 var_bv
(% termITE_197 var_bv
(% z$879 var_bv
(% z$529 var_bv
(% z$837 var_bv
(% termITE_200 var_bv
(% z$880 var_bv
(% A330 (th_holds true)
(% A329 (th_holds (= (BitVec 1) (a_var_bv 1 z$931) (a_bv 1 (bvc b1  bvn))))
(% A327 (th_holds (= (BitVec 1) (a_var_bv 1 z$929) (ite _ (= (BitVec 1) (a_var_bv 1 s$154) (a_var_bv 1 z$150)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A326 (th_holds (= (BitVec 1) (a_var_bv 1 z$150) (ite _ (bvult 4  (a_var_bv 4 imove) (a_var_bv 4 z$n9s4)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A324 (th_holds (= (BitVec 1) (a_var_bv 1 z$928) (ite _ (= (BitVec 4) (a_var_bv 4 move$next_rhs) (a_var_bv 4 z$152)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A323 (th_holds (= (BitVec 4) (a_var_bv 4 z$152) (ite _ (= (BitVec 1) (a_var_bv 1 s$154) (a_bv 1 (bvc b1  bvn))) (a_var_bv 4 imove) (a_var_bv 4 z$n0s4))))
(% A321 (th_holds (= (BitVec 1) (a_var_bv 1 z$785) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$499) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$736) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$411) (a_bv 1 (bvc b1  bvn))) )) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A320 (th_holds (= (BitVec 1) (a_var_bv 1 z$411) (ite _ (= (BitVec 4) (a_var_bv 4 move$next) (a_var_bv 4 move$next_rhs)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A317 (th_holds (= (BitVec 1) (a_var_bv 1 z$647) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$558) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$566) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A316 (th_holds (= (BitVec 1) (a_var_bv 1 z$926) (ite _ (= (BitVec 1) (a_var_bv 1 s$140$next) (a_var_bv 1 z$649)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A315 (th_holds (= (BitVec 1) (a_var_bv 1 z$649) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$139$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$565) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A312 (th_holds (= (BitVec 1) (a_var_bv 1 z$651) (ite _ (= (BitVec 1) (a_var_bv 1 s$140$next) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A311 (th_holds (= (BitVec 1) (a_var_bv 1 z$924) (ite _ (= (BitVec 1) (a_var_bv 1 s$137$next) (a_var_bv 1 z$638)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A307 (th_holds (= (BitVec 1) (a_var_bv 1 z$922) (ite _ (= (BitVec 1) (a_var_bv 1 prop_7$next) (a_var_bv 1 z$643)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A306 (th_holds (= (BitVec 1) (a_var_bv 1 z$643) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$642) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winX$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A295 (th_holds (= (BitVec 1) (a_var_bv 1 z$917) (ite _ (= (BitVec 1) (a_var_bv 1 s$134$next) (a_var_bv 1 z$622)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A294 (th_holds (= (BitVec 1) (a_var_bv 1 z$622) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$133$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$524) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A291 (th_holds (= (BitVec 1) (a_var_bv 1 z$624) (ite _ (= (BitVec 1) (a_var_bv 1 s$134$next) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A290 (th_holds (= (BitVec 1) (a_var_bv 1 z$915) (ite _ (= (BitVec 1) (a_var_bv 1 s$131$next) (a_var_bv 1 z$611)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A289 (th_holds (= (BitVec 1) (a_var_bv 1 z$611) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$552) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$553) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A288 (th_holds (= (BitVec 1) (a_var_bv 1 z$914) (ite _ (= (BitVec 1) (a_var_bv 1 s$132$next) (a_var_bv 1 z$613)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A287 (th_holds (= (BitVec 1) (a_var_bv 1 z$613) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$131$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$554) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A285 (th_holds (= (BitVec 1) (a_var_bv 1 z$616) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$615) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winO$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A284 (th_holds (= (BitVec 1) (a_var_bv 1 z$615) (ite _ (= (BitVec 1) (a_var_bv 1 s$132$next) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A283 (th_holds (= (BitVec 1) (a_var_bv 1 z$912) (ite _ (= (BitVec 1) (a_var_bv 1 s$129$next) (a_var_bv 1 z$602)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A279 (th_holds (= (BitVec 1) (a_var_bv 1 z$910) (ite _ (= (BitVec 1) (a_var_bv 1 prop_3$next) (a_var_bv 1 z$607)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A278 (th_holds (= (BitVec 1) (a_var_bv 1 z$607) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$606) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winX$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A276 (th_holds (= (BitVec 1) (a_var_bv 1 z$909) (ite _ (= (BitVec 1) (a_var_bv 1 s$25$next) (a_var_bv 1 z$589)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A275 (th_holds (= (BitVec 1) (a_var_bv 1 z$589) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$557) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$569) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A274 (th_holds (= (BitVec 1) (a_var_bv 1 z$908) (ite _ (= (BitVec 1) (a_var_bv 1 s$24$next) (a_var_bv 1 z$585)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A273 (th_holds (= (BitVec 1) (a_var_bv 1 z$585) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$553) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$566) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A272 (th_holds (= (BitVec 1) (a_var_bv 1 z$907) (ite _ (= (BitVec 1) (a_var_bv 1 s$23$next) (a_var_bv 1 z$581)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A271 (th_holds (= (BitVec 1) (a_var_bv 1 z$581) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$554) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$558) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A270 (th_holds (= (BitVec 1) (a_var_bv 1 z$906) (ite _ (= (BitVec 1) (a_var_bv 1 s$22$next) (a_var_bv 1 z$579)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A269 (th_holds (= (BitVec 1) (a_var_bv 1 z$579) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$552) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$565) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A266 (th_holds (= (BitVec 1) (a_var_bv 1 z$904) (ite _ (= (BitVec 1) (a_var_bv 1 s$1662$next) (a_var_bv 1 z$587)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A265 (th_holds (= (BitVec 1) (a_var_bv 1 z$587) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$1661$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$24$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A262 (th_holds (= (BitVec 1) (a_var_bv 1 z$902) (ite _ (= (BitVec 1) (a_var_bv 1 s$26$next) (a_var_bv 1 z$593)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A256 (th_holds (= (BitVec 1) (a_var_bv 1 z$900) (ite _ (= (BitVec 1) (a_var_bv 1 s$19$next) (a_var_bv 1 z$567)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A255 (th_holds (= (BitVec 1) (a_var_bv 1 z$567) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$566) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$558) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A251 (th_holds (= (BitVec 1) (a_var_bv 1 z$898) (ite _ (= (BitVec 1) (a_var_bv 1 s$21$next) (a_var_bv 1 z$574)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A250 (th_holds (= (BitVec 1) (a_var_bv 1 z$574) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$565) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$1659$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A249 (th_holds (= (BitVec 1) (a_var_bv 1 z$565) (ite _ (= (BitVec 2) (a_var_bv 2 |b[8]$next|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A248 (th_holds (= (BitVec 1) (a_var_bv 1 z$897) (ite _ (= (BitVec 1) (a_var_bv 1 s$18$next) (a_var_bv 1 z$559)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A247 (th_holds (= (BitVec 1) (a_var_bv 1 z$559) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$557) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$558) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A246 (th_holds (= (BitVec 1) (a_var_bv 1 z$558) (ite _ (= (BitVec 2) (a_var_bv 2 |b[6]$next|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A242 (th_holds (= (BitVec 1) (a_var_bv 1 z$554) (ite _ (= (BitVec 2) (a_var_bv 2 |b[2]$next|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A239 (th_holds (= (BitVec 1) (a_var_bv 1 z$561) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$17$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$18$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A237 (th_holds (= (BitVec 1) (a_var_bv 1 z$563) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$552) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$1658$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A233 (th_holds (= (BitVec 1) (a_var_bv 1 z$892) (ite _ (= (BitVec 1) (a_var_bv 1 winO$next) (a_var_bv 1 z$595)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A232 (th_holds (= (BitVec 1) (a_var_bv 1 z$595) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$1660$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$26$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A231 (th_holds (= (BitVec 1) (a_var_bv 1 z$891) (ite _ (= (BitVec 1) (a_var_bv 1 s$14$next) (a_var_bv 1 z$544)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A230 (th_holds (= (BitVec 1) (a_var_bv 1 z$544) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$512) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$524) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A229 (th_holds (= (BitVec 1) (a_var_bv 1 z$890) (ite _ (= (BitVec 1) (a_var_bv 1 s$13$next) (a_var_bv 1 z$540)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A228 (th_holds (= (BitVec 1) (a_var_bv 1 z$540) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$508) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$521) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A227 (th_holds (= (BitVec 1) (a_var_bv 1 z$889) (ite _ (= (BitVec 1) (a_var_bv 1 s$12$next) (a_var_bv 1 z$536)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A226 (th_holds (= (BitVec 1) (a_var_bv 1 z$536) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$509) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$513) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A225 (th_holds (= (BitVec 1) (a_var_bv 1 z$888) (ite _ (= (BitVec 1) (a_var_bv 1 s$11$next) (a_var_bv 1 z$534)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A222 (th_holds (= (BitVec 1) (a_var_bv 1 z$538) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$11$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$12$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A220 (th_holds (= (BitVec 1) (a_var_bv 1 z$542) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$1655$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$13$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A217 (th_holds (= (BitVec 1) (a_var_bv 1 z$884) (ite _ (= (BitVec 1) (a_var_bv 1 s$15$next) (a_var_bv 1 z$548)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A216 (th_holds (= (BitVec 1) (a_var_bv 1 z$548) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$533) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$1657$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A215 (th_holds (= (BitVec 1) (a_var_bv 1 z$533) (ite _ (= (BitVec 2) (a_var_bv 2 |b[4]$next|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A214 (th_holds (= (BitVec 1) (a_var_bv 1 z$883) (ite _ (= (BitVec 1) (a_var_bv 1 s$9$next) (a_var_bv 1 z$525)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A213 (th_holds (= (BitVec 1) (a_var_bv 1 z$525) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$524) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$509) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A212 (th_holds (= (BitVec 1) (a_var_bv 1 z$524) (ite _ (= (BitVec 2) (a_var_bv 2 |b[5]$next|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A211 (th_holds (= (BitVec 1) (a_var_bv 1 z$882) (ite _ (= (BitVec 1) (a_var_bv 1 s$8$next) (a_var_bv 1 z$522)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A210 (th_holds (= (BitVec 1) (a_var_bv 1 z$522) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$521) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$513) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A322 (th_holds (= (BitVec 4) (a_var_bv 4 z$n0s4) (a_bv 4 (bvc b0 (bvc b0 (bvc b0 (bvc b0  bvn)))))))
(% A204 (th_holds (= (BitVec 1) (a_var_bv 1 z$520) (ite _ (= (BitVec 2) (a_var_bv 2 |b[8]$next|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A203 (th_holds (= (BitVec 1) (a_var_bv 1 z$879) (ite _ (= (BitVec 1) (a_var_bv 1 s$6$next) (a_var_bv 1 z$514)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A319 (th_holds (= (BitVec 1) (a_var_bv 1 z$736) (ite _ (and (not (= (BitVec 3) (a_var_bv 3 w$19$next) (a_var_bv 3 z$n0s3))) true) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A201 (th_holds (= (BitVec 1) (a_var_bv 1 z$513) (ite _ (= (BitVec 2) (a_var_bv 2 |b[6]$next|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A200 (th_holds (= (BitVec 1) (a_var_bv 1 z$512) (ite _ (= (BitVec 2) (a_var_bv 2 |b[3]$next|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A199 (th_holds (= (BitVec 1) (a_var_bv 1 z$878) (ite _ (= (BitVec 1) (a_var_bv 1 s$5$next) (a_var_bv 1 z$510)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A96 (th_holds (= (BitVec 1) (a_var_bv 1 z$834) (ite _ (= (BitVec 1) (a_var_bv 1 s$1659) (a_var_bv 1 z$93)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A40 (th_holds (= (BitVec 1) (a_var_bv 1 z$30) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$28) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$29) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A95 (th_holds (= (BitVec 1) (a_var_bv 1 z$93) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$19) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$20) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A87 (th_holds (= (BitVec 1) (a_var_bv 1 z$831) (ite _ (= (BitVec 1) (a_var_bv 1 s$17) (a_var_bv 1 z$76)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A202 (th_holds (= (BitVec 1) (a_var_bv 1 z$514) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$512) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$513) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A85 (th_holds (= (BitVec 1) (a_var_bv 1 z$75) (ite _ (= (BitVec 2) (a_var_bv 2 |b[2]|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A143 (th_holds (= (BitVec 1) (a_var_bv 1 z$854) (ite _ (= (BitVec 1) (a_var_bv 1 prop_6) (a_var_bv 1 z$460)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A318 (th_holds (= (BitVec 1) (a_var_bv 1 z$927) (ite _ (= (BitVec 1) (a_var_bv 1 s$139$next) (a_var_bv 1 z$647)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A82 (th_holds (= (BitVec 1) (a_var_bv 1 z$82) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$17) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$18) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A80 (th_holds (= (BitVec 1) (a_var_bv 1 z$84) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$73) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$1658) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A194 (th_holds (= (BitVec 1) (a_var_bv 1 z$516) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$5$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$6$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A77 (th_holds (= (BitVec 1) (a_var_bv 1 z$828) (ite _ (= (BitVec 1) (a_var_bv 1 s$1660) (a_var_bv 1 z$97)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A76 (th_holds (= (BitVec 1) (a_var_bv 1 z$97) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$16) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$21) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A308 (th_holds (= (BitVec 1) (a_var_bv 1 z$640) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$137$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$520) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A191 (th_holds (= (BitVec 1) (a_var_bv 1 z$507) (ite _ (= (BitVec 2) (a_var_bv 2 |b[0]$next|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A310 (th_holds (= (BitVec 1) (a_var_bv 1 z$638) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$513) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$521) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A75 (th_holds (= (BitVec 1) (a_var_bv 1 z$827) (ite _ (= (BitVec 1) (a_var_bv 1 winO) (a_var_bv 1 z$116)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A309 (th_holds (= (BitVec 1) (a_var_bv 1 z$923) (ite _ (= (BitVec 1) (a_var_bv 1 s$138$next) (a_var_bv 1 z$640)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A74 (th_holds (= (BitVec 1) (a_var_bv 1 z$116) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$1660) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$26) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A73 (th_holds (= (BitVec 1) (a_var_bv 1 z$826) (ite _ (= (BitVec 1) (a_var_bv 1 s$14) (a_var_bv 1 z$64)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A94 (th_holds (= (BitVec 1) (a_var_bv 1 z$833) (ite _ (= (BitVec 1) (a_var_bv 1 s$21) (a_var_bv 1 z$95)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A38 (th_holds (= (BitVec 1) (a_var_bv 1 z$28) (ite _ (= (BitVec 2) (a_var_bv 2 |b[1]|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A301 (th_holds (= (BitVec 1) (a_var_bv 1 z$631) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$135$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$569) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A66 (th_holds (= (BitVec 1) (a_var_bv 1 z$54) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$27) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$40) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A93 (th_holds (= (BitVec 1) (a_var_bv 1 z$95) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$86) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$1659) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A37 (th_holds (= (BitVec 1) (a_var_bv 1 z$812) (ite _ (= (BitVec 1) (a_var_bv 1 s$1652) (a_var_bv 1 z$36)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A65 (th_holds (= (BitVec 1) (a_var_bv 1 z$822) (ite _ (= (BitVec 1) (a_var_bv 1 s$1655) (a_var_bv 1 z$58)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A64 (th_holds (= (BitVec 1) (a_var_bv 1 z$58) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$11) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$12) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A296 (th_holds (= (BitVec 1) (a_var_bv 1 z$620) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$512) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$533) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A179 (th_holds (= (BitVec 1) (a_var_bv 1 z$505) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$501) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$504) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A207 (th_holds (= (BitVec 1) (a_var_bv 1 z$527) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$8$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$9$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A90 (th_holds (= (BitVec 1) (a_var_bv 1 z$80) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$78) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$79) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A152 (th_holds (= (BitVec 1) (a_var_bv 1 z$858) (ite _ (= (BitVec 1) (a_var_bv 1 s$138) (a_var_bv 1 z$466)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A34 (th_holds (= (BitVec 1) (a_var_bv 1 z$38) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$27) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$1652) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A297 (th_holds (= (BitVec 1) (a_var_bv 1 z$918) (ite _ (= (BitVec 1) (a_var_bv 1 s$133$next) (a_var_bv 1 z$620)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A180 (th_holds (= (BitVec 1) (a_var_bv 1 z$870) (ite _ (= (BitVec 1) (a_var_bv 1 prop_1$next) (a_var_bv 1 z$505)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A62 (th_holds (= (BitVec 1) (a_var_bv 1 z$62) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$1655) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$13) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A177 (th_holds (= (BitVec 1) (a_var_bv 1 z$501) (ite _ (= (BitVec 1) (a_var_bv 1 w$18$next) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A205 (th_holds (= (BitVec 1) (a_var_bv 1 z$529) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$520) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$1653$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A88 (th_holds (= (BitVec 1) (a_var_bv 1 z$78) (ite _ (= (BitVec 2) (a_var_bv 2 |b[3]|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A32 (th_holds (= (BitVec 2) (a_var_bv 2 z$n1s2) (a_bv 2 (bvc b0 (bvc b1  bvn)))))
(% A292 (th_holds (= (BitVec 1) (a_var_bv 1 z$625) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$624) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winX$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A58 (th_holds (= (BitVec 1) (a_var_bv 1 z$68) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$53) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$1657) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A114 (th_holds (= (BitVec 1) (a_var_bv 1 z$102) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$75) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$79) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A57 (th_holds (= (BitVec 1) (a_var_bv 1 z$53) (ite _ (= (BitVec 2) (a_var_bv 2 |b[4]|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A56 (th_holds (= (BitVec 1) (a_var_bv 1 z$818) (ite _ (= (BitVec 1) (a_var_bv 1 s$9) (a_var_bv 1 z$45)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A55 (th_holds (= (BitVec 1) (a_var_bv 1 z$45) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$44) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$29) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A52 (th_holds (= (BitVec 1) (a_var_bv 1 z$42) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$41) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$33) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A193 (th_holds (= (BitVec 1) (a_var_bv 1 z$876) (ite _ (= (BitVec 1) (a_var_bv 1 s$7$next) (a_var_bv 1 z$518)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A224 (th_holds (= (BitVec 1) (a_var_bv 1 z$534) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$507) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$520) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A107 (th_holds (= (BitVec 1) (a_var_bv 1 z$838) (ite _ (= (BitVec 1) (a_var_bv 1 s$1663) (a_var_bv 1 z$112)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A313 (th_holds (= (BitVec 1) (a_var_bv 1 z$652) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$651) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winO$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A195 (th_holds (= (BitVec 1) (a_var_bv 1 z$877) (ite _ (= (BitVec 1) (a_var_bv 1 s$1652$next) (a_var_bv 1 z$516)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A78 (th_holds (= (BitVec 2) (a_var_bv 2 z$n2s2) (a_bv 2 (bvc b1 (bvc b0  bvn)))))
(% A192 (th_holds (= (BitVec 1) (a_var_bv 1 z$518) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$507) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$1652$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A223 (th_holds (= (BitVec 1) (a_var_bv 1 z$887) (ite _ (= (BitVec 1) (a_var_bv 1 s$1655$next) (a_var_bv 1 z$538)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A106 (th_holds (= (BitVec 1) (a_var_bv 1 z$112) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$1662) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$25) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A49 (th_holds (= (BitVec 1) (a_var_bv 1 z$47) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$8) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$9) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A277 (th_holds (= (BitVec 1) (a_var_bv 1 z$606) (ite _ (= (BitVec 1) (a_var_bv 1 s$130$next) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A44 (th_holds (= (BitVec 1) (a_var_bv 1 z$34) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$32) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$33) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A241 (th_holds (= (BitVec 1) (a_var_bv 1 z$553) (ite _ (= (BitVec 2) (a_var_bv 2 |b[1]$next|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A9 (th_holds (= (BitVec 1) (a_var_bv 1 z$801) (ite _ (= (BitVec 1) (a_var_bv 1 s$144) (a_var_bv 1 z$453)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A13 (th_holds (= (BitVec 1) (a_var_bv 1 z$803) (ite _ (= (BitVec 1) (a_var_bv 1 s$142) (a_var_bv 1 z$435)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A42 (th_holds (= (BitVec 1) (a_var_bv 1 z$32) (ite _ (= (BitVec 2) (a_var_bv 2 |b[3]|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A12 (th_holds (= (BitVec 1) (a_var_bv 1 z$435) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$141) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 prop_3) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A303 (th_holds (= (BitVec 1) (a_var_bv 1 z$629) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$557) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$578) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A68 (th_holds (= (BitVec 1) (a_var_bv 1 z$56) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$29) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$33) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A39 (th_holds (= (BitVec 1) (a_var_bv 1 z$29) (ite _ (= (BitVec 2) (a_var_bv 2 |b[2]|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A267 (th_holds (= (BitVec 1) (a_var_bv 1 z$583) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$22$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$23$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A154 (th_holds (= (BitVec 1) (a_var_bv 1 z$859) (ite _ (= (BitVec 1) (a_var_bv 1 s$137) (a_var_bv 1 z$464)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A243 (th_holds (= (BitVec 1) (a_var_bv 1 z$555) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$553) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$554) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A11 (th_holds (= (BitVec 1) (a_var_bv 1 z$802) (ite _ (= (BitVec 1) (a_var_bv 1 s$143) (a_var_bv 1 z$444)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A71 (th_holds (= (BitVec 1) (a_var_bv 1 z$825) (ite _ (= (BitVec 1) (a_var_bv 1 s$13) (a_var_bv 1 z$60)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A244 (th_holds (= (BitVec 1) (a_var_bv 1 z$896) (ite _ (= (BitVec 1) (a_var_bv 1 s$17$next) (a_var_bv 1 z$555)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A128 (th_holds (= (BitVec 1) (a_var_bv 1 z$442) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$441) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winO) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A186 (th_holds (= (BitVec 1) (a_var_bv 1 z$873) (ite _ (= (BitVec 1) (a_var_bv 1 s$128$next) (a_var_bv 1 z$597)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A304 (th_holds (= (BitVec 1) (a_var_bv 1 z$921) (ite _ (= (BitVec 1) (a_var_bv 1 s$135$next) (a_var_bv 1 z$629)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A69 (th_holds (= (BitVec 1) (a_var_bv 1 z$824) (ite _ (= (BitVec 1) (a_var_bv 1 s$12) (a_var_bv 1 z$56)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A187 (th_holds (= (BitVec 1) (a_var_bv 1 z$550) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$1654$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$15$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A328 (th_holds (= (BitVec 1) (a_var_bv 1 z$931) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$482) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$656) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$798) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$799) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$800) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$801) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$802) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$803) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$804) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$805) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$806) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$807) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$808) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$809) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$810) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$811) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$812) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$813) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$814) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$815) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$816) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$817) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$818) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$819) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$820) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$821) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$822) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$823) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$824) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$825) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$826) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$827) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$828) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$829) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$830) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$831) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$832) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$833) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$834) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$835) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$836) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$837) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$838) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$839) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$840) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$841) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$842) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$843) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$844) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$845) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$846) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$847) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$848) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$849) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$850) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$851) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$852) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$853) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$854) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$855) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$856) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$857) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$858) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$859) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$860) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$861) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$862) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$863) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$864) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$865) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$866) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$867) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$868) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$869) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$870) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$871) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$872) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$873) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$874) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$875) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$876) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$877) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$878) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$879) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$880) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$881) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$882) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$883) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$884) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$885) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$886) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$887) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$888) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$889) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$890) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$891) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$892) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$893) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$894) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$895) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$896) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$897) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$898) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$899) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$900) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$901) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$902) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$903) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$904) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$905) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$906) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$907) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$908) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$909) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$910) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$911) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$912) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$913) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$914) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$915) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$916) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$917) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$918) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$919) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$920) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$921) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$922) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$923) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$924) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$925) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$926) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$927) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$785) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$872) (a_bv 1 (bvc b1  bvn))) (and (= (BitVec 1) (a_var_bv 1 z$928) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$929) (a_bv 1 (bvc b1  bvn))) ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A14 (th_holds (= (BitVec 1) (a_var_bv 1 z$425) (ite _ (= (BitVec 1) (a_var_bv 1 s$128) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A185 (th_holds (= (BitVec 1) (a_var_bv 1 z$597) (ite _ (and (= (BitVec 1) (a_var_bv 1 winX$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winO$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A43 (th_holds (= (BitVec 1) (a_var_bv 1 z$33) (ite _ (= (BitVec 2) (a_var_bv 2 |b[6]|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A158 (th_holds (= (BitVec 1) (a_var_bv 1 z$475) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$139) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$86) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A280 (th_holds (= (BitVec 1) (a_var_bv 1 z$604) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$129$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$509) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A47 (th_holds (= (BitVec 1) (a_var_bv 1 z$49) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$40) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$1653) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A20 (th_holds (= (BitVec 1) (a_var_bv 1 z$421) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$416) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$420) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A0 (th_holds (= (BitVec 1) (a_var_bv 1 z$482) (ite _ (= (BitVec 1) (a_var_bv 1 prop) (a_var_bv 1 prop0)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A7 (th_holds (= (BitVec 1) (a_var_bv 1 z$800) (ite _ (= (BitVec 1) (a_var_bv 1 s$145) (a_var_bv 1 z$462)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A236 (th_holds (= (BitVec 1) (a_var_bv 1 z$552) (ite _ (= (BitVec 2) (a_var_bv 2 |b[0]$next|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A4 (th_holds (= (BitVec 1) (a_var_bv 1 z$471) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$145) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 prop_7) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A119 (th_holds (= (BitVec 1) (a_var_bv 1 z$844) (ite _ (= (BitVec 1) (a_var_bv 1 s$25) (a_var_bv 1 z$110)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A84 (th_holds (= (BitVec 1) (a_var_bv 1 z$74) (ite _ (= (BitVec 2) (a_var_bv 2 |b[1]|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A257 (th_holds (= (BitVec 1) (a_var_bv 1 z$569) (ite _ (= (BitVec 2) (a_var_bv 2 |b[5]$next|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A142 (th_holds (= (BitVec 1) (a_var_bv 1 z$460) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$459) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winO) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A81 (th_holds (= (BitVec 1) (a_var_bv 1 z$829) (ite _ (= (BitVec 1) (a_var_bv 1 s$16) (a_var_bv 1 z$84)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A198 (th_holds (= (BitVec 1) (a_var_bv 1 z$510) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$508) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$509) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A3 (th_holds (= (BitVec 1) (a_var_bv 1 z$798) (ite _ (= (BitVec 1) (a_var_bv 1 prop0) (a_var_bv 1 z$480)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A172 (th_holds (= (BitVec 1) (a_var_bv 1 z$609) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$141$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 prop_3$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A83 (th_holds (= (BitVec 1) (a_var_bv 1 z$830) (ite _ (= (BitVec 1) (a_var_bv 1 s$1658) (a_var_bv 1 z$82)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A2 (th_holds (= (BitVec 1) (a_var_bv 1 z$480) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$146) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 prop_8) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A72 (th_holds (= (BitVec 1) (a_var_bv 1 z$64) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$32) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$44) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A245 (th_holds (= (BitVec 1) (a_var_bv 1 z$557) (ite _ (= (BitVec 2) (a_var_bv 2 |b[3]$next|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A129 (th_holds (= (BitVec 1) (a_var_bv 1 z$848) (ite _ (= (BitVec 1) (a_var_bv 1 prop_4) (a_var_bv 1 z$442)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A134 (th_holds (= (BitVec 1) (a_var_bv 1 z$450) (ite _ (= (BitVec 1) (a_var_bv 1 s$134) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A17 (th_holds (= (BitVec 1) (a_var_bv 1 z$416) (ite _ (= (BitVec 1) (a_var_bv 1 w$18) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A305 (th_holds (= (BitVec 1) (a_var_bv 1 z$642) (ite _ (= (BitVec 1) (a_var_bv 1 s$138$next) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A70 (th_holds (= (BitVec 1) (a_var_bv 1 z$60) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$28) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$41) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A188 (th_holds (= (BitVec 1) (a_var_bv 1 z$874) (ite _ (= (BitVec 1) (a_var_bv 1 winX$next) (a_var_bv 1 z$550)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A30 (th_holds (= (BitVec 1) (a_var_bv 1 z$51) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$7) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$10) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A86 (th_holds (= (BitVec 1) (a_var_bv 1 z$76) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$74) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$75) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A1 (th_holds (= (BitVec 1) (a_var_bv 1 z$656) (ite _ (= (BitVec 1) (a_var_bv 1 prop$next) (a_var_bv 1 prop0$next)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A111 (th_holds (= (BitVec 1) (a_var_bv 1 z$840) (ite _ (= (BitVec 1) (a_var_bv 1 s$1661) (a_var_bv 1 z$104)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A286 (th_holds (= (BitVec 1) (a_var_bv 1 z$913) (ite _ (= (BitVec 1) (a_var_bv 1 prop_4$next) (a_var_bv 1 z$616)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A170 (th_holds (= (BitVec 1) (a_var_bv 1 z$618) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$142$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 prop_4$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A293 (th_holds (= (BitVec 1) (a_var_bv 1 z$916) (ite _ (= (BitVec 1) (a_var_bv 1 prop_5$next) (a_var_bv 1 z$625)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A59 (th_holds (= (BitVec 1) (a_var_bv 1 z$819) (ite _ (= (BitVec 1) (a_var_bv 1 s$15) (a_var_bv 1 z$68)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A115 (th_holds (= (BitVec 1) (a_var_bv 1 z$842) (ite _ (= (BitVec 1) (a_var_bv 1 s$23) (a_var_bv 1 z$102)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A18 (th_holds (= (BitVec 3) (a_var_bv 3 z$n0s3) (a_bv 3 (bvc b0 (bvc b0 (bvc b0  bvn))))))
(% A131 (th_holds (= (BitVec 1) (a_var_bv 1 z$849) (ite _ (= (BitVec 1) (a_var_bv 1 s$132) (a_var_bv 1 z$439)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A45 (th_holds (= (BitVec 1) (a_var_bv 1 z$814) (ite _ (= (BitVec 1) (a_var_bv 1 s$6) (a_var_bv 1 z$34)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A218 (th_holds (= (BitVec 1) (a_var_bv 1 z$546) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$1656$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$14$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A101 (th_holds (= (BitVec 1) (a_var_bv 1 z$91) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$90) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$75) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A238 (th_holds (= (BitVec 1) (a_var_bv 1 z$894) (ite _ (= (BitVec 1) (a_var_bv 1 s$16$next) (a_var_bv 1 z$563)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A6 (th_holds (= (BitVec 1) (a_var_bv 1 z$462) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$144) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 prop_6) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A235 (th_holds (= (BitVec 1) (a_var_bv 1 z$893) (ite _ (= (BitVec 1) (a_var_bv 1 s$1660$next) (a_var_bv 1 z$576)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A118 (th_holds (= (BitVec 1) (a_var_bv 1 z$110) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$78) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$90) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A281 (th_holds (= (BitVec 1) (a_var_bv 1 z$911) (ite _ (= (BitVec 1) (a_var_bv 1 s$130$next) (a_var_bv 1 z$604)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A166 (th_holds (= (BitVec 1) (a_var_bv 1 z$636) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$144$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 prop_6$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A48 (th_holds (= (BitVec 1) (a_var_bv 1 z$815) (ite _ (= (BitVec 1) (a_var_bv 1 s$10) (a_var_bv 1 z$49)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A221 (th_holds (= (BitVec 1) (a_var_bv 1 z$886) (ite _ (= (BitVec 1) (a_var_bv 1 s$1656$next) (a_var_bv 1 z$542)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A104 (th_holds (= (BitVec 1) (a_var_bv 1 z$114) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$99) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$1663) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A21 (th_holds (= (BitVec 1) (a_var_bv 1 z$805) (ite _ (= (BitVec 1) (a_var_bv 1 prop_1) (a_var_bv 1 z$421)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A325 (th_holds (= (BitVec 4) (a_var_bv 4 z$n9s4) (a_bv 4 (bvc b1 (bvc b0 (bvc b0 (bvc b1  bvn)))))))
(% A206 (th_holds (= (BitVec 1) (a_var_bv 1 z$880) (ite _ (= (BitVec 1) (a_var_bv 1 s$10$next) (a_var_bv 1 z$529)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A89 (th_holds (= (BitVec 1) (a_var_bv 1 z$79) (ite _ (= (BitVec 2) (a_var_bv 2 |b[6]|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A33 (th_holds (= (BitVec 1) (a_var_bv 1 z$27) (ite _ (= (BitVec 2) (a_var_bv 2 |b[0]|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A61 (th_holds (= (BitVec 1) (a_var_bv 1 z$820) (ite _ (= (BitVec 1) (a_var_bv 1 s$1657) (a_var_bv 1 z$66)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A240 (th_holds (= (BitVec 1) (a_var_bv 1 z$895) (ite _ (= (BitVec 1) (a_var_bv 1 s$1658$next) (a_var_bv 1 z$561)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A8 (th_holds (= (BitVec 1) (a_var_bv 1 z$453) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$143) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 prop_5) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A10 (th_holds (= (BitVec 1) (a_var_bv 1 z$444) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$142) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 prop_4) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A25 (th_holds (= (BitVec 1) (a_var_bv 1 z$807) (ite _ (= (BitVec 3) (a_var_bv 3 w$19) (a_var_bv 3 z$417)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A53 (th_holds (= (BitVec 1) (a_var_bv 1 z$817) (ite _ (= (BitVec 1) (a_var_bv 1 s$8) (a_var_bv 1 z$42)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A258 (th_holds (= (BitVec 1) (a_var_bv 1 z$570) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$569) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$554) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A26 (th_holds (= (BitVec 1) (a_var_bv 1 z$423) (ite _ (and (= (BitVec 1) (a_var_bv 1 winX) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winO) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A23 (th_holds (= (BitVec 1) (a_var_bv 1 z$806) (ite _ (= (BitVec 1) (a_var_bv 1 w$18) (a_var_bv 1 z$414)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A140 (th_holds (= (BitVec 1) (a_var_bv 1 z$853) (ite _ (= (BitVec 1) (a_var_bv 1 s$133) (a_var_bv 1 z$446)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A54 (th_holds (= (BitVec 1) (a_var_bv 1 z$44) (ite _ (= (BitVec 2) (a_var_bv 2 |b[5]|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A24 (th_holds (= (BitVec 3) (a_var_bv 3 z$417) (extract 3  2 0 4 (a_var_bv 4 move))))
(% A141 (th_holds (= (BitVec 1) (a_var_bv 1 z$459) (ite _ (= (BitVec 1) (a_var_bv 1 s$136) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A28 (th_holds (= (BitVec 1) (a_var_bv 1 z$70) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$1654) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$15) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A261 (th_holds (= (BitVec 1) (a_var_bv 1 z$593) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$578) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$1663$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A29 (th_holds (= (BitVec 1) (a_var_bv 1 z$809) (ite _ (= (BitVec 1) (a_var_bv 1 winX) (a_var_bv 1 z$70)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A19 (th_holds (= (BitVec 1) (a_var_bv 1 z$420) (ite _ (= (BitVec 3) (a_var_bv 3 w$19) (a_var_bv 3 z$n0s3)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A15 (th_holds (= (BitVec 1) (a_var_bv 1 z$426) (ite _ (and (= (BitVec 1) (a_var_bv 1 prop_1) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$425) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A132 (th_holds (= (BitVec 1) (a_var_bv 1 z$437) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$73) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$74) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A189 (th_holds (= (BitVec 1) (a_var_bv 1 z$531) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$7$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$10$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A219 (th_holds (= (BitVec 1) (a_var_bv 1 z$885) (ite _ (= (BitVec 1) (a_var_bv 1 s$1657$next) (a_var_bv 1 z$546)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A102 (th_holds (= (BitVec 1) (a_var_bv 1 z$836) (ite _ (= (BitVec 1) (a_var_bv 1 s$20) (a_var_bv 1 z$91)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A153 (th_holds (= (BitVec 1) (a_var_bv 1 z$464) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$33) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$41) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A35 (th_holds (= (BitVec 1) (a_var_bv 1 z$811) (ite _ (= (BitVec 1) (a_var_bv 1 s$7) (a_var_bv 1 z$38)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A208 (th_holds (= (BitVec 1) (a_var_bv 1 z$881) (ite _ (= (BitVec 1) (a_var_bv 1 s$1653$next) (a_var_bv 1 z$527)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A91 (th_holds (= (BitVec 1) (a_var_bv 1 z$832) (ite _ (= (BitVec 1) (a_var_bv 1 s$18) (a_var_bv 1 z$80)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A298 (th_holds (= (BitVec 1) (a_var_bv 1 z$633) (ite _ (= (BitVec 1) (a_var_bv 1 s$136$next) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A63 (th_holds (= (BitVec 1) (a_var_bv 1 z$821) (ite _ (= (BitVec 1) (a_var_bv 1 s$1656) (a_var_bv 1 z$62)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A60 (th_holds (= (BitVec 1) (a_var_bv 1 z$66) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$1656) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$14) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A178 (th_holds (= (BitVec 1) (a_var_bv 1 z$504) (ite _ (= (BitVec 3) (a_var_bv 3 w$19$next) (a_var_bv 3 z$n0s3)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A36 (th_holds (= (BitVec 1) (a_var_bv 1 z$36) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$5) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$6) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A151 (th_holds (= (BitVec 1) (a_var_bv 1 z$466) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$137) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$40) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A209 (th_holds (= (BitVec 1) (a_var_bv 1 z$521) (ite _ (= (BitVec 2) (a_var_bv 2 |b[7]$next|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A92 (th_holds (= (BitVec 1) (a_var_bv 1 z$86) (ite _ (= (BitVec 2) (a_var_bv 2 |b[8]|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A302 (th_holds (= (BitVec 1) (a_var_bv 1 z$920) (ite _ (= (BitVec 1) (a_var_bv 1 s$136$next) (a_var_bv 1 z$631)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A67 (th_holds (= (BitVec 1) (a_var_bv 1 z$823) (ite _ (= (BitVec 1) (a_var_bv 1 s$11) (a_var_bv 1 z$54)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A41 (th_holds (= (BitVec 1) (a_var_bv 1 z$813) (ite _ (= (BitVec 1) (a_var_bv 1 s$5) (a_var_bv 1 z$30)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A97 (th_holds (= (BitVec 1) (a_var_bv 1 z$87) (ite _ (= (BitVec 2) (a_var_bv 2 |b[7]|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A98 (th_holds (= (BitVec 1) (a_var_bv 1 z$88) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$87) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$79) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A99 (th_holds (= (BitVec 1) (a_var_bv 1 z$835) (ite _ (= (BitVec 1) (a_var_bv 1 s$19) (a_var_bv 1 z$88)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A100 (th_holds (= (BitVec 1) (a_var_bv 1 z$90) (ite _ (= (BitVec 2) (a_var_bv 2 |b[5]|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A103 (th_holds (= (BitVec 1) (a_var_bv 1 z$99) (ite _ (= (BitVec 2) (a_var_bv 2 |b[4]|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A162 (th_holds (= (BitVec 1) (a_var_bv 1 z$654) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$146$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 prop_8$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A105 (th_holds (= (BitVec 1) (a_var_bv 1 z$837) (ite _ (= (BitVec 1) (a_var_bv 1 s$26) (a_var_bv 1 z$114)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A46 (th_holds (= (BitVec 1) (a_var_bv 1 z$40) (ite _ (= (BitVec 2) (a_var_bv 2 |b[8]|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A164 (th_holds (= (BitVec 1) (a_var_bv 1 z$645) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$145$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 prop_7$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A108 (th_holds (= (BitVec 1) (a_var_bv 1 z$108) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$1661) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$24) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A109 (th_holds (= (BitVec 1) (a_var_bv 1 z$839) (ite _ (= (BitVec 1) (a_var_bv 1 s$1662) (a_var_bv 1 z$108)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A50 (th_holds (= (BitVec 1) (a_var_bv 1 z$816) (ite _ (= (BitVec 1) (a_var_bv 1 s$1653) (a_var_bv 1 z$47)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A168 (th_holds (= (BitVec 1) (a_var_bv 1 z$627) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$143$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 prop_5$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A110 (th_holds (= (BitVec 1) (a_var_bv 1 z$104) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$22) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$23) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A112 (th_holds (= (BitVec 1) (a_var_bv 1 z$100) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$73) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$86) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A171 (th_holds (= (BitVec 1) (a_var_bv 1 z$867) (ite _ (= (BitVec 1) (a_var_bv 1 s$143$next) (a_var_bv 1 z$618)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A113 (th_holds (= (BitVec 1) (a_var_bv 1 z$841) (ite _ (= (BitVec 1) (a_var_bv 1 s$22) (a_var_bv 1 z$100)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A116 (th_holds (= (BitVec 1) (a_var_bv 1 z$106) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$74) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$87) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A234 (th_holds (= (BitVec 1) (a_var_bv 1 z$576) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$16$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$21$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A117 (th_holds (= (BitVec 1) (a_var_bv 1 z$843) (ite _ (= (BitVec 1) (a_var_bv 1 s$24) (a_var_bv 1 z$106)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A5 (th_holds (= (BitVec 1) (a_var_bv 1 z$799) (ite _ (= (BitVec 1) (a_var_bv 1 s$146) (a_var_bv 1 z$471)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A120 (th_holds (= (BitVec 1) (a_var_bv 1 z$432) (ite _ (= (BitVec 1) (a_var_bv 1 s$130) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A121 (th_holds (= (BitVec 1) (a_var_bv 1 z$433) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$432) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winX) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A122 (th_holds (= (BitVec 1) (a_var_bv 1 z$845) (ite _ (= (BitVec 1) (a_var_bv 1 prop_3) (a_var_bv 1 z$433)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A123 (th_holds (= (BitVec 1) (a_var_bv 1 z$430) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$129) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$29) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A181 (th_holds (= (BitVec 1) (a_var_bv 1 z$499) (extract 1  3 3 4 (a_var_bv 4 move$next))))
(% A124 (th_holds (= (BitVec 1) (a_var_bv 1 z$846) (ite _ (= (BitVec 1) (a_var_bv 1 s$130) (a_var_bv 1 z$430)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A182 (th_holds (= (BitVec 1) (a_var_bv 1 z$871) (ite _ (= (BitVec 1) (a_var_bv 1 w$18$next) (a_var_bv 1 z$499)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A125 (th_holds (= (BitVec 1) (a_var_bv 1 z$428) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$27) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$28) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A126 (th_holds (= (BitVec 1) (a_var_bv 1 z$847) (ite _ (= (BitVec 1) (a_var_bv 1 s$129) (a_var_bv 1 z$428)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A127 (th_holds (= (BitVec 1) (a_var_bv 1 z$441) (ite _ (= (BitVec 1) (a_var_bv 1 s$132) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A130 (th_holds (= (BitVec 1) (a_var_bv 1 z$439) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$131) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$75) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A16 (th_holds (= (BitVec 1) (a_var_bv 1 z$804) (ite _ (= (BitVec 1) (a_var_bv 1 s$141) (a_var_bv 1 z$426)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A133 (th_holds (= (BitVec 1) (a_var_bv 1 z$850) (ite _ (= (BitVec 1) (a_var_bv 1 s$131) (a_var_bv 1 z$437)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A190 (th_holds (= (BitVec 1) (a_var_bv 1 z$875) (ite _ (= (BitVec 1) (a_var_bv 1 s$1654$next) (a_var_bv 1 z$531)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A135 (th_holds (= (BitVec 1) (a_var_bv 1 z$451) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$450) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winX) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A136 (th_holds (= (BitVec 1) (a_var_bv 1 z$851) (ite _ (= (BitVec 1) (a_var_bv 1 prop_5) (a_var_bv 1 z$451)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A252 (th_holds (= (BitVec 1) (a_var_bv 1 z$572) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$19$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$20$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A137 (th_holds (= (BitVec 1) (a_var_bv 1 z$448) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$133) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$44) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A253 (th_holds (= (BitVec 1) (a_var_bv 1 z$899) (ite _ (= (BitVec 1) (a_var_bv 1 s$1659$next) (a_var_bv 1 z$572)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A138 (th_holds (= (BitVec 1) (a_var_bv 1 z$852) (ite _ (= (BitVec 1) (a_var_bv 1 s$134) (a_var_bv 1 z$448)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A254 (th_holds (= (BitVec 1) (a_var_bv 1 z$566) (ite _ (= (BitVec 2) (a_var_bv 2 |b[7]$next|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A22 (th_holds (= (BitVec 1) (a_var_bv 1 z$414) (extract 1  3 3 4 (a_var_bv 4 move))))
(% A139 (th_holds (= (BitVec 1) (a_var_bv 1 z$446) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$32) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$53) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A259 (th_holds (= (BitVec 1) (a_var_bv 1 z$901) (ite _ (= (BitVec 1) (a_var_bv 1 s$20$next) (a_var_bv 1 z$570)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A27 (th_holds (= (BitVec 1) (a_var_bv 1 z$808) (ite _ (= (BitVec 1) (a_var_bv 1 s$128) (a_var_bv 1 z$423)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A144 (th_holds (= (BitVec 1) (a_var_bv 1 z$457) (ite _ (and (= (BitVec 1) (a_var_bv 1 s$135) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$90) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A260 (th_holds (= (BitVec 1) (a_var_bv 1 z$578) (ite _ (= (BitVec 2) (a_var_bv 2 |b[4]$next|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A145 (th_holds (= (BitVec 1) (a_var_bv 1 z$855) (ite _ (= (BitVec 1) (a_var_bv 1 s$136) (a_var_bv 1 z$457)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A146 (th_holds (= (BitVec 1) (a_var_bv 1 z$455) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$78) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$99) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A147 (th_holds (= (BitVec 1) (a_var_bv 1 z$856) (ite _ (= (BitVec 1) (a_var_bv 1 s$135) (a_var_bv 1 z$455)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A148 (th_holds (= (BitVec 1) (a_var_bv 1 z$468) (ite _ (= (BitVec 1) (a_var_bv 1 s$138) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A263 (th_holds (= (BitVec 1) (a_var_bv 1 z$591) (ite _ (or (= (BitVec 1) (a_var_bv 1 s$1662$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 s$25$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A31 (th_holds (= (BitVec 1) (a_var_bv 1 z$810) (ite _ (= (BitVec 1) (a_var_bv 1 s$1654) (a_var_bv 1 z$51)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A149 (th_holds (= (BitVec 1) (a_var_bv 1 z$469) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$468) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winX) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A264 (th_holds (= (BitVec 1) (a_var_bv 1 z$903) (ite _ (= (BitVec 1) (a_var_bv 1 s$1663$next) (a_var_bv 1 z$591)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A150 (th_holds (= (BitVec 1) (a_var_bv 1 z$857) (ite _ (= (BitVec 1) (a_var_bv 1 prop_7) (a_var_bv 1 z$469)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A268 (th_holds (= (BitVec 1) (a_var_bv 1 z$905) (ite _ (= (BitVec 1) (a_var_bv 1 s$1661$next) (a_var_bv 1 z$583)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A155 (th_holds (= (BitVec 1) (a_var_bv 1 z$477) (ite _ (= (BitVec 1) (a_var_bv 1 s$140) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A156 (th_holds (= (BitVec 1) (a_var_bv 1 z$478) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$477) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winO) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A157 (th_holds (= (BitVec 1) (a_var_bv 1 z$860) (ite _ (= (BitVec 1) (a_var_bv 1 prop_8) (a_var_bv 1 z$478)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A159 (th_holds (= (BitVec 1) (a_var_bv 1 z$861) (ite _ (= (BitVec 1) (a_var_bv 1 s$140) (a_var_bv 1 z$475)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A160 (th_holds (= (BitVec 1) (a_var_bv 1 z$473) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$79) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$87) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A161 (th_holds (= (BitVec 1) (a_var_bv 1 z$862) (ite _ (= (BitVec 1) (a_var_bv 1 s$139) (a_var_bv 1 z$473)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A163 (th_holds (= (BitVec 1) (a_var_bv 1 z$863) (ite _ (= (BitVec 1) (a_var_bv 1 prop0$next) (a_var_bv 1 z$654)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A165 (th_holds (= (BitVec 1) (a_var_bv 1 z$864) (ite _ (= (BitVec 1) (a_var_bv 1 s$146$next) (a_var_bv 1 z$645)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A282 (th_holds (= (BitVec 1) (a_var_bv 1 z$602) (ite _ (and (= (BitVec 1) (a_var_bv 1 z$507) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$508) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A167 (th_holds (= (BitVec 1) (a_var_bv 1 z$865) (ite _ (= (BitVec 1) (a_var_bv 1 s$145$next) (a_var_bv 1 z$636)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A51 (th_holds (= (BitVec 1) (a_var_bv 1 z$41) (ite _ (= (BitVec 2) (a_var_bv 2 |b[7]|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A169 (th_holds (= (BitVec 1) (a_var_bv 1 z$866) (ite _ (= (BitVec 1) (a_var_bv 1 s$144$next) (a_var_bv 1 z$627)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A173 (th_holds (= (BitVec 1) (a_var_bv 1 z$868) (ite _ (= (BitVec 1) (a_var_bv 1 s$142$next) (a_var_bv 1 z$609)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A174 (th_holds (= (BitVec 1) (a_var_bv 1 z$599) (ite _ (= (BitVec 1) (a_var_bv 1 s$128$next) (a_bv 1 (bvc b0  bvn))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A175 (th_holds (= (BitVec 1) (a_var_bv 1 z$600) (ite _ (and (= (BitVec 1) (a_var_bv 1 prop_1$next) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 z$599) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A176 (th_holds (= (BitVec 1) (a_var_bv 1 z$869) (ite _ (= (BitVec 1) (a_var_bv 1 s$141$next) (a_var_bv 1 z$600)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A299 (th_holds (= (BitVec 1) (a_var_bv 1 z$634) (ite _ (or (= (BitVec 1) (a_var_bv 1 z$633) (a_bv 1 (bvc b1  bvn))) (= (BitVec 1) (a_var_bv 1 winO$next) (a_bv 1 (bvc b1  bvn)))) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A183 (th_holds (= (BitVec 3) (a_var_bv 3 z$502) (extract 3  2 0 4 (a_var_bv 4 move$next))))
(% A300 (th_holds (= (BitVec 1) (a_var_bv 1 z$919) (ite _ (= (BitVec 1) (a_var_bv 1 prop_6$next) (a_var_bv 1 z$634)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A184 (th_holds (= (BitVec 1) (a_var_bv 1 z$872) (ite _ (= (BitVec 3) (a_var_bv 3 w$19$next) (a_var_bv 3 z$502)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A314 (th_holds (= (BitVec 1) (a_var_bv 1 z$925) (ite _ (= (BitVec 1) (a_var_bv 1 prop_8$next) (a_var_bv 1 z$652)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A79 (th_holds (= (BitVec 1) (a_var_bv 1 z$73) (ite _ (= (BitVec 2) (a_var_bv 2 |b[0]|) (a_var_bv 2 z$n2s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A196 (th_holds (= (BitVec 1) (a_var_bv 1 z$508) (ite _ (= (BitVec 2) (a_var_bv 2 |b[1]$next|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(% A197 (th_holds (= (BitVec 1) (a_var_bv 1 z$509) (ite _ (= (BitVec 2) (a_var_bv 2 |b[2]$next|) (a_var_bv 2 z$n1s2)) (a_bv 1 (bvc b1  bvn)) (a_bv 1 (bvc b0  bvn)))))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification


(@ letBvc5 (bvc b1 bvn)
(@ letBvc6 (bvc b0 bvn)
(@ letBvc0 (bvc b0 (bvc b0 (bvc b0 bvn)))
(@ letBvc1 (bvc b0 (bvc b1 bvn))
(@ letBvc2 (bvc b1 (bvc b0 bvn))
(@ letBvc3 (bvc b0 (bvc b0 (bvc b0 (bvc b0 bvn))))
(@ letBvc4 (bvc b1 (bvc b0 (bvc b0 (bvc b1 bvn))))

 ;; Printing the global let map
(@ let1 (a_var_bv 3 w$19$next)
(@ let2 (a_var_bv 3 z$n0s3)
(@ let3 (= (BitVec 3) let1 let2)
(@ let4 (a_var_bv 4 imove)
(@ let5 (a_var_bv 4 z$n9s4)
(@ let6 (bvult 4  let4 let5)
(@ let7 (a_bv 3 letBvc0)
(@ let8 (= (BitVec 3) let7 let2)
(@ let9 (a_var_bv 4 move$next)
(@ let10 (extract 1  3 3 4 let9)
(@ let11 (a_var_bv 1 z$499)
(@ let12 (= (BitVec 1) let10 let11)
(@ let13 (extract 3  2 0 4 let9)
(@ let14 (a_var_bv 3 z$502)
(@ let15 (= (BitVec 3) let13 let14)
(@ let16 (= (BitVec 3) let14 let1)
(@ let17 (a_var_bv 4 move$next_rhs)
(@ let18 (= (BitVec 4) let17 let9)
(@ let19 (a_bv 1 letBvc5)
(@ let20 (= (BitVec 1) let19 let11)
(@ let21 (a_var_bv 1 z$736)
(@ let22 (= (BitVec 1) let19 let21)
(@ let23 (a_var_bv 1 z$411)
(@ let24 (= (BitVec 1) let19 let23)
(@ let25 (and let22 let24)
(@ let26 (and let20 let25)
(@ let27 (a_bv 4 letBvc3)
(@ let28 (a_var_bv 4 z$n0s4)
(@ let29 (= (BitVec 4) let27 let28)
(@ let30 (a_var_bv 1 s$154)
(@ let31 (= (BitVec 1) let19 let30)
(@ let32 (a_var_bv 4 z$152)
(@ let33 (= (BitVec 4) let32 let17)
(@ let34 (a_bv 4 letBvc4)
(@ let35 (= (BitVec 4) let34 let5)
(@ let36 (a_var_bv 1 z$150)
(@ let37 (= (BitVec 1) let36 let30)
(@ let38 (a_var_bv 1 z$872)
(@ let39 (= (BitVec 1) let19 let38)
(@ let40 (a_var_bv 1 z$785)
(@ let41 (= (BitVec 1) let19 let40)
(@ let42 (a_var_bv 1 z$928)
(@ let43 (= (BitVec 1) let19 let42)
(@ let44 (a_var_bv 1 z$929)
(@ let45 (= (BitVec 1) let19 let44)
(@ let46 (a_var_bv 1 z$482)
(@ let47 (= (BitVec 1) let19 let46)
(@ let48 (a_var_bv 1 z$656)
(@ let49 (= (BitVec 1) let19 let48)
(@ let50 (a_var_bv 1 z$798)
(@ let51 (= (BitVec 1) let19 let50)
(@ let52 (a_var_bv 1 z$799)
(@ let53 (= (BitVec 1) let19 let52)
(@ let54 (a_var_bv 1 z$800)
(@ let55 (= (BitVec 1) let19 let54)
(@ let56 (a_var_bv 1 z$801)
(@ let57 (= (BitVec 1) let19 let56)
(@ let58 (a_var_bv 1 z$802)
(@ let59 (= (BitVec 1) let19 let58)
(@ let60 (a_var_bv 1 z$803)
(@ let61 (= (BitVec 1) let19 let60)
(@ let62 (a_var_bv 1 z$804)
(@ let63 (= (BitVec 1) let19 let62)
(@ let64 (a_var_bv 1 z$805)
(@ let65 (= (BitVec 1) let19 let64)
(@ let66 (a_var_bv 1 z$806)
(@ let67 (= (BitVec 1) let19 let66)
(@ let68 (a_var_bv 1 z$807)
(@ let69 (= (BitVec 1) let19 let68)
(@ let70 (a_var_bv 1 z$808)
(@ let71 (= (BitVec 1) let19 let70)
(@ let72 (a_var_bv 1 z$809)
(@ let73 (= (BitVec 1) let19 let72)
(@ let74 (a_var_bv 1 z$810)
(@ let75 (= (BitVec 1) let19 let74)
(@ let76 (a_var_bv 1 z$811)
(@ let77 (= (BitVec 1) let19 let76)
(@ let78 (a_var_bv 1 z$812)
(@ let79 (= (BitVec 1) let19 let78)
(@ let80 (a_var_bv 1 z$813)
(@ let81 (= (BitVec 1) let19 let80)
(@ let82 (a_var_bv 1 z$814)
(@ let83 (= (BitVec 1) let19 let82)
(@ let84 (a_var_bv 1 z$815)
(@ let85 (= (BitVec 1) let19 let84)
(@ let86 (a_var_bv 1 z$816)
(@ let87 (= (BitVec 1) let19 let86)
(@ let88 (a_var_bv 1 z$817)
(@ let89 (= (BitVec 1) let19 let88)
(@ let90 (a_var_bv 1 z$818)
(@ let91 (= (BitVec 1) let19 let90)
(@ let92 (a_var_bv 1 z$819)
(@ let93 (= (BitVec 1) let19 let92)
(@ let94 (a_var_bv 1 z$820)
(@ let95 (= (BitVec 1) let19 let94)
(@ let96 (a_var_bv 1 z$821)
(@ let97 (= (BitVec 1) let19 let96)
(@ let98 (a_var_bv 1 z$822)
(@ let99 (= (BitVec 1) let19 let98)
(@ let100 (a_var_bv 1 z$823)
(@ let101 (= (BitVec 1) let19 let100)
(@ let102 (a_var_bv 1 z$824)
(@ let103 (= (BitVec 1) let19 let102)
(@ let104 (a_var_bv 1 z$825)
(@ let105 (= (BitVec 1) let19 let104)
(@ let106 (a_var_bv 1 z$826)
(@ let107 (= (BitVec 1) let19 let106)
(@ let108 (a_var_bv 1 z$827)
(@ let109 (= (BitVec 1) let19 let108)
(@ let110 (a_var_bv 1 z$828)
(@ let111 (= (BitVec 1) let19 let110)
(@ let112 (a_var_bv 1 z$829)
(@ let113 (= (BitVec 1) let19 let112)
(@ let114 (a_var_bv 1 z$830)
(@ let115 (= (BitVec 1) let19 let114)
(@ let116 (a_var_bv 1 z$831)
(@ let117 (= (BitVec 1) let19 let116)
(@ let118 (a_var_bv 1 z$832)
(@ let119 (= (BitVec 1) let19 let118)
(@ let120 (a_var_bv 1 z$833)
(@ let121 (= (BitVec 1) let19 let120)
(@ let122 (a_var_bv 1 z$834)
(@ let123 (= (BitVec 1) let19 let122)
(@ let124 (a_var_bv 1 z$835)
(@ let125 (= (BitVec 1) let19 let124)
(@ let126 (a_var_bv 1 z$836)
(@ let127 (= (BitVec 1) let19 let126)
(@ let128 (a_var_bv 1 z$837)
(@ let129 (= (BitVec 1) let19 let128)
(@ let130 (a_var_bv 1 z$838)
(@ let131 (= (BitVec 1) let19 let130)
(@ let132 (a_var_bv 1 z$839)
(@ let133 (= (BitVec 1) let19 let132)
(@ let134 (a_var_bv 1 z$840)
(@ let135 (= (BitVec 1) let19 let134)
(@ let136 (a_var_bv 1 z$841)
(@ let137 (= (BitVec 1) let19 let136)
(@ let138 (a_var_bv 1 z$842)
(@ let139 (= (BitVec 1) let19 let138)
(@ let140 (a_var_bv 1 z$843)
(@ let141 (= (BitVec 1) let19 let140)
(@ let142 (a_var_bv 1 z$844)
(@ let143 (= (BitVec 1) let19 let142)
(@ let144 (a_var_bv 1 z$845)
(@ let145 (= (BitVec 1) let19 let144)
(@ let146 (a_var_bv 1 z$846)
(@ let147 (= (BitVec 1) let19 let146)
(@ let148 (a_var_bv 1 z$847)
(@ let149 (= (BitVec 1) let19 let148)
(@ let150 (a_var_bv 1 z$848)
(@ let151 (= (BitVec 1) let19 let150)
(@ let152 (a_var_bv 1 z$849)
(@ let153 (= (BitVec 1) let19 let152)
(@ let154 (a_var_bv 1 z$850)
(@ let155 (= (BitVec 1) let19 let154)
(@ let156 (a_var_bv 1 z$851)
(@ let157 (= (BitVec 1) let19 let156)
(@ let158 (a_var_bv 1 z$852)
(@ let159 (= (BitVec 1) let19 let158)
(@ let160 (a_var_bv 1 z$853)
(@ let161 (= (BitVec 1) let19 let160)
(@ let162 (a_var_bv 1 z$854)
(@ let163 (= (BitVec 1) let19 let162)
(@ let164 (a_var_bv 1 z$855)
(@ let165 (= (BitVec 1) let19 let164)
(@ let166 (a_var_bv 1 z$856)
(@ let167 (= (BitVec 1) let19 let166)
(@ let168 (a_var_bv 1 z$857)
(@ let169 (= (BitVec 1) let19 let168)
(@ let170 (a_var_bv 1 z$858)
(@ let171 (= (BitVec 1) let19 let170)
(@ let172 (a_var_bv 1 z$859)
(@ let173 (= (BitVec 1) let19 let172)
(@ let174 (a_var_bv 1 z$860)
(@ let175 (= (BitVec 1) let19 let174)
(@ let176 (a_var_bv 1 z$861)
(@ let177 (= (BitVec 1) let19 let176)
(@ let178 (a_var_bv 1 z$862)
(@ let179 (= (BitVec 1) let19 let178)
(@ let180 (a_var_bv 1 z$863)
(@ let181 (= (BitVec 1) let19 let180)
(@ let182 (a_var_bv 1 z$864)
(@ let183 (= (BitVec 1) let19 let182)
(@ let184 (a_var_bv 1 z$865)
(@ let185 (= (BitVec 1) let19 let184)
(@ let186 (a_var_bv 1 z$866)
(@ let187 (= (BitVec 1) let19 let186)
(@ let188 (a_var_bv 1 z$867)
(@ let189 (= (BitVec 1) let19 let188)
(@ let190 (a_var_bv 1 z$868)
(@ let191 (= (BitVec 1) let19 let190)
(@ let192 (a_var_bv 1 z$869)
(@ let193 (= (BitVec 1) let19 let192)
(@ let194 (a_var_bv 1 z$870)
(@ let195 (= (BitVec 1) let19 let194)
(@ let196 (a_var_bv 1 z$871)
(@ let197 (= (BitVec 1) let19 let196)
(@ let198 (a_var_bv 1 z$873)
(@ let199 (= (BitVec 1) let19 let198)
(@ let200 (a_var_bv 1 z$874)
(@ let201 (= (BitVec 1) let19 let200)
(@ let202 (a_var_bv 1 z$875)
(@ let203 (= (BitVec 1) let19 let202)
(@ let204 (a_var_bv 1 z$876)
(@ let205 (= (BitVec 1) let19 let204)
(@ let206 (a_var_bv 1 z$877)
(@ let207 (= (BitVec 1) let19 let206)
(@ let208 (a_var_bv 1 z$878)
(@ let209 (= (BitVec 1) let19 let208)
(@ let210 (a_var_bv 1 z$879)
(@ let211 (= (BitVec 1) let19 let210)
(@ let212 (a_var_bv 1 z$880)
(@ let213 (= (BitVec 1) let19 let212)
(@ let214 (a_var_bv 1 z$881)
(@ let215 (= (BitVec 1) let19 let214)
(@ let216 (a_var_bv 1 z$882)
(@ let217 (= (BitVec 1) let19 let216)
(@ let218 (a_var_bv 1 z$883)
(@ let219 (= (BitVec 1) let19 let218)
(@ let220 (a_var_bv 1 z$884)
(@ let221 (= (BitVec 1) let19 let220)
(@ let222 (a_var_bv 1 z$885)
(@ let223 (= (BitVec 1) let19 let222)
(@ let224 (a_var_bv 1 z$886)
(@ let225 (= (BitVec 1) let19 let224)
(@ let226 (a_var_bv 1 z$887)
(@ let227 (= (BitVec 1) let19 let226)
(@ let228 (a_var_bv 1 z$888)
(@ let229 (= (BitVec 1) let19 let228)
(@ let230 (a_var_bv 1 z$889)
(@ let231 (= (BitVec 1) let19 let230)
(@ let232 (a_var_bv 1 z$890)
(@ let233 (= (BitVec 1) let19 let232)
(@ let234 (a_var_bv 1 z$891)
(@ let235 (= (BitVec 1) let19 let234)
(@ let236 (a_var_bv 1 z$892)
(@ let237 (= (BitVec 1) let19 let236)
(@ let238 (a_var_bv 1 z$893)
(@ let239 (= (BitVec 1) let19 let238)
(@ let240 (a_var_bv 1 z$894)
(@ let241 (= (BitVec 1) let19 let240)
(@ let242 (a_var_bv 1 z$895)
(@ let243 (= (BitVec 1) let19 let242)
(@ let244 (a_var_bv 1 z$896)
(@ let245 (= (BitVec 1) let19 let244)
(@ let246 (a_var_bv 1 z$897)
(@ let247 (= (BitVec 1) let19 let246)
(@ let248 (a_var_bv 1 z$898)
(@ let249 (= (BitVec 1) let19 let248)
(@ let250 (a_var_bv 1 z$899)
(@ let251 (= (BitVec 1) let19 let250)
(@ let252 (a_var_bv 1 z$900)
(@ let253 (= (BitVec 1) let19 let252)
(@ let254 (a_var_bv 1 z$901)
(@ let255 (= (BitVec 1) let19 let254)
(@ let256 (a_var_bv 1 z$902)
(@ let257 (= (BitVec 1) let19 let256)
(@ let258 (a_var_bv 1 z$903)
(@ let259 (= (BitVec 1) let19 let258)
(@ let260 (a_var_bv 1 z$904)
(@ let261 (= (BitVec 1) let19 let260)
(@ let262 (a_var_bv 1 z$905)
(@ let263 (= (BitVec 1) let19 let262)
(@ let264 (a_var_bv 1 z$906)
(@ let265 (= (BitVec 1) let19 let264)
(@ let266 (a_var_bv 1 z$907)
(@ let267 (= (BitVec 1) let19 let266)
(@ let268 (a_var_bv 1 z$908)
(@ let269 (= (BitVec 1) let19 let268)
(@ let270 (a_var_bv 1 z$909)
(@ let271 (= (BitVec 1) let19 let270)
(@ let272 (a_var_bv 1 z$910)
(@ let273 (= (BitVec 1) let19 let272)
(@ let274 (a_var_bv 1 z$911)
(@ let275 (= (BitVec 1) let19 let274)
(@ let276 (a_var_bv 1 z$912)
(@ let277 (= (BitVec 1) let19 let276)
(@ let278 (a_var_bv 1 z$913)
(@ let279 (= (BitVec 1) let19 let278)
(@ let280 (a_var_bv 1 z$914)
(@ let281 (= (BitVec 1) let19 let280)
(@ let282 (a_var_bv 1 z$915)
(@ let283 (= (BitVec 1) let19 let282)
(@ let284 (a_var_bv 1 z$916)
(@ let285 (= (BitVec 1) let19 let284)
(@ let286 (a_var_bv 1 z$917)
(@ let287 (= (BitVec 1) let19 let286)
(@ let288 (a_var_bv 1 z$918)
(@ let289 (= (BitVec 1) let19 let288)
(@ let290 (a_var_bv 1 z$919)
(@ let291 (= (BitVec 1) let19 let290)
(@ let292 (a_var_bv 1 z$920)
(@ let293 (= (BitVec 1) let19 let292)
(@ let294 (a_var_bv 1 z$921)
(@ let295 (= (BitVec 1) let19 let294)
(@ let296 (a_var_bv 1 z$922)
(@ let297 (= (BitVec 1) let19 let296)
(@ let298 (a_var_bv 1 z$923)
(@ let299 (= (BitVec 1) let19 let298)
(@ let300 (a_var_bv 1 z$924)
(@ let301 (= (BitVec 1) let19 let300)
(@ let302 (a_var_bv 1 z$925)
(@ let303 (= (BitVec 1) let19 let302)
(@ let304 (a_var_bv 1 z$926)
(@ let305 (= (BitVec 1) let19 let304)
(@ let306 (a_var_bv 1 z$927)
(@ let307 (= (BitVec 1) let19 let306)
(@ let308 (and let43 let45)
(@ let309 (and let39 let308)
(@ let310 (and let41 let309)
(@ let311 (and let307 let310)
(@ let312 (and let305 let311)
(@ let313 (and let303 let312)
(@ let314 (and let301 let313)
(@ let315 (and let299 let314)
(@ let316 (and let297 let315)
(@ let317 (and let295 let316)
(@ let318 (and let293 let317)
(@ let319 (and let291 let318)
(@ let320 (and let289 let319)
(@ let321 (and let287 let320)
(@ let322 (and let285 let321)
(@ let323 (and let283 let322)
(@ let324 (and let281 let323)
(@ let325 (and let279 let324)
(@ let326 (and let277 let325)
(@ let327 (and let275 let326)
(@ let328 (and let273 let327)
(@ let329 (and let271 let328)
(@ let330 (and let269 let329)
(@ let331 (and let267 let330)
(@ let332 (and let265 let331)
(@ let333 (and let263 let332)
(@ let334 (and let261 let333)
(@ let335 (and let259 let334)
(@ let336 (and let257 let335)
(@ let337 (and let255 let336)
(@ let338 (and let253 let337)
(@ let339 (and let251 let338)
(@ let340 (and let249 let339)
(@ let341 (and let247 let340)
(@ let342 (and let245 let341)
(@ let343 (and let243 let342)
(@ let344 (and let241 let343)
(@ let345 (and let239 let344)
(@ let346 (and let237 let345)
(@ let347 (and let235 let346)
(@ let348 (and let233 let347)
(@ let349 (and let231 let348)
(@ let350 (and let229 let349)
(@ let351 (and let227 let350)
(@ let352 (and let225 let351)
(@ let353 (and let223 let352)
(@ let354 (and let221 let353)
(@ let355 (and let219 let354)
(@ let356 (and let217 let355)
(@ let357 (and let215 let356)
(@ let358 (and let213 let357)
(@ let359 (and let211 let358)
(@ let360 (and let209 let359)
(@ let361 (and let207 let360)
(@ let362 (and let205 let361)
(@ let363 (and let203 let362)
(@ let364 (and let201 let363)
(@ let365 (and let199 let364)
(@ let366 (and let39 let365)
(@ let367 (and let197 let366)
(@ let368 (and let195 let367)
(@ let369 (and let193 let368)
(@ let370 (and let191 let369)
(@ let371 (and let189 let370)
(@ let372 (and let187 let371)
(@ let373 (and let185 let372)
(@ let374 (and let183 let373)
(@ let375 (and let181 let374)
(@ let376 (and let179 let375)
(@ let377 (and let177 let376)
(@ let378 (and let175 let377)
(@ let379 (and let173 let378)
(@ let380 (and let171 let379)
(@ let381 (and let169 let380)
(@ let382 (and let167 let381)
(@ let383 (and let165 let382)
(@ let384 (and let163 let383)
(@ let385 (and let161 let384)
(@ let386 (and let159 let385)
(@ let387 (and let157 let386)
(@ let388 (and let155 let387)
(@ let389 (and let153 let388)
(@ let390 (and let151 let389)
(@ let391 (and let149 let390)
(@ let392 (and let147 let391)
(@ let393 (and let145 let392)
(@ let394 (and let143 let393)
(@ let395 (and let141 let394)
(@ let396 (and let139 let395)
(@ let397 (and let137 let396)
(@ let398 (and let135 let397)
(@ let399 (and let133 let398)
(@ let400 (and let131 let399)
(@ let401 (and let129 let400)
(@ let402 (and let127 let401)
(@ let403 (and let125 let402)
(@ let404 (and let123 let403)
(@ let405 (and let121 let404)
(@ let406 (and let119 let405)
(@ let407 (and let117 let406)
(@ let408 (and let115 let407)
(@ let409 (and let113 let408)
(@ let410 (and let111 let409)
(@ let411 (and let109 let410)
(@ let412 (and let107 let411)
(@ let413 (and let105 let412)
(@ let414 (and let103 let413)
(@ let415 (and let101 let414)
(@ let416 (and let99 let415)
(@ let417 (and let97 let416)
(@ let418 (and let95 let417)
(@ let419 (and let93 let418)
(@ let420 (and let91 let419)
(@ let421 (and let89 let420)
(@ let422 (and let87 let421)
(@ let423 (and let85 let422)
(@ let424 (and let83 let423)
(@ let425 (and let81 let424)
(@ let426 (and let79 let425)
(@ let427 (and let77 let426)
(@ let428 (and let75 let427)
(@ let429 (and let73 let428)
(@ let430 (and let71 let429)
(@ let431 (and let69 let430)
(@ let432 (and let67 let431)
(@ let433 (and let65 let432)
(@ let434 (and let63 let433)
(@ let435 (and let61 let434)
(@ let436 (and let59 let435)
(@ let437 (and let57 let436)
(@ let438 (and let55 let437)
(@ let439 (and let53 let438)
(@ let440 (and let51 let439)
(@ let441 (and let49 let440)
(@ let442 (and let47 let441)
(@ let443 (a_var_bv 1 z$931)
(@ let444 (= (BitVec 1) let19 let443)
(@ let445 (a_var_bv 1 termITE_178)
(@ let446 (a_bv 1 letBvc6)
(@ let447 (= (BitVec 1) let445 let446)
(@ let448 (= (BitVec 1) let445 let19)
(@ let449 (= (BitVec 1) let445 let38)
(@ let450 (a_var_bv 1 termITE_313)
(@ let451 (= (BitVec 1) let450 let19)
(@ let452 (= (BitVec 1) let450 let446)
(@ let453 (= (BitVec 1) let450 let21)
(@ let454 (a_var_bv 1 termITE_314)
(@ let455 (= (BitVec 1) let454 let446)
(@ let456 (= (BitVec 1) let454 let19)
(@ let457 (= (BitVec 1) let454 let23)
(@ let458 (a_var_bv 1 termITE_315)
(@ let459 (= (BitVec 1) let458 let446)
(@ let460 (= (BitVec 1) let458 let19)
(@ let461 (= (BitVec 1) let458 let40)
(@ let462 (a_var_bv 4 termITE_316)
(@ let463 (= (BitVec 4) let462 let28)
(@ let464 (= (BitVec 4) let462 let4)
(@ let465 (= (BitVec 4) let462 let32)
(@ let466 (a_var_bv 1 termITE_317)
(@ let467 (= (BitVec 1) let466 let446)
(@ let468 (= (BitVec 1) let466 let19)
(@ let469 (= (BitVec 1) let466 let42)
(@ let470 (a_var_bv 1 termITE_318)
(@ let471 (= (BitVec 1) let470 let446)
(@ let472 (= (BitVec 1) let470 let19)
(@ let473 (= (BitVec 1) let470 let36)
(@ let474 (a_var_bv 1 termITE_319)
(@ let475 (= (BitVec 1) let474 let446)
(@ let476 (= (BitVec 1) let474 let19)
(@ let477 (= (BitVec 1) let474 let44)
(@ let478 (a_var_bv 1 termITE_320)
(@ let479 (= (BitVec 1) let478 let446)
(@ let480 (= (BitVec 1) let478 let19)
(@ let481 (= (BitVec 1) let478 let443)
(@ let482 true
(@ let483 false
(@ let484 (bitof z$n0s3 0)
(@ let485 (bitof z$n0s3 1)
(@ let486 (bitof z$n0s3 2)
(@ let487 (iff let483 let484)
(@ let488 (iff let483 let485)
(@ let489 (iff let483 let486)
(@ let490 (and let488 let489)
(@ let491 (and let487 let490)
(@ let492 (bitof move$next 0)
(@ let493 (bitof move$next 1)
(@ let494 (bitof move$next 2)
(@ let495 (bitof move$next 3)
(@ let496 (bitof z$499 0)
(@ let497 (iff let495 let496)
(@ let498 (bitof z$502 0)
(@ let499 (bitof z$502 1)
(@ let500 (bitof z$502 2)
(@ let501 (iff let492 let498)
(@ let502 (iff let493 let499)
(@ let503 (iff let494 let500)
(@ let504 (and let502 let503)
(@ let505 (and let501 let504)
(@ let506 (bitof termITE_178 0)
(@ let507 (bitof z$872 0)
(@ let508 (iff let506 let507)
(@ let509 (bitof termITE_313 0)
(@ let510 (bitof z$736 0)
(@ let511 (iff let509 let510)
(@ let512 (bitof termITE_314 0)
(@ let513 (bitof z$411 0)
(@ let514 (iff let512 let513)
(@ let515 (bitof termITE_315 0)
(@ let516 (bitof z$785 0)
(@ let517 (iff let515 let516)
(@ let518 (bitof z$n0s4 3)
(@ let519 (iff let483 let518)
(@ let520 (bitof z$n0s4 0)
(@ let521 (iff let483 let520)
(@ let522 (bitof z$n0s4 1)
(@ let523 (iff let483 let522)
(@ let524 (bitof z$n0s4 2)
(@ let525 (iff let483 let524)
(@ let526 (and let525 let519)
(@ let527 (and let523 let526)
(@ let528 (and let521 let527)
(@ let529 (bitof termITE_316 0)
(@ let530 (bitof termITE_316 1)
(@ let531 (bitof termITE_316 2)
(@ let532 (bitof termITE_316 3)
(@ let533 (bitof z$152 0)
(@ let534 (bitof z$152 1)
(@ let535 (bitof z$152 2)
(@ let536 (bitof z$152 3)
(@ let537 (iff let529 let533)
(@ let538 (iff let530 let534)
(@ let539 (iff let531 let535)
(@ let540 (iff let532 let536)
(@ let541 (and let539 let540)
(@ let542 (and let538 let541)
(@ let543 (and let537 let542)
(@ let544 (bitof termITE_317 0)
(@ let545 (bitof z$928 0)
(@ let546 (iff let544 let545)
(@ let547 (bitof z$n9s4 1)
(@ let548 (bitof z$n9s4 2)
(@ let549 (iff let483 let547)
(@ let550 (iff let483 let548)
(@ let551 (bitof z$n9s4 0)
(@ let552 (iff let482 let551)
(@ let553 (bitof z$n9s4 3)
(@ let554 (iff let482 let553)
(@ let555 (and let550 let554)
(@ let556 (and let549 let555)
(@ let557 (and let552 let556)
(@ let558 (bitof termITE_318 0)
(@ let559 (bitof z$150 0)
(@ let560 (iff let558 let559)
(@ let561 (bitof termITE_319 0)
(@ let562 (bitof z$929 0)
(@ let563 (iff let561 let562)
(@ let564 (bitof termITE_320 0)
(@ let565 (bitof z$931 0)
(@ let566 (iff let564 let565)
(@ let567 (iff let482 let565)
(@ let568 (bitof w$19$next 0)
(@ let569 (bitof w$19$next 1)
(@ let570 (bitof w$19$next 2)
(@ let571 (iff let568 let484)
(@ let572 (iff let569 let485)
(@ let573 (iff let570 let486)
(@ let574 (and let572 let573)
(@ let575 (and let571 let574)
(@ let576 (iff let498 let568)
(@ let577 (iff let499 let569)
(@ let578 (iff let500 let570)
(@ let579 (and let577 let578)
(@ let580 (and let576 let579)
(@ let581 (iff let506 let483)
(@ let582 (iff let509 let483)
(@ let583 (bitof move$next_rhs 0)
(@ let584 (bitof move$next_rhs 1)
(@ let585 (bitof move$next_rhs 2)
(@ let586 (bitof move$next_rhs 3)
(@ let587 (iff let583 let492)
(@ let588 (iff let584 let493)
(@ let589 (iff let585 let494)
(@ let590 (iff let586 let495)
(@ let591 (and let589 let590)
(@ let592 (and let588 let591)
(@ let593 (and let587 let592)
(@ let594 (iff let512 let483)
(@ let595 (iff let482 let496)
(@ let596 (iff let482 let510)
(@ let597 (iff let482 let513)
(@ let598 (iff let515 let483)
(@ let599 (bitof s$154 0)
(@ let600 (iff let482 let599)
(@ let601 (bitof imove 0)
(@ let602 (bitof imove 1)
(@ let603 (bitof imove 2)
(@ let604 (bitof imove 3)
(@ let605 (iff let529 let601)
(@ let606 (iff let530 let602)
(@ let607 (iff let531 let603)
(@ let608 (iff let532 let604)
(@ let609 (and let607 let608)
(@ let610 (and let606 let609)
(@ let611 (and let605 let610)
(@ let612 (iff let532 let518)
(@ let613 (iff let529 let520)
(@ let614 (iff let530 let522)
(@ let615 (iff let531 let524)
(@ let616 (and let615 let612)
(@ let617 (and let614 let616)
(@ let618 (and let613 let617)
(@ let619 (iff let533 let583)
(@ let620 (iff let534 let584)
(@ let621 (iff let535 let585)
(@ let622 (iff let536 let586)
(@ let623 (and let621 let622)
(@ let624 (and let620 let623)
(@ let625 (and let619 let624)
(@ let626 (iff let544 let483)
(@ let627 (not let601)
(@ let628 (and let627 let551)
(@ let629 (not let602)
(@ let630 (and let629 let547)
(@ let631 (iff let602 let547)
(@ let632 (and let631 let628)
(@ let633 (or let632 let630)
(@ let634 (not let603)
(@ let635 (and let634 let548)
(@ let636 (iff let603 let548)
(@ let637 (and let636 let633)
(@ let638 (or let637 let635)
(@ let639 (not let604)
(@ let640 (and let639 let553)
(@ let641 (iff let604 let553)
(@ let642 (and let641 let638)
(@ let643 (or let642 let640)
(@ let644 (iff let558 let483)
(@ let645 (iff let559 let599)
(@ let646 (iff let561 let483)
(@ let647 (iff let482 let507)
(@ let648 (iff let482 let516)
(@ let649 (iff let482 let545)
(@ let650 (iff let482 let562)
(@ let651 (iff let564 let483)

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (= (BitVec 1) let454 let23)) (\ .PA5105
(th_let_pf _ (trust_f (= (BitVec 1) let478 let443)) (\ .PA5135
(th_let_pf _ (trust_f (ifte let3 let452 let451)) (\ .PA5099
(th_let_pf _ (trust_f (= (BitVec 1) let19 let443)) (\ .PA3535
(th_let_pf _ (trust_f (ifte let442 let480 let479)) (\ .PA5134
(th_let_pf _ (trust_f (ifte let26 let460 let459)) (\ .PA5109
(th_let_pf _ (trust_f (= (BitVec 3) let7 let2)) (\ .PA2119
(th_let_pf _ (trust_f (= (BitVec 1) let474 let44)) (\ .PA5130
(th_let_pf _ (trust_f (= (BitVec 1) let445 let38)) (\ .PA4425
(th_let_pf _ (trust_f (= (BitVec 3) let13 let14)) (\ .PA2812
(th_let_pf _ (trust_f (= (BitVec 4) let462 let32)) (\ .PA5115
(th_let_pf _ (trust_f (= (BitVec 1) let450 let21)) (\ .PA5100
(th_let_pf _ (trust_f (ifte let31 let464 let463)) (\ .PA5114
(th_let_pf _ (trust_f (= (BitVec 1) let470 let36)) (\ .PA5125
(th_let_pf _ (trust_f (ifte let6 let472 let471)) (\ .PA5124
(th_let_pf _ (trust_f (ifte let18 let456 let455)) (\ .PA5104
(th_let_pf _ (trust_f (ifte let33 let468 let467)) (\ .PA5119
(th_let_pf _ (trust_f (= (BitVec 1) let466 let42)) (\ .PA5120
(th_let_pf _ (trust_f (= (BitVec 4) let27 let28)) (\ .PA3381
(th_let_pf _ (trust_f (= (BitVec 4) let34 let5)) (\ .PA3390
(th_let_pf _ (trust_f (ifte let16 let448 let447)) (\ .PA4424
(th_let_pf _ (trust_f (ifte let37 let476 let475)) (\ .PA5129
(th_let_pf _ (trust_f (= (BitVec 1) let458 let40)) (\ .PA5110
(th_let_pf _ (trust_f (= (BitVec 1) let10 let11)) (\ .PA2807

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let3 (\ .v947 (\ .a947
(decl_atom let6 (\ .v1449 (\ .a1449
(decl_atom let8 (\ .v20 (\ .a20
(decl_atom let12 (\ .v183 (\ .a183
(decl_atom let15 (\ .v185 (\ .a185
(decl_atom let16 (\ .v961 (\ .a961
(decl_atom let18 (\ .v1434 (\ .a1434
(decl_atom let20 (\ .v1437 (\ .a1437
(decl_atom let22 (\ .v1438 (\ .a1438
(decl_atom let24 (\ .v1439 (\ .a1439
(decl_atom let26 (\ .v1440 (\ .a1440
(decl_atom let29 (\ .v324 (\ .a324
(decl_atom let31 (\ .v1443 (\ .a1443
(decl_atom let33 (\ .v1446 (\ .a1446
(decl_atom let35 (\ .v327 (\ .a327
(decl_atom let37 (\ .v1452 (\ .a1452
(decl_atom let39 (\ .v1531 (\ .a1531
(decl_atom let41 (\ .v1587 (\ .a1587
(decl_atom let43 (\ .v1588 (\ .a1588
(decl_atom let45 (\ .v1589 (\ .a1589
(decl_atom let442 (\ .v1590 (\ .a1590
(decl_atom let444 (\ .v331 (\ .a331
(decl_atom let447 (\ .v963 (\ .a963
(decl_atom let448 (\ .v962 (\ .a962
(decl_atom let449 (\ .v186 (\ .a186
(decl_atom let451 (\ .v1433 (\ .a1433
(decl_atom let452 (\ .v1432 (\ .a1432
(decl_atom let453 (\ .v321 (\ .a321
(decl_atom let455 (\ .v1436 (\ .a1436
(decl_atom let456 (\ .v1435 (\ .a1435
(decl_atom let457 (\ .v322 (\ .a322
(decl_atom let459 (\ .v1442 (\ .a1442
(decl_atom let460 (\ .v1441 (\ .a1441
(decl_atom let461 (\ .v323 (\ .a323
(decl_atom let463 (\ .v1445 (\ .a1445
(decl_atom let464 (\ .v1444 (\ .a1444
(decl_atom let465 (\ .v325 (\ .a325
(decl_atom let467 (\ .v1448 (\ .a1448
(decl_atom let468 (\ .v1447 (\ .a1447
(decl_atom let469 (\ .v326 (\ .a326
(decl_atom let471 (\ .v1451 (\ .a1451
(decl_atom let472 (\ .v1450 (\ .a1450
(decl_atom let473 (\ .v328 (\ .a328
(decl_atom let475 (\ .v1454 (\ .a1454
(decl_atom let476 (\ .v1453 (\ .a1453
(decl_atom let477 (\ .v329 (\ .a329
(decl_atom let479 (\ .v1592 (\ .a1592
(decl_atom let480 (\ .v1591 (\ .a1591
(decl_atom let481 (\ .v330 (\ .a330
(satlem _ _ (asf _ _ _ .a20 (\ .l40 (clausify_false (contra _ .PA2119 .l40)))) (\ .pb22
(satlem _ _ (asf _ _ _ .a327 (\ .l654 (clausify_false (contra _ .PA3390 .l654)))) (\ .pb329
(satlem _ _ (asf _ _ _ .a186 (\ .l372 (clausify_false (contra _ .PA4425 .l372)))) (\ .pb188
(satlem _ _ (asf _ _ _ .a961 (\ .l1922 (asf _ _ _ .a963 (\ .l1926 (clausify_false (contra _ (or_elim_1 _ _ .l1922 (ite_elim_2 _ _ _ .PA4424)) .l1926)))))) (\ .pb902
(satlem _ _ (asf _ _ _ .a321 (\ .l642 (clausify_false (contra _ .PA5100 .l642)))) (\ .pb323
(satlem _ _ (asf _ _ _ .a1438 (\ .l2876 (ast _ _ _ .a1440 (\ .l2881 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ .l2881)) .l2876)))))) (\ .pb1341
(satlem _ _ (asf _ _ _ .a1531 (\ .l3062 (ast _ _ _ .a1590 (\ .l3181 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ .l3181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) .l3062)))))) (\ .pb1430
(satlem _ _ (ast _ _ _ .a947 (\ .l1895 (asf _ _ _ .a1432 (\ .l2864 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ .l1895) (ite_elim_1 _ _ _ .PA5099)) .l2864)))))) (\ .pb1336
(satlem _ _ (asf _ _ _ .a323 (\ .l646 (clausify_false (contra _ .PA5110 .l646)))) (\ .pb325
(satlem _ _ (asf _ _ _ .a330 (\ .l660 (clausify_false (contra _ .PA5135 .l660)))) (\ .pb332
(satlem _ _ (asf _ _ _ .a322 (\ .l644 (clausify_false (contra _ .PA5105 .l644)))) (\ .pb324
(satlem _ _ (asf _ _ _ .a1439 (\ .l2878 (ast _ _ _ .a1440 (\ .l2881 (clausify_false (contra _ (and_elim_2 _ _ (and_elim_2 _ _ .l2881)) .l2878)))))) (\ .pb1342
(satlem _ _ (asf _ _ _ .a328 (\ .l656 (clausify_false (contra _ .PA5125 .l656)))) (\ .pb330
(satlem _ _ (asf _ _ _ .a1590 (\ .l3180 (asf _ _ _ .a1592 (\ .l3184 (clausify_false (contra _ (or_elim_1 _ _ .l3180 (ite_elim_2 _ _ _ .PA5134)) .l3184)))))) (\ .pb1492
(satlem _ _ (asf _ _ _ .a1449 (\ .l2898 (asf _ _ _ .a1451 (\ .l2902 (clausify_false (contra _ (or_elim_1 _ _ .l2898 (ite_elim_2 _ _ _ .PA5124)) .l2902)))))) (\ .pb1351
(satlem _ _ (asf _ _ _ .a1589 (\ .l3178 (ast _ _ _ .a1590 (\ .l3181 (clausify_false (contra _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ .l3181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) .l3178)))))) (\ .pb1489
(satlem _ _ (asf _ _ _ .a1434 (\ .l2868 (asf _ _ _ .a1436 (\ .l2872 (clausify_false (contra _ (or_elim_1 _ _ .l2868 (ite_elim_2 _ _ _ .PA5104)) .l2872)))))) (\ .pb1339
(satlem _ _ (asf _ _ _ .a325 (\ .l650 (clausify_false (contra _ .PA5115 .l650)))) (\ .pb327
(satlem _ _ (asf _ _ _ .a331 (\ .l662 (clausify_false (contra _ .PA3535 .l662)))) (\ .pb333
(satlem _ _ (asf _ _ _ .a1587 (\ .l3174 (ast _ _ _ .a1590 (\ .l3181 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ .l3181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) .l3174)))))) (\ .pb1486
(satlem _ _ (asf _ _ _ .a1440 (\ .l2880 (asf _ _ _ .a1442 (\ .l2884 (clausify_false (contra _ (or_elim_1 _ _ .l2880 (ite_elim_2 _ _ _ .PA5109)) .l2884)))))) (\ .pb1345
(satlem _ _ (asf _ _ _ .a1437 (\ .l2874 (ast _ _ _ .a1440 (\ .l2881 (clausify_false (contra _ (and_elim_1 _ _ .l2881) .l2874)))))) (\ .pb1340
(satlem _ _ (asf _ _ _ .a185 (\ .l370 (clausify_false (contra _ .PA2812 .l370)))) (\ .pb187
(satlem _ _ (asf _ _ _ .a326 (\ .l652 (clausify_false (contra _ .PA5120 .l652)))) (\ .pb328
(satlem _ _ (asf _ _ _ .a1446 (\ .l2892 (asf _ _ _ .a1448 (\ .l2896 (clausify_false (contra _ (or_elim_1 _ _ .l2892 (ite_elim_2 _ _ _ .PA5119)) .l2896)))))) (\ .pb1349
(satlem _ _ (asf _ _ _ .a1443 (\ .l2886 (asf _ _ _ .a1445 (\ .l2890 (clausify_false (contra _ (or_elim_1 _ _ .l2886 (ite_elim_2 _ _ _ .PA5114)) .l2890)))))) (\ .pb1347
(satlem _ _ (asf _ _ _ .a1588 (\ .l3176 (ast _ _ _ .a1590 (\ .l3181 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ .l3181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) .l3176)))))) (\ .pb1488
(satlem _ _ (asf _ _ _ .a324 (\ .l648 (clausify_false (contra _ .PA3381 .l648)))) (\ .pb326
(satlem _ _ (asf _ _ _ .a183 (\ .l366 (clausify_false (contra _ .PA2807 .l366)))) (\ .pb185
(satlem _ _ (asf _ _ _ .a1452 (\ .l2904 (asf _ _ _ .a1454 (\ .l2908 (clausify_false (contra _ (or_elim_1 _ _ .l2904 (ite_elim_2 _ _ _ .PA5129)) .l2908)))))) (\ .pb1353
(satlem _ _ (asf _ _ _ .a329 (\ .l658 (clausify_false (contra _ .PA5130 .l658)))) (\ .pb331
(satlem _ _ (asf _ _ _ .a1444 (\ .l2888 (ast _ _ _ .a1443 (\ .l2887 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ .l2887) (ite_elim_1 _ _ _ .PA5114)) .l2888)))))) (\ .pb1346
 ;; Theory Lemmas 

;; BB atom mapping

(decl_bblast _ _ _ (bv_bbl_var 1 termITE_1 _)(\ bt3536
(decl_bblast _ _ _ (bv_bbl_var 1 z$482 _)(\ bt250
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_2 _)(\ bt3541
(decl_bblast _ _ _ (bv_bbl_var 1 z$656 _)(\ bt253
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_3 _)(\ bt3546
(decl_bblast _ _ _ (bv_bbl_var 1 z$480 _)(\ bt256
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_4 _)(\ bt3551
(decl_bblast _ _ _ (bv_bbl_var 1 z$798 _)(\ bt257
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_5 _)(\ bt3556
(decl_bblast _ _ _ (bv_bbl_var 1 z$471 _)(\ bt260
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_6 _)(\ bt3561
(decl_bblast _ _ _ (bv_bbl_var 1 z$799 _)(\ bt261
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_7 _)(\ bt3566
(decl_bblast _ _ _ (bv_bbl_var 1 z$462 _)(\ bt264
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_8 _)(\ bt3571
(decl_bblast _ _ _ (bv_bbl_var 1 z$800 _)(\ bt265
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_9 _)(\ bt3576
(decl_bblast _ _ _ (bv_bbl_var 1 z$453 _)(\ bt268
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_10 _)(\ bt3581
(decl_bblast _ _ _ (bv_bbl_var 1 z$801 _)(\ bt269
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_11 _)(\ bt3586
(decl_bblast _ _ _ (bv_bbl_var 1 z$444 _)(\ bt272
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_12 _)(\ bt3591
(decl_bblast _ _ _ (bv_bbl_var 1 z$802 _)(\ bt273
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_13 _)(\ bt3596
(decl_bblast _ _ _ (bv_bbl_var 1 z$435 _)(\ bt276
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_14 _)(\ bt3601
(decl_bblast _ _ _ (bv_bbl_var 1 z$803 _)(\ bt277
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_15 _)(\ bt3606
(decl_bblast _ _ _ (bv_bbl_var 1 z$425 _)(\ bt279
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_16 _)(\ bt3611
(decl_bblast _ _ _ (bv_bbl_var 1 z$426 _)(\ bt281
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_17 _)(\ bt3616
(decl_bblast _ _ _ (bv_bbl_var 1 z$804 _)(\ bt282
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_18 _)(\ bt3621
(decl_bblast _ _ _ (bv_bbl_var 1 z$416 _)(\ bt284
(decl_bblast _ _ _ (bv_bbl_const 3 _ letBvc0)(\ bt822
(decl_bblast _ _ _ (bv_bbl_var 3 z$n0s3 _)(\ bt286
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_19 _)(\ bt3626
(decl_bblast _ _ _ (bv_bbl_var 1 z$420 _)(\ bt288
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_20 _)(\ bt3631
(decl_bblast _ _ _ (bv_bbl_var 1 z$421 _)(\ bt289
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_21 _)(\ bt3636
(decl_bblast _ _ _ (bv_bbl_var 1 z$805 _)(\ bt290
(decl_bblast _ _ _ (bv_bbl_var 4 move _)(\ bt292
(decl_bblast _ _ _ (bv_bbl_extract 1 3 3  _ _ _ _ bt292)(\ bt837
(decl_bblast _ _ _ (bv_bbl_var 1 z$414 _)(\ bt293
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_22 _)(\ bt3641
(decl_bblast _ _ _ (bv_bbl_var 1 z$806 _)(\ bt294
(decl_bblast _ _ _ (bv_bbl_extract 3 2 0  _ _ _ _ bt292)(\ bt843
(decl_bblast _ _ _ (bv_bbl_var 3 z$417 _)(\ bt295
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_23 _)(\ bt3646
(decl_bblast _ _ _ (bv_bbl_var 1 z$807 _)(\ bt296
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_24 _)(\ bt3651
(decl_bblast _ _ _ (bv_bbl_var 1 z$423 _)(\ bt299
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_25 _)(\ bt3656
(decl_bblast _ _ _ (bv_bbl_var 1 z$808 _)(\ bt300
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_26 _)(\ bt3661
(decl_bblast _ _ _ (bv_bbl_var 1 z$70 _)(\ bt303
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_27 _)(\ bt3666
(decl_bblast _ _ _ (bv_bbl_var 1 z$809 _)(\ bt304
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_28 _)(\ bt3671
(decl_bblast _ _ _ (bv_bbl_var 1 z$51 _)(\ bt307
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_29 _)(\ bt3676
(decl_bblast _ _ _ (bv_bbl_var 1 z$810 _)(\ bt308
(decl_bblast _ _ _ (bv_bbl_const 2 _ letBvc1)(\ bt872
(decl_bblast _ _ _ (bv_bbl_var 2 z$n1s2 _)(\ bt310
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_30 _)(\ bt3681
(decl_bblast _ _ _ (bv_bbl_var 1 z$27 _)(\ bt312
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_31 _)(\ bt3686
(decl_bblast _ _ _ (bv_bbl_var 1 z$38 _)(\ bt314
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_32 _)(\ bt3691
(decl_bblast _ _ _ (bv_bbl_var 1 z$811 _)(\ bt315
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_33 _)(\ bt3696
(decl_bblast _ _ _ (bv_bbl_var 1 z$36 _)(\ bt318
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_34 _)(\ bt3701
(decl_bblast _ _ _ (bv_bbl_var 1 z$812 _)(\ bt319
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_35 _)(\ bt3706
(decl_bblast _ _ _ (bv_bbl_var 1 z$28 _)(\ bt321
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_36 _)(\ bt3711
(decl_bblast _ _ _ (bv_bbl_var 1 z$29 _)(\ bt323
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_37 _)(\ bt3716
(decl_bblast _ _ _ (bv_bbl_var 1 z$30 _)(\ bt324
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_38 _)(\ bt3721
(decl_bblast _ _ _ (bv_bbl_var 1 z$813 _)(\ bt325
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_39 _)(\ bt3726
(decl_bblast _ _ _ (bv_bbl_var 1 z$32 _)(\ bt327
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_40 _)(\ bt3731
(decl_bblast _ _ _ (bv_bbl_var 1 z$33 _)(\ bt329
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_41 _)(\ bt3736
(decl_bblast _ _ _ (bv_bbl_var 1 z$34 _)(\ bt330
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_42 _)(\ bt3741
(decl_bblast _ _ _ (bv_bbl_var 1 z$814 _)(\ bt331
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_43 _)(\ bt3746
(decl_bblast _ _ _ (bv_bbl_var 1 z$40 _)(\ bt333
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_44 _)(\ bt3751
(decl_bblast _ _ _ (bv_bbl_var 1 z$49 _)(\ bt335
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_45 _)(\ bt3756
(decl_bblast _ _ _ (bv_bbl_var 1 z$815 _)(\ bt336
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_46 _)(\ bt3761
(decl_bblast _ _ _ (bv_bbl_var 1 z$47 _)(\ bt339
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_47 _)(\ bt3766
(decl_bblast _ _ _ (bv_bbl_var 1 z$816 _)(\ bt340
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_48 _)(\ bt3771
(decl_bblast _ _ _ (bv_bbl_var 1 z$41 _)(\ bt342
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_49 _)(\ bt3776
(decl_bblast _ _ _ (bv_bbl_var 1 z$42 _)(\ bt343
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_50 _)(\ bt3781
(decl_bblast _ _ _ (bv_bbl_var 1 z$817 _)(\ bt344
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_51 _)(\ bt3786
(decl_bblast _ _ _ (bv_bbl_var 1 z$44 _)(\ bt346
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_52 _)(\ bt3791
(decl_bblast _ _ _ (bv_bbl_var 1 z$45 _)(\ bt347
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_53 _)(\ bt3796
(decl_bblast _ _ _ (bv_bbl_var 1 z$818 _)(\ bt348
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_54 _)(\ bt3801
(decl_bblast _ _ _ (bv_bbl_var 1 z$53 _)(\ bt350
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_55 _)(\ bt3806
(decl_bblast _ _ _ (bv_bbl_var 1 z$68 _)(\ bt352
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_56 _)(\ bt3811
(decl_bblast _ _ _ (bv_bbl_var 1 z$819 _)(\ bt353
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_57 _)(\ bt3816
(decl_bblast _ _ _ (bv_bbl_var 1 z$66 _)(\ bt356
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_58 _)(\ bt3821
(decl_bblast _ _ _ (bv_bbl_var 1 z$820 _)(\ bt357
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_59 _)(\ bt3826
(decl_bblast _ _ _ (bv_bbl_var 1 z$62 _)(\ bt360
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_60 _)(\ bt3831
(decl_bblast _ _ _ (bv_bbl_var 1 z$821 _)(\ bt361
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_61 _)(\ bt3836
(decl_bblast _ _ _ (bv_bbl_var 1 z$58 _)(\ bt364
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_62 _)(\ bt3841
(decl_bblast _ _ _ (bv_bbl_var 1 z$822 _)(\ bt365
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_63 _)(\ bt3846
(decl_bblast _ _ _ (bv_bbl_var 1 z$54 _)(\ bt366
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_64 _)(\ bt3851
(decl_bblast _ _ _ (bv_bbl_var 1 z$823 _)(\ bt367
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_65 _)(\ bt3856
(decl_bblast _ _ _ (bv_bbl_var 1 z$56 _)(\ bt368
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_66 _)(\ bt3861
(decl_bblast _ _ _ (bv_bbl_var 1 z$824 _)(\ bt369
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_67 _)(\ bt3866
(decl_bblast _ _ _ (bv_bbl_var 1 z$60 _)(\ bt370
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_68 _)(\ bt3871
(decl_bblast _ _ _ (bv_bbl_var 1 z$825 _)(\ bt371
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_69 _)(\ bt3876
(decl_bblast _ _ _ (bv_bbl_var 1 z$64 _)(\ bt372
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_70 _)(\ bt3881
(decl_bblast _ _ _ (bv_bbl_var 1 z$826 _)(\ bt373
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_71 _)(\ bt3886
(decl_bblast _ _ _ (bv_bbl_var 1 z$116 _)(\ bt376
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_72 _)(\ bt3891
(decl_bblast _ _ _ (bv_bbl_var 1 z$827 _)(\ bt377
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_73 _)(\ bt3896
(decl_bblast _ _ _ (bv_bbl_var 1 z$97 _)(\ bt380
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_74 _)(\ bt3901
(decl_bblast _ _ _ (bv_bbl_var 1 z$828 _)(\ bt381
(decl_bblast _ _ _ (bv_bbl_const 2 _ letBvc2)(\ bt1035
(decl_bblast _ _ _ (bv_bbl_var 2 z$n2s2 _)(\ bt382
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_75 _)(\ bt3906
(decl_bblast _ _ _ (bv_bbl_var 1 z$73 _)(\ bt383
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_76 _)(\ bt3911
(decl_bblast _ _ _ (bv_bbl_var 1 z$84 _)(\ bt385
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_77 _)(\ bt3916
(decl_bblast _ _ _ (bv_bbl_var 1 z$829 _)(\ bt386
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_78 _)(\ bt3921
(decl_bblast _ _ _ (bv_bbl_var 1 z$82 _)(\ bt389
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_79 _)(\ bt3926
(decl_bblast _ _ _ (bv_bbl_var 1 z$830 _)(\ bt390
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_80 _)(\ bt3931
(decl_bblast _ _ _ (bv_bbl_var 1 z$74 _)(\ bt391
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_81 _)(\ bt3936
(decl_bblast _ _ _ (bv_bbl_var 1 z$75 _)(\ bt392
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_82 _)(\ bt3941
(decl_bblast _ _ _ (bv_bbl_var 1 z$76 _)(\ bt393
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_83 _)(\ bt3946
(decl_bblast _ _ _ (bv_bbl_var 1 z$831 _)(\ bt394
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_84 _)(\ bt3951
(decl_bblast _ _ _ (bv_bbl_var 1 z$78 _)(\ bt395
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_85 _)(\ bt3956
(decl_bblast _ _ _ (bv_bbl_var 1 z$79 _)(\ bt396
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_86 _)(\ bt3961
(decl_bblast _ _ _ (bv_bbl_var 1 z$80 _)(\ bt397
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_87 _)(\ bt3966
(decl_bblast _ _ _ (bv_bbl_var 1 z$832 _)(\ bt398
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_88 _)(\ bt3971
(decl_bblast _ _ _ (bv_bbl_var 1 z$86 _)(\ bt399
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_89 _)(\ bt3976
(decl_bblast _ _ _ (bv_bbl_var 1 z$95 _)(\ bt401
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_90 _)(\ bt3981
(decl_bblast _ _ _ (bv_bbl_var 1 z$833 _)(\ bt402
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_91 _)(\ bt3986
(decl_bblast _ _ _ (bv_bbl_var 1 z$93 _)(\ bt405
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_92 _)(\ bt3991
(decl_bblast _ _ _ (bv_bbl_var 1 z$834 _)(\ bt406
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_93 _)(\ bt3996
(decl_bblast _ _ _ (bv_bbl_var 1 z$87 _)(\ bt407
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_94 _)(\ bt4001
(decl_bblast _ _ _ (bv_bbl_var 1 z$88 _)(\ bt408
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_95 _)(\ bt4006
(decl_bblast _ _ _ (bv_bbl_var 1 z$835 _)(\ bt409
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_96 _)(\ bt4011
(decl_bblast _ _ _ (bv_bbl_var 1 z$90 _)(\ bt410
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_97 _)(\ bt4016
(decl_bblast _ _ _ (bv_bbl_var 1 z$91 _)(\ bt411
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_98 _)(\ bt4021
(decl_bblast _ _ _ (bv_bbl_var 1 z$836 _)(\ bt412
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_99 _)(\ bt4026
(decl_bblast _ _ _ (bv_bbl_var 1 z$99 _)(\ bt413
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_100 _)(\ bt4031
(decl_bblast _ _ _ (bv_bbl_var 1 z$114 _)(\ bt415
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_101 _)(\ bt4036
(decl_bblast _ _ _ (bv_bbl_var 1 z$837 _)(\ bt416
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_102 _)(\ bt4041
(decl_bblast _ _ _ (bv_bbl_var 1 z$112 _)(\ bt419
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_103 _)(\ bt4046
(decl_bblast _ _ _ (bv_bbl_var 1 z$838 _)(\ bt420
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_104 _)(\ bt4051
(decl_bblast _ _ _ (bv_bbl_var 1 z$108 _)(\ bt423
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_105 _)(\ bt4056
(decl_bblast _ _ _ (bv_bbl_var 1 z$839 _)(\ bt424
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_106 _)(\ bt4061
(decl_bblast _ _ _ (bv_bbl_var 1 z$104 _)(\ bt427
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_107 _)(\ bt4066
(decl_bblast _ _ _ (bv_bbl_var 1 z$840 _)(\ bt428
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_108 _)(\ bt4071
(decl_bblast _ _ _ (bv_bbl_var 1 z$100 _)(\ bt429
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_109 _)(\ bt4076
(decl_bblast _ _ _ (bv_bbl_var 1 z$841 _)(\ bt430
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_110 _)(\ bt4081
(decl_bblast _ _ _ (bv_bbl_var 1 z$102 _)(\ bt431
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_111 _)(\ bt4086
(decl_bblast _ _ _ (bv_bbl_var 1 z$842 _)(\ bt432
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_112 _)(\ bt4091
(decl_bblast _ _ _ (bv_bbl_var 1 z$106 _)(\ bt433
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_113 _)(\ bt4096
(decl_bblast _ _ _ (bv_bbl_var 1 z$843 _)(\ bt434
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_114 _)(\ bt4101
(decl_bblast _ _ _ (bv_bbl_var 1 z$110 _)(\ bt435
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_115 _)(\ bt4106
(decl_bblast _ _ _ (bv_bbl_var 1 z$844 _)(\ bt436
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_116 _)(\ bt4111
(decl_bblast _ _ _ (bv_bbl_var 1 z$432 _)(\ bt438
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_117 _)(\ bt4116
(decl_bblast _ _ _ (bv_bbl_var 1 z$433 _)(\ bt439
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_118 _)(\ bt4121
(decl_bblast _ _ _ (bv_bbl_var 1 z$845 _)(\ bt440
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_119 _)(\ bt4126
(decl_bblast _ _ _ (bv_bbl_var 1 z$430 _)(\ bt442
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_120 _)(\ bt4131
(decl_bblast _ _ _ (bv_bbl_var 1 z$846 _)(\ bt443
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_121 _)(\ bt4136
(decl_bblast _ _ _ (bv_bbl_var 1 z$428 _)(\ bt444
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_122 _)(\ bt4141
(decl_bblast _ _ _ (bv_bbl_var 1 z$847 _)(\ bt445
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_123 _)(\ bt4146
(decl_bblast _ _ _ (bv_bbl_var 1 z$441 _)(\ bt447
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_124 _)(\ bt4151
(decl_bblast _ _ _ (bv_bbl_var 1 z$442 _)(\ bt448
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_125 _)(\ bt4156
(decl_bblast _ _ _ (bv_bbl_var 1 z$848 _)(\ bt449
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_126 _)(\ bt4161
(decl_bblast _ _ _ (bv_bbl_var 1 z$439 _)(\ bt451
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_127 _)(\ bt4166
(decl_bblast _ _ _ (bv_bbl_var 1 z$849 _)(\ bt452
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_128 _)(\ bt4171
(decl_bblast _ _ _ (bv_bbl_var 1 z$437 _)(\ bt453
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_129 _)(\ bt4176
(decl_bblast _ _ _ (bv_bbl_var 1 z$850 _)(\ bt454
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_130 _)(\ bt4181
(decl_bblast _ _ _ (bv_bbl_var 1 z$450 _)(\ bt456
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_131 _)(\ bt4186
(decl_bblast _ _ _ (bv_bbl_var 1 z$451 _)(\ bt457
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_132 _)(\ bt4191
(decl_bblast _ _ _ (bv_bbl_var 1 z$851 _)(\ bt458
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_133 _)(\ bt4196
(decl_bblast _ _ _ (bv_bbl_var 1 z$448 _)(\ bt460
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_134 _)(\ bt4201
(decl_bblast _ _ _ (bv_bbl_var 1 z$852 _)(\ bt461
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_135 _)(\ bt4206
(decl_bblast _ _ _ (bv_bbl_var 1 z$446 _)(\ bt462
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_136 _)(\ bt4211
(decl_bblast _ _ _ (bv_bbl_var 1 z$853 _)(\ bt463
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_137 _)(\ bt4216
(decl_bblast _ _ _ (bv_bbl_var 1 z$459 _)(\ bt465
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_138 _)(\ bt4221
(decl_bblast _ _ _ (bv_bbl_var 1 z$460 _)(\ bt466
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_139 _)(\ bt4226
(decl_bblast _ _ _ (bv_bbl_var 1 z$854 _)(\ bt467
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_140 _)(\ bt4231
(decl_bblast _ _ _ (bv_bbl_var 1 z$457 _)(\ bt469
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_141 _)(\ bt4236
(decl_bblast _ _ _ (bv_bbl_var 1 z$855 _)(\ bt470
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_142 _)(\ bt4241
(decl_bblast _ _ _ (bv_bbl_var 1 z$455 _)(\ bt471
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_143 _)(\ bt4246
(decl_bblast _ _ _ (bv_bbl_var 1 z$856 _)(\ bt472
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_144 _)(\ bt4251
(decl_bblast _ _ _ (bv_bbl_var 1 z$468 _)(\ bt474
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_145 _)(\ bt4256
(decl_bblast _ _ _ (bv_bbl_var 1 z$469 _)(\ bt475
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_146 _)(\ bt4261
(decl_bblast _ _ _ (bv_bbl_var 1 z$857 _)(\ bt476
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_147 _)(\ bt4266
(decl_bblast _ _ _ (bv_bbl_var 1 z$466 _)(\ bt478
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_148 _)(\ bt4271
(decl_bblast _ _ _ (bv_bbl_var 1 z$858 _)(\ bt479
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_149 _)(\ bt4276
(decl_bblast _ _ _ (bv_bbl_var 1 z$464 _)(\ bt480
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_150 _)(\ bt4281
(decl_bblast _ _ _ (bv_bbl_var 1 z$859 _)(\ bt481
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_151 _)(\ bt4286
(decl_bblast _ _ _ (bv_bbl_var 1 z$477 _)(\ bt483
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_152 _)(\ bt4291
(decl_bblast _ _ _ (bv_bbl_var 1 z$478 _)(\ bt484
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_153 _)(\ bt4296
(decl_bblast _ _ _ (bv_bbl_var 1 z$860 _)(\ bt485
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_154 _)(\ bt4301
(decl_bblast _ _ _ (bv_bbl_var 1 z$475 _)(\ bt487
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_155 _)(\ bt4306
(decl_bblast _ _ _ (bv_bbl_var 1 z$861 _)(\ bt488
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_156 _)(\ bt4311
(decl_bblast _ _ _ (bv_bbl_var 1 z$473 _)(\ bt489
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_157 _)(\ bt4316
(decl_bblast _ _ _ (bv_bbl_var 1 z$862 _)(\ bt490
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_158 _)(\ bt4321
(decl_bblast _ _ _ (bv_bbl_var 1 z$654 _)(\ bt493
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_159 _)(\ bt4326
(decl_bblast _ _ _ (bv_bbl_var 1 z$863 _)(\ bt494
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_160 _)(\ bt4331
(decl_bblast _ _ _ (bv_bbl_var 1 z$645 _)(\ bt497
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_161 _)(\ bt4336
(decl_bblast _ _ _ (bv_bbl_var 1 z$864 _)(\ bt498
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_162 _)(\ bt4341
(decl_bblast _ _ _ (bv_bbl_var 1 z$636 _)(\ bt501
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_163 _)(\ bt4346
(decl_bblast _ _ _ (bv_bbl_var 1 z$865 _)(\ bt502
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_164 _)(\ bt4351
(decl_bblast _ _ _ (bv_bbl_var 1 z$627 _)(\ bt505
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_165 _)(\ bt4356
(decl_bblast _ _ _ (bv_bbl_var 1 z$866 _)(\ bt506
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_166 _)(\ bt4361
(decl_bblast _ _ _ (bv_bbl_var 1 z$618 _)(\ bt509
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_167 _)(\ bt4366
(decl_bblast _ _ _ (bv_bbl_var 1 z$867 _)(\ bt510
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_168 _)(\ bt4371
(decl_bblast _ _ _ (bv_bbl_var 1 z$609 _)(\ bt513
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_169 _)(\ bt4376
(decl_bblast _ _ _ (bv_bbl_var 1 z$868 _)(\ bt514
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_170 _)(\ bt4381
(decl_bblast _ _ _ (bv_bbl_var 1 z$599 _)(\ bt516
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_171 _)(\ bt4386
(decl_bblast _ _ _ (bv_bbl_var 1 z$600 _)(\ bt518
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_172 _)(\ bt4391
(decl_bblast _ _ _ (bv_bbl_var 1 z$869 _)(\ bt519
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_173 _)(\ bt4396
(decl_bblast _ _ _ (bv_bbl_var 1 z$501 _)(\ bt521
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_174 _)(\ bt4401
(decl_bblast _ _ _ (bv_bbl_var 1 z$504 _)(\ bt523
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_175 _)(\ bt4406
(decl_bblast _ _ _ (bv_bbl_var 1 z$505 _)(\ bt524
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_176 _)(\ bt4411
(decl_bblast _ _ _ (bv_bbl_var 1 z$870 _)(\ bt525
(decl_bblast _ _ _ (bv_bbl_var 4 move$next _)(\ bt526
(decl_bblast _ _ _ (bv_bbl_extract 1 3 3  _ _ _ _ bt526)(\ bt1393
(decl_bblast _ _ _ (bv_bbl_var 1 z$499 _)(\ bt527
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_177 _)(\ bt4416
(decl_bblast _ _ _ (bv_bbl_var 1 z$871 _)(\ bt528
(decl_bblast _ _ _ (bv_bbl_extract 3 2 0  _ _ _ _ bt526)(\ bt1398
(decl_bblast _ _ _ (bv_bbl_var 3 z$502 _)(\ bt529
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_178 _)(\ bt4421
(decl_bblast _ _ _ (bv_bbl_var 1 z$872 _)(\ bt530
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_179 _)(\ bt4426
(decl_bblast _ _ _ (bv_bbl_var 1 z$597 _)(\ bt533
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_180 _)(\ bt4431
(decl_bblast _ _ _ (bv_bbl_var 1 z$873 _)(\ bt534
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_181 _)(\ bt4436
(decl_bblast _ _ _ (bv_bbl_var 1 z$550 _)(\ bt537
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_182 _)(\ bt4441
(decl_bblast _ _ _ (bv_bbl_var 1 z$874 _)(\ bt538
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_183 _)(\ bt4446
(decl_bblast _ _ _ (bv_bbl_var 1 z$531 _)(\ bt541
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_184 _)(\ bt4451
(decl_bblast _ _ _ (bv_bbl_var 1 z$875 _)(\ bt542
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_185 _)(\ bt4456
(decl_bblast _ _ _ (bv_bbl_var 1 z$507 _)(\ bt544
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_186 _)(\ bt4461
(decl_bblast _ _ _ (bv_bbl_var 1 z$518 _)(\ bt546
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_187 _)(\ bt4466
(decl_bblast _ _ _ (bv_bbl_var 1 z$876 _)(\ bt547
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_188 _)(\ bt4471
(decl_bblast _ _ _ (bv_bbl_var 1 z$516 _)(\ bt550
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_189 _)(\ bt4476
(decl_bblast _ _ _ (bv_bbl_var 1 z$877 _)(\ bt551
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_190 _)(\ bt4481
(decl_bblast _ _ _ (bv_bbl_var 1 z$508 _)(\ bt553
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_191 _)(\ bt4486
(decl_bblast _ _ _ (bv_bbl_var 1 z$509 _)(\ bt555
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_192 _)(\ bt4491
(decl_bblast _ _ _ (bv_bbl_var 1 z$510 _)(\ bt556
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_193 _)(\ bt4496
(decl_bblast _ _ _ (bv_bbl_var 1 z$878 _)(\ bt557
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_194 _)(\ bt4501
(decl_bblast _ _ _ (bv_bbl_var 1 z$512 _)(\ bt559
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_195 _)(\ bt4506
(decl_bblast _ _ _ (bv_bbl_var 1 z$513 _)(\ bt561
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_196 _)(\ bt4511
(decl_bblast _ _ _ (bv_bbl_var 1 z$514 _)(\ bt562
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_197 _)(\ bt4516
(decl_bblast _ _ _ (bv_bbl_var 1 z$879 _)(\ bt563
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_198 _)(\ bt4521
(decl_bblast _ _ _ (bv_bbl_var 1 z$520 _)(\ bt565
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_199 _)(\ bt4526
(decl_bblast _ _ _ (bv_bbl_var 1 z$529 _)(\ bt567
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_200 _)(\ bt4531
(decl_bblast _ _ _ (bv_bbl_var 1 z$880 _)(\ bt568
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_201 _)(\ bt4536
(decl_bblast _ _ _ (bv_bbl_var 1 z$527 _)(\ bt571
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_202 _)(\ bt4541
(decl_bblast _ _ _ (bv_bbl_var 1 z$881 _)(\ bt572
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_203 _)(\ bt4546
(decl_bblast _ _ _ (bv_bbl_var 1 z$521 _)(\ bt574
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_204 _)(\ bt4551
(decl_bblast _ _ _ (bv_bbl_var 1 z$522 _)(\ bt575
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_205 _)(\ bt4556
(decl_bblast _ _ _ (bv_bbl_var 1 z$882 _)(\ bt576
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_206 _)(\ bt4561
(decl_bblast _ _ _ (bv_bbl_var 1 z$524 _)(\ bt578
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_207 _)(\ bt4566
(decl_bblast _ _ _ (bv_bbl_var 1 z$525 _)(\ bt579
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_208 _)(\ bt4571
(decl_bblast _ _ _ (bv_bbl_var 1 z$883 _)(\ bt580
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_209 _)(\ bt4576
(decl_bblast _ _ _ (bv_bbl_var 1 z$533 _)(\ bt582
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_210 _)(\ bt4581
(decl_bblast _ _ _ (bv_bbl_var 1 z$548 _)(\ bt584
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_211 _)(\ bt4586
(decl_bblast _ _ _ (bv_bbl_var 1 z$884 _)(\ bt585
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_212 _)(\ bt4591
(decl_bblast _ _ _ (bv_bbl_var 1 z$546 _)(\ bt588
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_213 _)(\ bt4596
(decl_bblast _ _ _ (bv_bbl_var 1 z$885 _)(\ bt589
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_214 _)(\ bt4601
(decl_bblast _ _ _ (bv_bbl_var 1 z$542 _)(\ bt592
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_215 _)(\ bt4606
(decl_bblast _ _ _ (bv_bbl_var 1 z$886 _)(\ bt593
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_216 _)(\ bt4611
(decl_bblast _ _ _ (bv_bbl_var 1 z$538 _)(\ bt596
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_217 _)(\ bt4616
(decl_bblast _ _ _ (bv_bbl_var 1 z$887 _)(\ bt597
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_218 _)(\ bt4621
(decl_bblast _ _ _ (bv_bbl_var 1 z$534 _)(\ bt598
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_219 _)(\ bt4626
(decl_bblast _ _ _ (bv_bbl_var 1 z$888 _)(\ bt599
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_220 _)(\ bt4631
(decl_bblast _ _ _ (bv_bbl_var 1 z$536 _)(\ bt600
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_221 _)(\ bt4636
(decl_bblast _ _ _ (bv_bbl_var 1 z$889 _)(\ bt601
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_222 _)(\ bt4641
(decl_bblast _ _ _ (bv_bbl_var 1 z$540 _)(\ bt602
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_223 _)(\ bt4646
(decl_bblast _ _ _ (bv_bbl_var 1 z$890 _)(\ bt603
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_224 _)(\ bt4651
(decl_bblast _ _ _ (bv_bbl_var 1 z$544 _)(\ bt604
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_225 _)(\ bt4656
(decl_bblast _ _ _ (bv_bbl_var 1 z$891 _)(\ bt605
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_226 _)(\ bt4661
(decl_bblast _ _ _ (bv_bbl_var 1 z$595 _)(\ bt608
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_227 _)(\ bt4666
(decl_bblast _ _ _ (bv_bbl_var 1 z$892 _)(\ bt609
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_228 _)(\ bt4671
(decl_bblast _ _ _ (bv_bbl_var 1 z$576 _)(\ bt612
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_229 _)(\ bt4676
(decl_bblast _ _ _ (bv_bbl_var 1 z$893 _)(\ bt613
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_230 _)(\ bt4681
(decl_bblast _ _ _ (bv_bbl_var 1 z$552 _)(\ bt614
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_231 _)(\ bt4686
(decl_bblast _ _ _ (bv_bbl_var 1 z$563 _)(\ bt616
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_232 _)(\ bt4691
(decl_bblast _ _ _ (bv_bbl_var 1 z$894 _)(\ bt617
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_233 _)(\ bt4696
(decl_bblast _ _ _ (bv_bbl_var 1 z$561 _)(\ bt620
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_234 _)(\ bt4701
(decl_bblast _ _ _ (bv_bbl_var 1 z$895 _)(\ bt621
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_235 _)(\ bt4706
(decl_bblast _ _ _ (bv_bbl_var 1 z$553 _)(\ bt622
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_236 _)(\ bt4711
(decl_bblast _ _ _ (bv_bbl_var 1 z$554 _)(\ bt623
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_237 _)(\ bt4716
(decl_bblast _ _ _ (bv_bbl_var 1 z$555 _)(\ bt624
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_238 _)(\ bt4721
(decl_bblast _ _ _ (bv_bbl_var 1 z$896 _)(\ bt625
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_239 _)(\ bt4726
(decl_bblast _ _ _ (bv_bbl_var 1 z$557 _)(\ bt626
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_240 _)(\ bt4731
(decl_bblast _ _ _ (bv_bbl_var 1 z$558 _)(\ bt627
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_241 _)(\ bt4736
(decl_bblast _ _ _ (bv_bbl_var 1 z$559 _)(\ bt628
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_242 _)(\ bt4741
(decl_bblast _ _ _ (bv_bbl_var 1 z$897 _)(\ bt629
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_243 _)(\ bt4746
(decl_bblast _ _ _ (bv_bbl_var 1 z$565 _)(\ bt630
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_244 _)(\ bt4751
(decl_bblast _ _ _ (bv_bbl_var 1 z$574 _)(\ bt632
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_245 _)(\ bt4756
(decl_bblast _ _ _ (bv_bbl_var 1 z$898 _)(\ bt633
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_246 _)(\ bt4761
(decl_bblast _ _ _ (bv_bbl_var 1 z$572 _)(\ bt636
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_247 _)(\ bt4766
(decl_bblast _ _ _ (bv_bbl_var 1 z$899 _)(\ bt637
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_248 _)(\ bt4771
(decl_bblast _ _ _ (bv_bbl_var 1 z$566 _)(\ bt638
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_249 _)(\ bt4776
(decl_bblast _ _ _ (bv_bbl_var 1 z$567 _)(\ bt639
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_250 _)(\ bt4781
(decl_bblast _ _ _ (bv_bbl_var 1 z$900 _)(\ bt640
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_251 _)(\ bt4786
(decl_bblast _ _ _ (bv_bbl_var 1 z$569 _)(\ bt641
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_252 _)(\ bt4791
(decl_bblast _ _ _ (bv_bbl_var 1 z$570 _)(\ bt642
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_253 _)(\ bt4796
(decl_bblast _ _ _ (bv_bbl_var 1 z$901 _)(\ bt643
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_254 _)(\ bt4801
(decl_bblast _ _ _ (bv_bbl_var 1 z$578 _)(\ bt644
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_255 _)(\ bt4806
(decl_bblast _ _ _ (bv_bbl_var 1 z$593 _)(\ bt646
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_256 _)(\ bt4811
(decl_bblast _ _ _ (bv_bbl_var 1 z$902 _)(\ bt647
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_257 _)(\ bt4816
(decl_bblast _ _ _ (bv_bbl_var 1 z$591 _)(\ bt650
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_258 _)(\ bt4821
(decl_bblast _ _ _ (bv_bbl_var 1 z$903 _)(\ bt651
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_259 _)(\ bt4826
(decl_bblast _ _ _ (bv_bbl_var 1 z$587 _)(\ bt654
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_260 _)(\ bt4831
(decl_bblast _ _ _ (bv_bbl_var 1 z$904 _)(\ bt655
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_261 _)(\ bt4836
(decl_bblast _ _ _ (bv_bbl_var 1 z$583 _)(\ bt658
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_262 _)(\ bt4841
(decl_bblast _ _ _ (bv_bbl_var 1 z$905 _)(\ bt659
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_263 _)(\ bt4846
(decl_bblast _ _ _ (bv_bbl_var 1 z$579 _)(\ bt660
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_264 _)(\ bt4851
(decl_bblast _ _ _ (bv_bbl_var 1 z$906 _)(\ bt661
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_265 _)(\ bt4856
(decl_bblast _ _ _ (bv_bbl_var 1 z$581 _)(\ bt662
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_266 _)(\ bt4861
(decl_bblast _ _ _ (bv_bbl_var 1 z$907 _)(\ bt663
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_267 _)(\ bt4866
(decl_bblast _ _ _ (bv_bbl_var 1 z$585 _)(\ bt664
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_268 _)(\ bt4871
(decl_bblast _ _ _ (bv_bbl_var 1 z$908 _)(\ bt665
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_269 _)(\ bt4876
(decl_bblast _ _ _ (bv_bbl_var 1 z$589 _)(\ bt666
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_270 _)(\ bt4881
(decl_bblast _ _ _ (bv_bbl_var 1 z$909 _)(\ bt667
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_271 _)(\ bt4886
(decl_bblast _ _ _ (bv_bbl_var 1 z$606 _)(\ bt669
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_272 _)(\ bt4891
(decl_bblast _ _ _ (bv_bbl_var 1 z$607 _)(\ bt670
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_273 _)(\ bt4896
(decl_bblast _ _ _ (bv_bbl_var 1 z$910 _)(\ bt671
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_274 _)(\ bt4901
(decl_bblast _ _ _ (bv_bbl_var 1 z$604 _)(\ bt673
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_275 _)(\ bt4906
(decl_bblast _ _ _ (bv_bbl_var 1 z$911 _)(\ bt674
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_276 _)(\ bt4911
(decl_bblast _ _ _ (bv_bbl_var 1 z$602 _)(\ bt675
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_277 _)(\ bt4916
(decl_bblast _ _ _ (bv_bbl_var 1 z$912 _)(\ bt676
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_278 _)(\ bt4921
(decl_bblast _ _ _ (bv_bbl_var 1 z$615 _)(\ bt678
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_279 _)(\ bt4926
(decl_bblast _ _ _ (bv_bbl_var 1 z$616 _)(\ bt679
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_280 _)(\ bt4931
(decl_bblast _ _ _ (bv_bbl_var 1 z$913 _)(\ bt680
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_281 _)(\ bt4936
(decl_bblast _ _ _ (bv_bbl_var 1 z$613 _)(\ bt682
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_282 _)(\ bt4941
(decl_bblast _ _ _ (bv_bbl_var 1 z$914 _)(\ bt683
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_283 _)(\ bt4946
(decl_bblast _ _ _ (bv_bbl_var 1 z$611 _)(\ bt684
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_284 _)(\ bt4951
(decl_bblast _ _ _ (bv_bbl_var 1 z$915 _)(\ bt685
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_285 _)(\ bt4956
(decl_bblast _ _ _ (bv_bbl_var 1 z$624 _)(\ bt687
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_286 _)(\ bt4961
(decl_bblast _ _ _ (bv_bbl_var 1 z$625 _)(\ bt688
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_287 _)(\ bt4966
(decl_bblast _ _ _ (bv_bbl_var 1 z$916 _)(\ bt689
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_288 _)(\ bt4971
(decl_bblast _ _ _ (bv_bbl_var 1 z$622 _)(\ bt691
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_289 _)(\ bt4976
(decl_bblast _ _ _ (bv_bbl_var 1 z$917 _)(\ bt692
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_290 _)(\ bt4981
(decl_bblast _ _ _ (bv_bbl_var 1 z$620 _)(\ bt693
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_291 _)(\ bt4986
(decl_bblast _ _ _ (bv_bbl_var 1 z$918 _)(\ bt694
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_292 _)(\ bt4991
(decl_bblast _ _ _ (bv_bbl_var 1 z$633 _)(\ bt696
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_293 _)(\ bt4996
(decl_bblast _ _ _ (bv_bbl_var 1 z$634 _)(\ bt697
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_294 _)(\ bt5001
(decl_bblast _ _ _ (bv_bbl_var 1 z$919 _)(\ bt698
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_295 _)(\ bt5006
(decl_bblast _ _ _ (bv_bbl_var 1 z$631 _)(\ bt700
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_296 _)(\ bt5011
(decl_bblast _ _ _ (bv_bbl_var 1 z$920 _)(\ bt701
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_297 _)(\ bt5016
(decl_bblast _ _ _ (bv_bbl_var 1 z$629 _)(\ bt702
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_298 _)(\ bt5021
(decl_bblast _ _ _ (bv_bbl_var 1 z$921 _)(\ bt703
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_299 _)(\ bt5026
(decl_bblast _ _ _ (bv_bbl_var 1 z$642 _)(\ bt705
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_300 _)(\ bt5031
(decl_bblast _ _ _ (bv_bbl_var 1 z$643 _)(\ bt706
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_301 _)(\ bt5036
(decl_bblast _ _ _ (bv_bbl_var 1 z$922 _)(\ bt707
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_302 _)(\ bt5041
(decl_bblast _ _ _ (bv_bbl_var 1 z$640 _)(\ bt709
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_303 _)(\ bt5046
(decl_bblast _ _ _ (bv_bbl_var 1 z$923 _)(\ bt710
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_304 _)(\ bt5051
(decl_bblast _ _ _ (bv_bbl_var 1 z$638 _)(\ bt711
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_305 _)(\ bt5056
(decl_bblast _ _ _ (bv_bbl_var 1 z$924 _)(\ bt712
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_306 _)(\ bt5061
(decl_bblast _ _ _ (bv_bbl_var 1 z$651 _)(\ bt714
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_307 _)(\ bt5066
(decl_bblast _ _ _ (bv_bbl_var 1 z$652 _)(\ bt715
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_308 _)(\ bt5071
(decl_bblast _ _ _ (bv_bbl_var 1 z$925 _)(\ bt716
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_309 _)(\ bt5076
(decl_bblast _ _ _ (bv_bbl_var 1 z$649 _)(\ bt718
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_310 _)(\ bt5081
(decl_bblast _ _ _ (bv_bbl_var 1 z$926 _)(\ bt719
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_311 _)(\ bt5086
(decl_bblast _ _ _ (bv_bbl_var 1 z$647 _)(\ bt720
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_312 _)(\ bt5091
(decl_bblast _ _ _ (bv_bbl_var 1 z$927 _)(\ bt721
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_313 _)(\ bt5096
(decl_bblast _ _ _ (bv_bbl_var 1 z$736 _)(\ bt722
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_314 _)(\ bt5101
(decl_bblast _ _ _ (bv_bbl_var 1 z$411 _)(\ bt724
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_315 _)(\ bt5106
(decl_bblast _ _ _ (bv_bbl_var 1 z$785 _)(\ bt725
(decl_bblast _ _ _ (bv_bbl_const 4 _ letBvc3)(\ bt1884
(decl_bblast _ _ _ (bv_bbl_var 4 z$n0s4 _)(\ bt726
(decl_bblast _ _ _ (bv_bbl_var 4 termITE_316 _)(\ bt5111
(decl_bblast _ _ _ (bv_bbl_var 4 z$152 _)(\ bt729
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_317 _)(\ bt5116
(decl_bblast _ _ _ (bv_bbl_var 1 z$928 _)(\ bt730
(decl_bblast _ _ _ (bv_bbl_const 4 _ letBvc4)(\ bt1892
(decl_bblast _ _ _ (bv_bbl_var 4 z$n9s4 _)(\ bt731
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_318 _)(\ bt5121
(decl_bblast _ _ _ (bv_bbl_var 1 z$150 _)(\ bt732
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_319 _)(\ bt5126
(decl_bblast _ _ _ (bv_bbl_var 1 z$929 _)(\ bt733
(decl_bblast _ _ _ (bv_bbl_var 1 termITE_320 _)(\ bt5131
(decl_bblast _ _ _ (bv_bbl_var 1 z$931 _)(\ bt734
(decl_bblast _ _ _ (bv_bbl_const 1 _ letBvc5)(\ bt736
(decl_bblast _ _ _ (bv_bbl_var 1 prop _)(\ bt249
(decl_bblast _ _ _ (bv_bbl_var 1 prop0 _)(\ bt248
(decl_bblast _ _ _ (bv_bbl_const 1 _ letBvc6)(\ bt737
(decl_bblast _ _ _ (bv_bbl_var 1 prop$next _)(\ bt252
(decl_bblast _ _ _ (bv_bbl_var 1 prop0$next _)(\ bt251
(decl_bblast _ _ _ (bv_bbl_var 1 s$146 _)(\ bt255
(decl_bblast _ _ _ (bv_bbl_var 1 prop_8 _)(\ bt254
(decl_bblast _ _ _ (bv_bbl_var 1 s$145 _)(\ bt259
(decl_bblast _ _ _ (bv_bbl_var 1 prop_7 _)(\ bt258
(decl_bblast _ _ _ (bv_bbl_var 1 s$144 _)(\ bt263
(decl_bblast _ _ _ (bv_bbl_var 1 prop_6 _)(\ bt262
(decl_bblast _ _ _ (bv_bbl_var 1 s$143 _)(\ bt267
(decl_bblast _ _ _ (bv_bbl_var 1 prop_5 _)(\ bt266
(decl_bblast _ _ _ (bv_bbl_var 1 s$142 _)(\ bt271
(decl_bblast _ _ _ (bv_bbl_var 1 prop_4 _)(\ bt270
(decl_bblast _ _ _ (bv_bbl_var 1 s$141 _)(\ bt275
(decl_bblast _ _ _ (bv_bbl_var 1 prop_3 _)(\ bt274
(decl_bblast _ _ _ (bv_bbl_var 1 s$128 _)(\ bt278
(decl_bblast _ _ _ (bv_bbl_var 1 prop_1 _)(\ bt280
(decl_bblast _ _ _ (bv_bbl_var 1 w$18 _)(\ bt283
(decl_bblast _ _ _ (bv_bbl_var 3 w$19 _)(\ bt287
(decl_bblast _ _ _ (bv_bbl_var 1 winX _)(\ bt298
(decl_bblast _ _ _ (bv_bbl_var 1 winO _)(\ bt297
(decl_bblast _ _ _ (bv_bbl_var 1 s$1654 _)(\ bt302
(decl_bblast _ _ _ (bv_bbl_var 1 s$15 _)(\ bt301
(decl_bblast _ _ _ (bv_bbl_var 1 s$7 _)(\ bt306
(decl_bblast _ _ _ (bv_bbl_var 1 s$10 _)(\ bt305
(decl_bblast _ _ _ (bv_bbl_var 2 |b[0]| _)(\ bt311
(decl_bblast _ _ _ (bv_bbl_var 1 s$1652 _)(\ bt313
(decl_bblast _ _ _ (bv_bbl_var 1 s$5 _)(\ bt317
(decl_bblast _ _ _ (bv_bbl_var 1 s$6 _)(\ bt316
(decl_bblast _ _ _ (bv_bbl_var 2 |b[1]| _)(\ bt320
(decl_bblast _ _ _ (bv_bbl_var 2 |b[2]| _)(\ bt322
(decl_bblast _ _ _ (bv_bbl_var 2 |b[3]| _)(\ bt326
(decl_bblast _ _ _ (bv_bbl_var 2 |b[6]| _)(\ bt328
(decl_bblast _ _ _ (bv_bbl_var 2 |b[8]| _)(\ bt332
(decl_bblast _ _ _ (bv_bbl_var 1 s$1653 _)(\ bt334
(decl_bblast _ _ _ (bv_bbl_var 1 s$8 _)(\ bt338
(decl_bblast _ _ _ (bv_bbl_var 1 s$9 _)(\ bt337
(decl_bblast _ _ _ (bv_bbl_var 2 |b[7]| _)(\ bt341
(decl_bblast _ _ _ (bv_bbl_var 2 |b[5]| _)(\ bt345
(decl_bblast _ _ _ (bv_bbl_var 2 |b[4]| _)(\ bt349
(decl_bblast _ _ _ (bv_bbl_var 1 s$1657 _)(\ bt351
(decl_bblast _ _ _ (bv_bbl_var 1 s$1656 _)(\ bt355
(decl_bblast _ _ _ (bv_bbl_var 1 s$14 _)(\ bt354
(decl_bblast _ _ _ (bv_bbl_var 1 s$1655 _)(\ bt359
(decl_bblast _ _ _ (bv_bbl_var 1 s$13 _)(\ bt358
(decl_bblast _ _ _ (bv_bbl_var 1 s$11 _)(\ bt363
(decl_bblast _ _ _ (bv_bbl_var 1 s$12 _)(\ bt362
(decl_bblast _ _ _ (bv_bbl_var 1 s$1660 _)(\ bt375
(decl_bblast _ _ _ (bv_bbl_var 1 s$26 _)(\ bt374
(decl_bblast _ _ _ (bv_bbl_var 1 s$16 _)(\ bt379
(decl_bblast _ _ _ (bv_bbl_var 1 s$21 _)(\ bt378
(decl_bblast _ _ _ (bv_bbl_var 1 s$1658 _)(\ bt384
(decl_bblast _ _ _ (bv_bbl_var 1 s$17 _)(\ bt388
(decl_bblast _ _ _ (bv_bbl_var 1 s$18 _)(\ bt387
(decl_bblast _ _ _ (bv_bbl_var 1 s$1659 _)(\ bt400
(decl_bblast _ _ _ (bv_bbl_var 1 s$19 _)(\ bt404
(decl_bblast _ _ _ (bv_bbl_var 1 s$20 _)(\ bt403
(decl_bblast _ _ _ (bv_bbl_var 1 s$1663 _)(\ bt414
(decl_bblast _ _ _ (bv_bbl_var 1 s$1662 _)(\ bt418
(decl_bblast _ _ _ (bv_bbl_var 1 s$25 _)(\ bt417
(decl_bblast _ _ _ (bv_bbl_var 1 s$1661 _)(\ bt422
(decl_bblast _ _ _ (bv_bbl_var 1 s$24 _)(\ bt421
(decl_bblast _ _ _ (bv_bbl_var 1 s$22 _)(\ bt426
(decl_bblast _ _ _ (bv_bbl_var 1 s$23 _)(\ bt425
(decl_bblast _ _ _ (bv_bbl_var 1 s$130 _)(\ bt437
(decl_bblast _ _ _ (bv_bbl_var 1 s$129 _)(\ bt441
(decl_bblast _ _ _ (bv_bbl_var 1 s$132 _)(\ bt446
(decl_bblast _ _ _ (bv_bbl_var 1 s$131 _)(\ bt450
(decl_bblast _ _ _ (bv_bbl_var 1 s$134 _)(\ bt455
(decl_bblast _ _ _ (bv_bbl_var 1 s$133 _)(\ bt459
(decl_bblast _ _ _ (bv_bbl_var 1 s$136 _)(\ bt464
(decl_bblast _ _ _ (bv_bbl_var 1 s$135 _)(\ bt468
(decl_bblast _ _ _ (bv_bbl_var 1 s$138 _)(\ bt473
(decl_bblast _ _ _ (bv_bbl_var 1 s$137 _)(\ bt477
(decl_bblast _ _ _ (bv_bbl_var 1 s$140 _)(\ bt482
(decl_bblast _ _ _ (bv_bbl_var 1 s$139 _)(\ bt486
(decl_bblast _ _ _ (bv_bbl_var 1 s$146$next _)(\ bt492
(decl_bblast _ _ _ (bv_bbl_var 1 prop_8$next _)(\ bt491
(decl_bblast _ _ _ (bv_bbl_var 1 s$145$next _)(\ bt496
(decl_bblast _ _ _ (bv_bbl_var 1 prop_7$next _)(\ bt495
(decl_bblast _ _ _ (bv_bbl_var 1 s$144$next _)(\ bt500
(decl_bblast _ _ _ (bv_bbl_var 1 prop_6$next _)(\ bt499
(decl_bblast _ _ _ (bv_bbl_var 1 s$143$next _)(\ bt504
(decl_bblast _ _ _ (bv_bbl_var 1 prop_5$next _)(\ bt503
(decl_bblast _ _ _ (bv_bbl_var 1 s$142$next _)(\ bt508
(decl_bblast _ _ _ (bv_bbl_var 1 prop_4$next _)(\ bt507
(decl_bblast _ _ _ (bv_bbl_var 1 s$141$next _)(\ bt512
(decl_bblast _ _ _ (bv_bbl_var 1 prop_3$next _)(\ bt511
(decl_bblast _ _ _ (bv_bbl_var 1 s$128$next _)(\ bt515
(decl_bblast _ _ _ (bv_bbl_var 1 prop_1$next _)(\ bt517
(decl_bblast _ _ _ (bv_bbl_var 1 w$18$next _)(\ bt520
(decl_bblast _ _ _ (bv_bbl_var 3 w$19$next _)(\ bt522
(decl_bblast _ _ _ (bv_bbl_var 1 winX$next _)(\ bt532
(decl_bblast _ _ _ (bv_bbl_var 1 winO$next _)(\ bt531
(decl_bblast _ _ _ (bv_bbl_var 1 s$1654$next _)(\ bt536
(decl_bblast _ _ _ (bv_bbl_var 1 s$15$next _)(\ bt535
(decl_bblast _ _ _ (bv_bbl_var 1 s$7$next _)(\ bt540
(decl_bblast _ _ _ (bv_bbl_var 1 s$10$next _)(\ bt539
(decl_bblast _ _ _ (bv_bbl_var 2 |b[0]$next| _)(\ bt543
(decl_bblast _ _ _ (bv_bbl_var 1 s$1652$next _)(\ bt545
(decl_bblast _ _ _ (bv_bbl_var 1 s$5$next _)(\ bt549
(decl_bblast _ _ _ (bv_bbl_var 1 s$6$next _)(\ bt548
(decl_bblast _ _ _ (bv_bbl_var 2 |b[1]$next| _)(\ bt552
(decl_bblast _ _ _ (bv_bbl_var 2 |b[2]$next| _)(\ bt554
(decl_bblast _ _ _ (bv_bbl_var 2 |b[3]$next| _)(\ bt558
(decl_bblast _ _ _ (bv_bbl_var 2 |b[6]$next| _)(\ bt560
(decl_bblast _ _ _ (bv_bbl_var 2 |b[8]$next| _)(\ bt564
(decl_bblast _ _ _ (bv_bbl_var 1 s$1653$next _)(\ bt566
(decl_bblast _ _ _ (bv_bbl_var 1 s$8$next _)(\ bt570
(decl_bblast _ _ _ (bv_bbl_var 1 s$9$next _)(\ bt569
(decl_bblast _ _ _ (bv_bbl_var 2 |b[7]$next| _)(\ bt573
(decl_bblast _ _ _ (bv_bbl_var 2 |b[5]$next| _)(\ bt577
(decl_bblast _ _ _ (bv_bbl_var 2 |b[4]$next| _)(\ bt581
(decl_bblast _ _ _ (bv_bbl_var 1 s$1657$next _)(\ bt583
(decl_bblast _ _ _ (bv_bbl_var 1 s$1656$next _)(\ bt587
(decl_bblast _ _ _ (bv_bbl_var 1 s$14$next _)(\ bt586
(decl_bblast _ _ _ (bv_bbl_var 1 s$1655$next _)(\ bt591
(decl_bblast _ _ _ (bv_bbl_var 1 s$13$next _)(\ bt590
(decl_bblast _ _ _ (bv_bbl_var 1 s$11$next _)(\ bt595
(decl_bblast _ _ _ (bv_bbl_var 1 s$12$next _)(\ bt594
(decl_bblast _ _ _ (bv_bbl_var 1 s$1660$next _)(\ bt607
(decl_bblast _ _ _ (bv_bbl_var 1 s$26$next _)(\ bt606
(decl_bblast _ _ _ (bv_bbl_var 1 s$16$next _)(\ bt611
(decl_bblast _ _ _ (bv_bbl_var 1 s$21$next _)(\ bt610
(decl_bblast _ _ _ (bv_bbl_var 1 s$1658$next _)(\ bt615
(decl_bblast _ _ _ (bv_bbl_var 1 s$17$next _)(\ bt619
(decl_bblast _ _ _ (bv_bbl_var 1 s$18$next _)(\ bt618
(decl_bblast _ _ _ (bv_bbl_var 1 s$1659$next _)(\ bt631
(decl_bblast _ _ _ (bv_bbl_var 1 s$19$next _)(\ bt635
(decl_bblast _ _ _ (bv_bbl_var 1 s$20$next _)(\ bt634
(decl_bblast _ _ _ (bv_bbl_var 1 s$1663$next _)(\ bt645
(decl_bblast _ _ _ (bv_bbl_var 1 s$1662$next _)(\ bt649
(decl_bblast _ _ _ (bv_bbl_var 1 s$25$next _)(\ bt648
(decl_bblast _ _ _ (bv_bbl_var 1 s$1661$next _)(\ bt653
(decl_bblast _ _ _ (bv_bbl_var 1 s$24$next _)(\ bt652
(decl_bblast _ _ _ (bv_bbl_var 1 s$22$next _)(\ bt657
(decl_bblast _ _ _ (bv_bbl_var 1 s$23$next _)(\ bt656
(decl_bblast _ _ _ (bv_bbl_var 1 s$130$next _)(\ bt668
(decl_bblast _ _ _ (bv_bbl_var 1 s$129$next _)(\ bt672
(decl_bblast _ _ _ (bv_bbl_var 1 s$132$next _)(\ bt677
(decl_bblast _ _ _ (bv_bbl_var 1 s$131$next _)(\ bt681
(decl_bblast _ _ _ (bv_bbl_var 1 s$134$next _)(\ bt686
(decl_bblast _ _ _ (bv_bbl_var 1 s$133$next _)(\ bt690
(decl_bblast _ _ _ (bv_bbl_var 1 s$136$next _)(\ bt695
(decl_bblast _ _ _ (bv_bbl_var 1 s$135$next _)(\ bt699
(decl_bblast _ _ _ (bv_bbl_var 1 s$138$next _)(\ bt704
(decl_bblast _ _ _ (bv_bbl_var 1 s$137$next _)(\ bt708
(decl_bblast _ _ _ (bv_bbl_var 1 s$140$next _)(\ bt713
(decl_bblast _ _ _ (bv_bbl_var 1 s$139$next _)(\ bt717
(decl_bblast _ _ _ (bv_bbl_var 4 move$next_rhs _)(\ bt723
(decl_bblast _ _ _ (bv_bbl_var 1 s$154 _)(\ bt728
(decl_bblast _ _ _ (bv_bbl_var 4 imove _)(\ bt727
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5131 bt737)(\ .PA13111
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5131 bt736)(\ .PA13108
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt733)(\ .PA13105
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt730)(\ .PA13102
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt725)(\ .PA13099
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt721)(\ .PA13096
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt719)(\ .PA13093
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt716)(\ .PA13090
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt712)(\ .PA13087
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt710)(\ .PA13084
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt707)(\ .PA13081
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt703)(\ .PA13078
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt701)(\ .PA13075
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt698)(\ .PA13072
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt694)(\ .PA13069
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt692)(\ .PA13066
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt689)(\ .PA13063
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt685)(\ .PA13060
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt683)(\ .PA13057
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt680)(\ .PA13054
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt676)(\ .PA13051
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt674)(\ .PA13048
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt671)(\ .PA13045
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt667)(\ .PA13042
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt665)(\ .PA13039
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt663)(\ .PA13036
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt661)(\ .PA13033
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt659)(\ .PA13030
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt655)(\ .PA13027
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt651)(\ .PA13024
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt647)(\ .PA13021
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt643)(\ .PA13018
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt640)(\ .PA13015
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt637)(\ .PA13012
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt633)(\ .PA13009
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt629)(\ .PA13006
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt625)(\ .PA13003
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt621)(\ .PA13000
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt617)(\ .PA12997
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt613)(\ .PA12994
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt609)(\ .PA12991
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt605)(\ .PA12988
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt603)(\ .PA12985
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt601)(\ .PA12982
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt599)(\ .PA12979
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt597)(\ .PA12976
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt593)(\ .PA12973
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt589)(\ .PA12970
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt585)(\ .PA12967
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt580)(\ .PA12964
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt576)(\ .PA12961
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt572)(\ .PA12958
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt568)(\ .PA12955
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt563)(\ .PA12952
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt557)(\ .PA12949
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt551)(\ .PA12946
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt547)(\ .PA12943
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt542)(\ .PA12940
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt538)(\ .PA12937
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt534)(\ .PA12934
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt530)(\ .PA12931
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt528)(\ .PA12928
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt525)(\ .PA12925
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt519)(\ .PA12922
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt514)(\ .PA12919
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt510)(\ .PA12916
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt506)(\ .PA12913
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt502)(\ .PA12910
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt498)(\ .PA12907
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt494)(\ .PA12904
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt490)(\ .PA12901
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt488)(\ .PA12898
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt485)(\ .PA12895
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt481)(\ .PA12892
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt479)(\ .PA12889
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt476)(\ .PA12886
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt472)(\ .PA12883
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt470)(\ .PA12880
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt467)(\ .PA12877
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt463)(\ .PA12874
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt461)(\ .PA12871
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt458)(\ .PA12868
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt454)(\ .PA12865
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt452)(\ .PA12862
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt449)(\ .PA12859
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt445)(\ .PA12856
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt443)(\ .PA12853
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt440)(\ .PA12850
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt436)(\ .PA12847
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt434)(\ .PA12844
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt432)(\ .PA12841
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt430)(\ .PA12838
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt428)(\ .PA12835
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt424)(\ .PA12832
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt420)(\ .PA12829
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt416)(\ .PA12826
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt412)(\ .PA12823
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt409)(\ .PA12820
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt406)(\ .PA12817
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt402)(\ .PA12814
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt398)(\ .PA12811
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt394)(\ .PA12808
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt390)(\ .PA12805
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt386)(\ .PA12802
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt381)(\ .PA12799
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt377)(\ .PA12796
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt373)(\ .PA12793
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt371)(\ .PA12790
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt369)(\ .PA12787
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt367)(\ .PA12784
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt365)(\ .PA12781
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt361)(\ .PA12778
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt357)(\ .PA12775
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt353)(\ .PA12772
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt348)(\ .PA12769
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt344)(\ .PA12766
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt340)(\ .PA12763
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt336)(\ .PA12760
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt325)(\ .PA12754
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt319)(\ .PA12751
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt315)(\ .PA12748
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt308)(\ .PA12745
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt304)(\ .PA12742
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt300)(\ .PA12739
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt296)(\ .PA12736
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt294)(\ .PA12733
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt290)(\ .PA12730
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt277)(\ .PA12724
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt273)(\ .PA12721
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt269)(\ .PA12718
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt265)(\ .PA12715
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt261)(\ .PA12712
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt257)(\ .PA12709
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt253)(\ .PA12706
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt250)(\ .PA12703
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5126 bt737)(\ .PA12700
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt732 bt728)(\ .PA12694
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5121 bt736)(\ .PA12688
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5126 bt736)(\ .PA12697
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt729 bt723)(\ .PA12644
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5111 bt727)(\ .PA12618
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt728)(\ .PA12606
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5106 bt737)(\ .PA12602
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5106 bt736)(\ .PA12599
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5116 bt736)(\ .PA12651
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt724)(\ .PA12596
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt527)(\ .PA12590
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5101 bt737)(\ .PA12587
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5111 bt726)(\ .PA12633
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt723 bt526)(\ .PA12573
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5096 bt736)(\ .PA12562
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5096 bt737)(\ .PA12559
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5091 bt736)(\ .PA12553
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5086 bt737)(\ .PA12547
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5086 bt736)(\ .PA12544
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5081 bt737)(\ .PA12541
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5081 bt736)(\ .PA12538
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5076 bt736)(\ .PA12529
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5071 bt737)(\ .PA12521
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt715 bt491)(\ .PA12515
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5066 bt737)(\ .PA12512
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5066 bt736)(\ .PA12509
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt714)(\ .PA12506
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5061 bt737)(\ .PA12503
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5061 bt736)(\ .PA12500
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5076 bt737)(\ .PA12532
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt713)(\ .PA12496
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5056 bt737)(\ .PA12492
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5056 bt736)(\ .PA12489
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5071 bt736)(\ .PA12518
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt711 bt708)(\ .PA12486
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5051 bt737)(\ .PA12483
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5051 bt736)(\ .PA12480
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5046 bt736)(\ .PA12474
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5041 bt737)(\ .PA12468
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5036 bt737)(\ .PA12457
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5036 bt736)(\ .PA12454
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt706 bt495)(\ .PA12451
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5031 bt737)(\ .PA12448
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5031 bt736)(\ .PA12445
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt705)(\ .PA12442
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5026 bt737)(\ .PA12439
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5026 bt736)(\ .PA12436
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5046 bt737)(\ .PA12477
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt704)(\ .PA12432
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5021 bt737)(\ .PA12428
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5021 bt736)(\ .PA12425
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5041 bt736)(\ .PA12465
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt702 bt699)(\ .PA12422
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5016 bt736)(\ .PA12416
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5011 bt737)(\ .PA12413
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5006 bt737)(\ .PA12404
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5006 bt736)(\ .PA12401
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5001 bt737)(\ .PA12393
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5001 bt736)(\ .PA12390
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt697 bt499)(\ .PA12387
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4996 bt737)(\ .PA12384
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4996 bt736)(\ .PA12381
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt696)(\ .PA12378
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4991 bt737)(\ .PA12375
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4991 bt736)(\ .PA12372
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5016 bt737)(\ .PA12419
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt695)(\ .PA12368
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4986 bt736)(\ .PA12361
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5011 bt736)(\ .PA12410
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt693 bt690)(\ .PA12358
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4981 bt737)(\ .PA12355
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4976 bt737)(\ .PA12349
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4976 bt736)(\ .PA12346
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4971 bt737)(\ .PA12340
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4971 bt736)(\ .PA12337
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4966 bt737)(\ .PA12329
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4966 bt736)(\ .PA12326
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt688 bt503)(\ .PA12323
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4961 bt737)(\ .PA12320
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4961 bt736)(\ .PA12317
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt687)(\ .PA12314
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4956 bt736)(\ .PA12308
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4986 bt737)(\ .PA12364
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt686)(\ .PA12304
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4951 bt737)(\ .PA12300
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4981 bt736)(\ .PA12352
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt684 bt681)(\ .PA12294
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4946 bt737)(\ .PA12291
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4946 bt736)(\ .PA12288
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4941 bt736)(\ .PA12282
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4936 bt737)(\ .PA12276
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4936 bt736)(\ .PA12273
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4931 bt737)(\ .PA12265
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4931 bt736)(\ .PA12262
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt679 bt507)(\ .PA12259
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt678)(\ .PA12250
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4921 bt737)(\ .PA12247
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4956 bt737)(\ .PA12311
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt677)(\ .PA12240
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4916 bt737)(\ .PA12236
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4916 bt736)(\ .PA12233
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4951 bt736)(\ .PA12297
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt675 bt672)(\ .PA12230
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4911 bt737)(\ .PA12227
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4911 bt736)(\ .PA12224
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4906 bt736)(\ .PA12218
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4901 bt737)(\ .PA12212
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4901 bt736)(\ .PA12209
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4896 bt737)(\ .PA12201
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4896 bt736)(\ .PA12198
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt670 bt511)(\ .PA12195
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4891 bt737)(\ .PA12192
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4891 bt736)(\ .PA12189
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4886 bt737)(\ .PA12183
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4886 bt736)(\ .PA12180
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4926 bt737)(\ .PA12256
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt668)(\ .PA12176
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4881 bt737)(\ .PA12172
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4881 bt736)(\ .PA12169
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4921 bt736)(\ .PA12244
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt666 bt648)(\ .PA12166
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4876 bt737)(\ .PA12163
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4876 bt736)(\ .PA12160
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4871 bt737)(\ .PA12157
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4871 bt736)(\ .PA12154
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4866 bt737)(\ .PA12148
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4866 bt736)(\ .PA12145
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4861 bt737)(\ .PA12142
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4861 bt736)(\ .PA12139
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4906 bt737)(\ .PA12221
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt662 bt656)(\ .PA12136
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4856 bt737)(\ .PA12133
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4856 bt736)(\ .PA12130
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4851 bt737)(\ .PA12127
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4851 bt736)(\ .PA12124
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt660 bt657)(\ .PA12121
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4846 bt737)(\ .PA12118
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4846 bt736)(\ .PA12115
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4841 bt737)(\ .PA12112
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4841 bt736)(\ .PA12109
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt658 bt653)(\ .PA12106
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4836 bt737)(\ .PA12103
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4836 bt736)(\ .PA12100
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt656)(\ .PA12096
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4831 bt737)(\ .PA12087
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4831 bt736)(\ .PA12084
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt654 bt649)(\ .PA12081
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4826 bt737)(\ .PA12078
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4826 bt736)(\ .PA12075
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt652)(\ .PA12071
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4821 bt737)(\ .PA12062
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4821 bt736)(\ .PA12059
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt650 bt645)(\ .PA12056
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4816 bt737)(\ .PA12053
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4816 bt736)(\ .PA12050
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt648)(\ .PA12046
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4811 bt737)(\ .PA12037
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4811 bt736)(\ .PA12034
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt646 bt606)(\ .PA12031
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4806 bt737)(\ .PA12028
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4806 bt736)(\ .PA12025
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt645)(\ .PA12021
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4801 bt737)(\ .PA12014
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt331)(\ .PA12757
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt581 bt382)(\ .PA12006
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4796 bt736)(\ .PA11998
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4791 bt736)(\ .PA11989
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4786 bt737)(\ .PA11983
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4786 bt736)(\ .PA11980
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt282)(\ .PA12727
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt577 bt382)(\ .PA11975
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4781 bt737)(\ .PA11970
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4781 bt736)(\ .PA11967
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4776 bt737)(\ .PA11961
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4776 bt736)(\ .PA11958
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4771 bt737)(\ .PA11952
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4771 bt736)(\ .PA11949
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt573 bt382)(\ .PA11944
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4766 bt737)(\ .PA11939
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4766 bt736)(\ .PA11936
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4761 bt737)(\ .PA11930
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4761 bt736)(\ .PA11927
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt635)(\ .PA11918
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4756 bt737)(\ .PA11914
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4751 bt737)(\ .PA11905
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4751 bt736)(\ .PA11902
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt630)(\ .PA11894
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4746 bt737)(\ .PA11891
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5116 bt737)(\ .PA12654
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt722)(\ .PA12593
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt564 bt382)(\ .PA11883
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4741 bt737)(\ .PA11878
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4741 bt736)(\ .PA11875
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt628 bt618)(\ .PA11872
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4736 bt737)(\ .PA11869
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4736 bt736)(\ .PA11866
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt627)(\ .PA11863
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4801 bt736)(\ .PA12011
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt626)(\ .PA11860
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4731 bt737)(\ .PA11857
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4731 bt736)(\ .PA11854
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt560 bt382)(\ .PA11849
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4726 bt737)(\ .PA11844
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5101 bt736)(\ .PA12584
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt720 bt717)(\ .PA12550
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt558 bt382)(\ .PA11836
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4721 bt737)(\ .PA11831
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4721 bt736)(\ .PA11828
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4796 bt737)(\ .PA12001
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt624 bt619)(\ .PA11825
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4716 bt737)(\ .PA11822
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4716 bt736)(\ .PA11819
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4791 bt737)(\ .PA11992
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt623)(\ .PA11816
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt622)(\ .PA11813
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4711 bt736)(\ .PA11807
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5091 bt737)(\ .PA12556
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt554 bt382)(\ .PA11802
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4706 bt736)(\ .PA11794
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt552 bt382)(\ .PA11789
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4701 bt736)(\ .PA11781
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4696 bt736)(\ .PA11772
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt619)(\ .PA11763
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4691 bt736)(\ .PA11756
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4686 bt736)(\ .PA11747
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt614)(\ .PA11739
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4681 bt736)(\ .PA11733
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4676 bt736)(\ .PA11720
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt612 bt607)(\ .PA11717
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4671 bt737)(\ .PA11714
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4671 bt736)(\ .PA11711
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt610)(\ .PA11707
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4756 bt736)(\ .PA11911
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt611)(\ .PA11702
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4666 bt737)(\ .PA11698
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4666 bt736)(\ .PA11695
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt608 bt531)(\ .PA11692
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4661 bt737)(\ .PA11689
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4661 bt736)(\ .PA11686
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt606)(\ .PA11682
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4746 bt736)(\ .PA11888
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt607)(\ .PA11677
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4656 bt737)(\ .PA11673
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4656 bt736)(\ .PA11670
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt604 bt586)(\ .PA11667
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4651 bt737)(\ .PA11664
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4651 bt736)(\ .PA11661
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4646 bt737)(\ .PA11658
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4646 bt736)(\ .PA11655
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt602 bt590)(\ .PA11652
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4641 bt737)(\ .PA11649
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4641 bt736)(\ .PA11646
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4636 bt737)(\ .PA11643
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4636 bt736)(\ .PA11640
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4726 bt736)(\ .PA11841
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt600 bt594)(\ .PA11637
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4631 bt737)(\ .PA11634
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4631 bt736)(\ .PA11631
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4626 bt737)(\ .PA11628
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4626 bt736)(\ .PA11625
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4621 bt737)(\ .PA11619
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4621 bt736)(\ .PA11616
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4616 bt737)(\ .PA11613
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4711 bt737)(\ .PA11810
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt596 bt591)(\ .PA11607
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4706 bt737)(\ .PA11797
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt594)(\ .PA11597
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt595)(\ .PA11592
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4606 bt737)(\ .PA11588
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4606 bt736)(\ .PA11585
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4701 bt737)(\ .PA11784
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt592 bt587)(\ .PA11582
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4601 bt737)(\ .PA11579
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4601 bt736)(\ .PA11576
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4696 bt737)(\ .PA11775
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt590)(\ .PA11572
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt591)(\ .PA11567
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4596 bt737)(\ .PA11563
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4596 bt736)(\ .PA11560
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4691 bt737)(\ .PA11759
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt588 bt583)(\ .PA11557
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4591 bt737)(\ .PA11554
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4591 bt736)(\ .PA11551
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4686 bt737)(\ .PA11750
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt586)(\ .PA11547
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt587)(\ .PA11542
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4586 bt737)(\ .PA11538
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4586 bt736)(\ .PA11535
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4681 bt737)(\ .PA11736
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt584 bt535)(\ .PA11532
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4581 bt737)(\ .PA11529
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4581 bt736)(\ .PA11526
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4676 bt737)(\ .PA11723
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt583)(\ .PA11522
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt582)(\ .PA11518
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4576 bt737)(\ .PA11515
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4576 bt736)(\ .PA11512
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4571 bt737)(\ .PA11498
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4571 bt736)(\ .PA11495
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt579 bt569)(\ .PA11492
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4566 bt737)(\ .PA11489
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4566 bt736)(\ .PA11486
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt578)(\ .PA11483
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4561 bt737)(\ .PA11480
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4561 bt736)(\ .PA11477
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4556 bt737)(\ .PA11463
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4556 bt736)(\ .PA11460
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt575 bt570)(\ .PA11457
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4551 bt737)(\ .PA11454
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt574)(\ .PA11448
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4546 bt737)(\ .PA11445
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4541 bt737)(\ .PA11428
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4541 bt736)(\ .PA11425
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt571 bt566)(\ .PA11422
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4536 bt737)(\ .PA11419
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4536 bt736)(\ .PA11416
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt569)(\ .PA11412
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4531 bt737)(\ .PA11403
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4531 bt736)(\ .PA11400
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt567 bt539)(\ .PA11397
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4526 bt737)(\ .PA11394
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4526 bt736)(\ .PA11391
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt566)(\ .PA11387
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4521 bt737)(\ .PA11380
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4521 bt736)(\ .PA11377
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt564 bt310)(\ .PA11370
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4516 bt737)(\ .PA11363
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4516 bt736)(\ .PA11360
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4511 bt737)(\ .PA11354
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4511 bt736)(\ .PA11351
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt559)(\ .PA11345
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4506 bt737)(\ .PA11342
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4506 bt736)(\ .PA11339
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4501 bt737)(\ .PA11325
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4501 bt736)(\ .PA11322
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4941 bt737)(\ .PA12285
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt558 bt310)(\ .PA11315
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4496 bt737)(\ .PA11308
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4496 bt736)(\ .PA11305
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4616 bt736)(\ .PA11610
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt556 bt549)(\ .PA11302
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4491 bt737)(\ .PA11299
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4491 bt736)(\ .PA11296
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4611 bt736)(\ .PA11601
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt555)(\ .PA11293
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4611 bt737)(\ .PA11604
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt553)(\ .PA11290
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4486 bt737)(\ .PA11287
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4486 bt736)(\ .PA11284
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt669)(\ .PA12186
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt554 bt310)(\ .PA11277
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4481 bt737)(\ .PA11270
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4481 bt736)(\ .PA11267
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4926 bt736)(\ .PA12253
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt552 bt310)(\ .PA11260
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4476 bt737)(\ .PA11253
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4476 bt736)(\ .PA11250
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt550 bt545)(\ .PA11247
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4471 bt737)(\ .PA11244
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4471 bt736)(\ .PA11241
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt548)(\ .PA11237
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4466 bt737)(\ .PA11228
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4466 bt736)(\ .PA11225
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt546 bt540)(\ .PA11222
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4461 bt737)(\ .PA11219
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4461 bt736)(\ .PA11216
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt545)(\ .PA11212
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4456 bt737)(\ .PA11205
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4456 bt736)(\ .PA11202
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt543 bt310)(\ .PA11195
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4451 bt737)(\ .PA11188
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4451 bt736)(\ .PA11185
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4446 bt737)(\ .PA11179
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt540)(\ .PA11167
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4436 bt737)(\ .PA11154
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4436 bt736)(\ .PA11151
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt536)(\ .PA11142
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4431 bt736)(\ .PA11135
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4426 bt737)(\ .PA11129
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4426 bt736)(\ .PA11126
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt532)(\ .PA11117
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4421 bt736)(\ .PA11110
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4416 bt737)(\ .PA11098
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4411 bt737)(\ .PA11089
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4406 bt737)(\ .PA11080
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4406 bt736)(\ .PA11077
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt521)(\ .PA11071
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4401 bt737)(\ .PA11068
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt522 bt286)(\ .PA11056
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4396 bt737)(\ .PA11047
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4396 bt736)(\ .PA11044
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt520)(\ .PA11040
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4391 bt736)(\ .PA11033
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4386 bt737)(\ .PA11027
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt517)(\ .PA11017
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4381 bt737)(\ .PA11013
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4376 bt737)(\ .PA11002
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt513 bt508)(\ .PA10996
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4371 bt737)(\ .PA10993
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4371 bt736)(\ .PA10990
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt511)(\ .PA10986
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4366 bt737)(\ .PA10977
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4366 bt736)(\ .PA10974
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt509 bt504)(\ .PA10971
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4361 bt737)(\ .PA10968
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4361 bt736)(\ .PA10965
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt507)(\ .PA10961
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4356 bt737)(\ .PA10952
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt505 bt500)(\ .PA10946
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4351 bt737)(\ .PA10943
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt503)(\ .PA10936
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4346 bt737)(\ .PA10927
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4346 bt736)(\ .PA10924
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt501 bt496)(\ .PA10921
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4341 bt737)(\ .PA10918
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4341 bt736)(\ .PA10915
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt499)(\ .PA10911
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4336 bt737)(\ .PA10902
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4336 bt736)(\ .PA10899
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt497 bt492)(\ .PA10896
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4331 bt737)(\ .PA10893
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4331 bt736)(\ .PA10890
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt495)(\ .PA10886
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4326 bt737)(\ .PA10877
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt493 bt251)(\ .PA10871
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4321 bt737)(\ .PA10868
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt297)(\ .PA9418
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt295 bt287)(\ .PA9400
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt293 bt283)(\ .PA9388
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt289 bt280)(\ .PA9379
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt288)(\ .PA9370
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt276 bt271)(\ .PA9292
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt274)(\ .PA9282
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt272 bt267)(\ .PA9267
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt270)(\ .PA9257
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt268 bt263)(\ .PA9242
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt266)(\ .PA9232
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt264 bt259)(\ .PA9217
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt262)(\ .PA9207
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt260 bt255)(\ .PA9192
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt258)(\ .PA9182
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt256 bt248)(\ .PA9167
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt254)(\ .PA9157
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt734)(\ .PA9122
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5131 bt734)(\ .PA9117
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4311 bt737)(\ .PA10843
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5126 bt733)(\ .PA9110
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4306 bt737)(\ .PA10837
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5121 bt732)(\ .PA9103
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4301 bt737)(\ .PA10828
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt1892 bt731)(\ .PA9090
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4401 bt736)(\ .PA11065
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt332 bt310)(\ .PA9666
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4211 bt736)(\ .PA10657
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5116 bt730)(\ .PA9077
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4296 bt737)(\ .PA10817
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5111 bt729)(\ .PA9060
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4291 bt737)(\ .PA10808
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5106 bt725)(\ .PA9024
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4286 bt737)(\ .PA10799
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5101 bt724)(\ .PA9017
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4281 bt737)(\ .PA10788
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5096 bt722)(\ .PA9010
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4276 bt737)(\ .PA10779
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt718 bt713)(\ .PA12535
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5091 bt721)(\ .PA9003
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4271 bt737)(\ .PA10773
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt717)(\ .PA12525
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5086 bt720)(\ .PA8996
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4266 bt737)(\ .PA10764
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5081 bt719)(\ .PA8989
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4261 bt737)(\ .PA10753
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5076 bt718)(\ .PA8982
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4256 bt737)(\ .PA10744
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5071 bt716)(\ .PA8975
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4441 bt737)(\ .PA11163
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt349 bt310)(\ .PA9801
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt543 bt382)(\ .PA11728
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5066 bt715)(\ .PA8968
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4246 bt737)(\ .PA10724
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt709 bt704)(\ .PA12471
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5061 bt714)(\ .PA8961
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4431 bt737)(\ .PA11138
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt345 bt310)(\ .PA9766
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4241 bt737)(\ .PA10715
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt708)(\ .PA12461
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5056 bt712)(\ .PA8954
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4236 bt737)(\ .PA10709
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5051 bt711)(\ .PA8947
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4421 bt737)(\ .PA11113
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt341 bt310)(\ .PA9731
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4231 bt737)(\ .PA10700
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5046 bt710)(\ .PA8940
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4226 bt737)(\ .PA10689
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5041 bt709)(\ .PA8933
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4221 bt737)(\ .PA10680
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5036 bt707)(\ .PA8926
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt700 bt695)(\ .PA12407
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5031 bt706)(\ .PA8919
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4211 bt737)(\ .PA10660
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt699)(\ .PA12397
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5026 bt705)(\ .PA8912
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4206 bt737)(\ .PA10651
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5021 bt703)(\ .PA8905
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4391 bt737)(\ .PA11036
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt328 bt310)(\ .PA9628
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4201 bt737)(\ .PA10645
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5016 bt702)(\ .PA8898
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4196 bt737)(\ .PA10636
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5011 bt701)(\ .PA8891
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4191 bt737)(\ .PA10625
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5006 bt700)(\ .PA8884
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3786 bt736)(\ .PA9773
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt691 bt686)(\ .PA12343
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5001 bt698)(\ .PA8877
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt690)(\ .PA12333
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4996 bt697)(\ .PA8870
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4176 bt737)(\ .PA10596
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt581 bt310)(\ .PA11505
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4991 bt696)(\ .PA8863
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4171 bt737)(\ .PA10587
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4986 bt694)(\ .PA8856
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4166 bt737)(\ .PA10581
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3766 bt736)(\ .PA9721
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt577 bt310)(\ .PA11470
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4981 bt693)(\ .PA8849
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4161 bt737)(\ .PA10572
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4976 bt692)(\ .PA8842
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4251 bt737)(\ .PA10735
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt429 bt426)(\ .PA10417
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4156 bt737)(\ .PA10561
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3756 bt736)(\ .PA9696
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt682 bt677)(\ .PA12279
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt573 bt310)(\ .PA11435
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4971 bt691)(\ .PA8835
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4151 bt737)(\ .PA10552
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3751 bt736)(\ .PA9687
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt681)(\ .PA12269
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4966 bt689)(\ .PA8828
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4146 bt737)(\ .PA10543
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3746 bt736)(\ .PA9673
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4961 bt688)(\ .PA8821
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4141 bt737)(\ .PA10532
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4956 bt687)(\ .PA8814
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4136 bt737)(\ .PA10523
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3736 bt736)(\ .PA9647
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4951 bt685)(\ .PA8807
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4946 bt684)(\ .PA8800
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3726 bt736)(\ .PA9618
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt673 bt668)(\ .PA12215
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt560 bt310)(\ .PA11332
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4941 bt683)(\ .PA8793
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt672)(\ .PA12205
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4936 bt682)(\ .PA8786
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4116 bt737)(\ .PA10488
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3716 bt736)(\ .PA9592
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4931 bt680)(\ .PA8779
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4111 bt737)(\ .PA10479
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4926 bt679)(\ .PA8772
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4106 bt737)(\ .PA10468
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3706 bt736)(\ .PA9563
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4921 bt678)(\ .PA8765
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4101 bt737)(\ .PA10459
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4916 bt676)(\ .PA8758
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4096 bt737)(\ .PA10453
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3696 bt736)(\ .PA9537
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt664 bt652)(\ .PA12151
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4911 bt675)(\ .PA8751
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4186 bt737)(\ .PA10616
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt408 bt404)(\ .PA10260
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4906 bt674)(\ .PA8744
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4181 bt737)(\ .PA10607
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt407)(\ .PA10251
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4086 bt737)(\ .PA10438
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3686 bt736)(\ .PA9512
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4901 bt673)(\ .PA8737
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4081 bt737)(\ .PA10429
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4896 bt671)(\ .PA8730
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4076 bt737)(\ .PA10423
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4891 bt670)(\ .PA8723
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4071 bt737)(\ .PA10414
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4886 bt669)(\ .PA8716
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4066 bt737)(\ .PA10408
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt657)(\ .PA12091
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4881 bt667)(\ .PA8709
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4061 bt737)(\ .PA10399
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4876 bt666)(\ .PA8702
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4056 bt737)(\ .PA10383
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3646 bt736)(\ .PA9406
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt653)(\ .PA12066
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4871 bt665)(\ .PA8695
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4051 bt737)(\ .PA10374
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3641 bt736)(\ .PA9391
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4866 bt664)(\ .PA8688
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4046 bt737)(\ .PA10358
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3636 bt736)(\ .PA9382
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt649)(\ .PA12041
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4861 bt663)(\ .PA8681
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4041 bt737)(\ .PA10349
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3631 bt736)(\ .PA9373
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4856 bt662)(\ .PA8674
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4131 bt737)(\ .PA10517
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt393 bt388)(\ .PA10121
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3626 bt736)(\ .PA9361
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt644)(\ .PA12017
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4851 bt661)(\ .PA8667
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4126 bt737)(\ .PA10508
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt392)(\ .PA10112
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3621 bt736)(\ .PA9340
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt642 bt634)(\ .PA11995
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4846 bt660)(\ .PA8660
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4216 bt737)(\ .PA10671
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt249 bt248)(\ .PA9127
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4121 bt737)(\ .PA10497
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt382 bt322)(\ .PA10098
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3616 bt736)(\ .PA9329
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt641)(\ .PA11986
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4841 bt659)(\ .PA8653
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3611 bt736)(\ .PA9320
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt639 bt635)(\ .PA11964
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4836 bt658)(\ .PA8646
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3606 bt736)(\ .PA9306
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt638)(\ .PA11955
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4831 bt655)(\ .PA8639
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3601 bt736)(\ .PA9295
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt636 bt631)(\ .PA11933
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4826 bt654)(\ .PA8632
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3596 bt736)(\ .PA9286
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt634)(\ .PA11923
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4821 bt651)(\ .PA8625
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3591 bt736)(\ .PA9270
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt632 bt610)(\ .PA11908
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4816 bt650)(\ .PA8618
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4091 bt737)(\ .PA10444
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt1035 bt382)(\ .PA7307
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3996 bt737)(\ .PA10248
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3586 bt736)(\ .PA9261
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt631)(\ .PA11898
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4811 bt647)(\ .PA8611
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3991 bt737)(\ .PA10235
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3581 bt736)(\ .PA9245
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4806 bt646)(\ .PA8604
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3986 bt737)(\ .PA10226
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3571 bt736)(\ .PA9220
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4796 bt643)(\ .PA8590
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3976 bt737)(\ .PA10201
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3566 bt736)(\ .PA9211
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4791 bt642)(\ .PA8583
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3971 bt737)(\ .PA10187
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3561 bt736)(\ .PA9195
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4786 bt641)(\ .PA8576
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3966 bt737)(\ .PA10174
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3556 bt736)(\ .PA9186
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt620 bt615)(\ .PA11778
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4781 bt640)(\ .PA8569
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3961 bt737)(\ .PA10165
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3551 bt736)(\ .PA9170
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt618)(\ .PA11768
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4776 bt639)(\ .PA8562
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3956 bt737)(\ .PA10153
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3546 bt736)(\ .PA9161
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt616 bt611)(\ .PA11753
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4771 bt638)(\ .PA8555
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3951 bt737)(\ .PA10140
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3541 bt736)(\ .PA9145
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt491)(\ .PA10861
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt615)(\ .PA11743
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4766 bt637)(\ .PA8548
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3946 bt737)(\ .PA10127
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3536 bt736)(\ .PA9132
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt489 bt486)(\ .PA10846
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4761 bt636)(\ .PA8541
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4036 bt737)(\ .PA10333
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt364 bt359)(\ .PA9903
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3941 bt737)(\ .PA10118
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4756 bt633)(\ .PA8534
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4031 bt737)(\ .PA10324
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt362)(\ .PA9893
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4751 bt632)(\ .PA8527
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4026 bt737)(\ .PA10310
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt360 bt355)(\ .PA9878
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3931 bt737)(\ .PA10093
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4746 bt630)(\ .PA8520
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4021 bt737)(\ .PA10297
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt358)(\ .PA9868
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3926 bt737)(\ .PA10080
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4741 bt629)(\ .PA8513
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4016 bt737)(\ .PA10288
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt356 bt351)(\ .PA9853
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3921 bt737)(\ .PA10071
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4736 bt628)(\ .PA8506
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4011 bt737)(\ .PA10279
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt354)(\ .PA9843
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3916 bt737)(\ .PA10055
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4731 bt627)(\ .PA8499
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4006 bt737)(\ .PA10266
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt352 bt301)(\ .PA9828
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4726 bt626)(\ .PA8492
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4001 bt737)(\ .PA10257
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt351)(\ .PA9818
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3906 bt737)(\ .PA10032
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4721 bt625)(\ .PA8485
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3901 bt737)(\ .PA10019
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt598 bt595)(\ .PA11622
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4716 bt624)(\ .PA8478
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3896 bt737)(\ .PA10010
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4711 bt623)(\ .PA8471
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3891 bt737)(\ .PA9994
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4706 bt622)(\ .PA8464
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3886 bt737)(\ .PA9985
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4701 bt621)(\ .PA8457
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3881 bt737)(\ .PA9969
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4696 bt620)(\ .PA8450
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4691 bt617)(\ .PA8443
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4686 bt616)(\ .PA8436
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3866 bt737)(\ .PA9945
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4681 bt614)(\ .PA8429
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3861 bt737)(\ .PA9939
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4676 bt613)(\ .PA8422
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4671 bt612)(\ .PA8415
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3851 bt737)(\ .PA9924
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4666 bt609)(\ .PA8408
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4661 bt608)(\ .PA8401
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3936 bt737)(\ .PA10106
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt321)(\ .PA9586
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3841 bt737)(\ .PA9909
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4656 bt605)(\ .PA8394
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3836 bt737)(\ .PA9900
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4651 bt604)(\ .PA8387
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3831 bt737)(\ .PA9884
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4646 bt603)(\ .PA8380
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3826 bt737)(\ .PA9875
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt570)(\ .PA11407
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4641 bt602)(\ .PA8373
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3821 bt737)(\ .PA9859
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4636 bt601)(\ .PA8366
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3911 bt737)(\ .PA10046
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt872 bt310)(\ .PA6981
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3816 bt737)(\ .PA9850
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt565)(\ .PA11383
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4631 bt600)(\ .PA8359
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3811 bt737)(\ .PA9834
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt562 bt548)(\ .PA11357
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4626 bt599)(\ .PA8352
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3806 bt737)(\ .PA9825
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4616 bt597)(\ .PA8338
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3796 bt737)(\ .PA9794
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4611 bt596)(\ .PA8331
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3791 bt737)(\ .PA9785
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4606 bt593)(\ .PA8324
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3786 bt737)(\ .PA9776
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4601 bt592)(\ .PA8317
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3876 bt737)(\ .PA9960
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt843 bt295)(\ .PA6916
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3781 bt737)(\ .PA9759
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt549)(\ .PA11232
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4596 bt589)(\ .PA8310
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3871 bt737)(\ .PA9954
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt837 bt293)(\ .PA6898
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3776 bt737)(\ .PA9750
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4591 bt588)(\ .PA8303
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3771 bt737)(\ .PA9741
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt539)(\ .PA11172
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4576 bt582)(\ .PA8282
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3756 bt737)(\ .PA9699
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt537 bt532)(\ .PA11157
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4571 bt580)(\ .PA8275
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3846 bt737)(\ .PA9915
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt280)(\ .PA9313
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3751 bt737)(\ .PA9690
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3856 bt737)(\ .PA9930
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt283)(\ .PA9336
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt541 bt536)(\ .PA11182
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4581 bt584)(\ .PA8289
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3761 bt737)(\ .PA9715
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt535)(\ .PA11147
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4566 bt579)(\ .PA8268
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3746 bt737)(\ .PA9676
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt533 bt515)(\ .PA11132
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4561 bt578)(\ .PA8261
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3741 bt737)(\ .PA9659
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt531)(\ .PA11122
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4556 bt576)(\ .PA8254
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3736 bt737)(\ .PA9650
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt529 bt522)(\ .PA11104
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4551 bt575)(\ .PA8247
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3731 bt737)(\ .PA9638
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt527 bt520)(\ .PA11092
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4546 bt574)(\ .PA8240
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3726 bt737)(\ .PA9621
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt524 bt517)(\ .PA11083
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4541 bt572)(\ .PA8233
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3721 bt737)(\ .PA9604
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt523)(\ .PA11074
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4536 bt571)(\ .PA8226
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3716 bt737)(\ .PA9595
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4531 bt568)(\ .PA8219
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3711 bt737)(\ .PA9583
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt518 bt512)(\ .PA11030
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4526 bt567)(\ .PA8212
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3706 bt737)(\ .PA9566
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt516)(\ .PA11021
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4521 bt565)(\ .PA8205
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3701 bt737)(\ .PA9549
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt515)(\ .PA11006
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4516 bt563)(\ .PA8198
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3696 bt737)(\ .PA9540
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4511 bt562)(\ .PA8191
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3691 bt737)(\ .PA9524
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt512)(\ .PA10981
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4506 bt561)(\ .PA8184
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3686 bt737)(\ .PA9515
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4501 bt559)(\ .PA8177
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3681 bt737)(\ .PA9501
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt508)(\ .PA10956
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4496 bt557)(\ .PA8170
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3676 bt737)(\ .PA9484
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3991 bt406)(\ .PA7435
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3986 bt405)(\ .PA7428
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3981 bt402)(\ .PA7421
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3976 bt401)(\ .PA7414
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3971 bt399)(\ .PA7407
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3961 bt397)(\ .PA7393
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3941 bt393)(\ .PA7365
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3936 bt392)(\ .PA7358
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3931 bt391)(\ .PA7351
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3926 bt390)(\ .PA7344
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3916 bt386)(\ .PA7330
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3906 bt383)(\ .PA7316
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3576 bt736)(\ .PA9236
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4801 bt644)(\ .PA8597
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3981 bt737)(\ .PA10210
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3541 bt253)(\ .PA6737
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3901 bt381)(\ .PA7298
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3896 bt380)(\ .PA7291
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3891 bt377)(\ .PA7284
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3886 bt376)(\ .PA7277
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3881 bt373)(\ .PA7270
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3876 bt372)(\ .PA7263
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3871 bt371)(\ .PA7256
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3966 bt398)(\ .PA7400
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt338)(\ .PA9703
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3866 bt370)(\ .PA7249
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3951 bt395)(\ .PA7379
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt330 bt316)(\ .PA9653
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3851 bt367)(\ .PA7228
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3946 bt394)(\ .PA7372
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt329)(\ .PA9644
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3846 bt366)(\ .PA7221
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3841 bt365)(\ .PA7214
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3836 bt364)(\ .PA7207
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3831 bt361)(\ .PA7200
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3826 bt360)(\ .PA7193
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3921 bt389)(\ .PA7337
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt317)(\ .PA9528
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3821 bt357)(\ .PA7186
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3811 bt353)(\ .PA7172
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3806 bt352)(\ .PA7165
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3801 bt350)(\ .PA7158
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3796 bt348)(\ .PA7151
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3791 bt347)(\ .PA7144
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt5121 bt737)(\ .PA12691
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt1884 bt726)(\ .PA9037
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3786 bt346)(\ .PA7137
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3771 bt342)(\ .PA7116
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3766 bt340)(\ .PA7109
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3761 bt339)(\ .PA7102
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3856 bt368)(\ .PA7235
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt822 bt286)(\ .PA6862
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3756 bt336)(\ .PA7095
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3751 bt335)(\ .PA7088
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3636 bt290)(\ .PA6887
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3781 bt344)(\ .PA7130
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt544)(\ .PA11208
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4586 bt585)(\ .PA8296
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3766 bt737)(\ .PA9724
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4321 bt493)(\ .PA7897
(th_let_pf _ (bv_bbl_bvult _ _ _ _ _ _ bt727 bt731)(\ .PA12669
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3631 bt289)(\ .PA6880
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4551 bt736)(\ .PA11451
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt1398 bt529)(\ .PA8051
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3776 bt343)(\ .PA7123
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4316 bt490)(\ .PA7890
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt395)(\ .PA10156
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3616 bt282)(\ .PA6842
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3611 bt281)(\ .PA6835
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3606 bt279)(\ .PA6828
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3601 bt277)(\ .PA6821
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3596 bt276)(\ .PA6814
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3591 bt273)(\ .PA6807
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3556 bt260)(\ .PA6758
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3551 bt257)(\ .PA6751
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3546 bt256)(\ .PA6744
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3536 bt250)(\ .PA6730
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3861 bt369)(\ .PA7242
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3956 bt396)(\ .PA7386
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt333)(\ .PA9679
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3666 bt304)(\ .PA6958
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3561 bt261)(\ .PA6765
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3566 bt264)(\ .PA6772
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3571 bt265)(\ .PA6779
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3576 bt268)(\ .PA6786
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3581 bt269)(\ .PA6793
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3586 bt272)(\ .PA6800
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3641 bt294)(\ .PA6905
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3646 bt296)(\ .PA6930
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3651 bt299)(\ .PA6937
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3656 bt300)(\ .PA6944
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3661 bt303)(\ .PA6951
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3671 bt307)(\ .PA6965
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3816 bt356)(\ .PA7179
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3911 bt385)(\ .PA7323
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt312)(\ .PA9504
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt561)(\ .PA11348
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4621 bt598)(\ .PA8345
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3801 bt737)(\ .PA9811
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3541 bt737)(\ .PA9148
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4361 bt509)(\ .PA7953
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4356 bt506)(\ .PA7946
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3536 bt737)(\ .PA9135
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3676 bt308)(\ .PA6972
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3681 bt312)(\ .PA6990
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3686 bt314)(\ .PA6997
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3691 bt315)(\ .PA7004
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3696 bt318)(\ .PA7011
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3701 bt319)(\ .PA7018
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3706 bt321)(\ .PA7025
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3711 bt323)(\ .PA7032
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3716 bt324)(\ .PA7039
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3721 bt325)(\ .PA7046
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3726 bt327)(\ .PA7053
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3731 bt329)(\ .PA7060
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3736 bt330)(\ .PA7067
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3741 bt331)(\ .PA7074
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3746 bt333)(\ .PA7081
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3996 bt407)(\ .PA7442
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4001 bt408)(\ .PA7449
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4006 bt409)(\ .PA7456
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4011 bt410)(\ .PA7463
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4016 bt411)(\ .PA7470
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4021 bt412)(\ .PA7477
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4026 bt413)(\ .PA7484
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4031 bt415)(\ .PA7491
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4036 bt416)(\ .PA7498
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt366 bt363)(\ .PA9918
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4041 bt419)(\ .PA7505
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4046 bt420)(\ .PA7512
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4051 bt423)(\ .PA7519
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4056 bt424)(\ .PA7526
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4061 bt427)(\ .PA7533
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4066 bt428)(\ .PA7540
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4071 bt429)(\ .PA7547
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4076 bt430)(\ .PA7554
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4081 bt431)(\ .PA7561
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4086 bt432)(\ .PA7568
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4091 bt433)(\ .PA7575
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4096 bt434)(\ .PA7582
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4101 bt435)(\ .PA7589
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4106 bt436)(\ .PA7596
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4111 bt438)(\ .PA7603
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4116 bt439)(\ .PA7610
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4121 bt440)(\ .PA7617
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4126 bt442)(\ .PA7624
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4131 bt443)(\ .PA7631
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt382 bt328)(\ .PA10145
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4136 bt444)(\ .PA7638
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt396)(\ .PA10159
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4141 bt445)(\ .PA7645
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt397 bt387)(\ .PA10168
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4146 bt447)(\ .PA7652
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4151 bt448)(\ .PA7659
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4156 bt449)(\ .PA7666
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4161 bt451)(\ .PA7673
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4166 bt452)(\ .PA7680
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4171 bt453)(\ .PA7687
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4176 bt454)(\ .PA7694
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4181 bt456)(\ .PA7701
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4186 bt457)(\ .PA7708
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt410)(\ .PA10282
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4191 bt458)(\ .PA7715
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt411 bt403)(\ .PA10291
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4196 bt460)(\ .PA7722
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3621 bt284)(\ .PA6849
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4546 bt736)(\ .PA11442
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt1393 bt527)(\ .PA8033
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3626 bt288)(\ .PA6873
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4201 bt461)(\ .PA7729
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4206 bt462)(\ .PA7736
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4211 bt463)(\ .PA7743
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4216 bt465)(\ .PA7750
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4221 bt466)(\ .PA7757
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4226 bt467)(\ .PA7764
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4231 bt469)(\ .PA7771
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4236 bt470)(\ .PA7778
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4241 bt471)(\ .PA7785
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4246 bt472)(\ .PA7792
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4251 bt474)(\ .PA7799
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt431 bt425)(\ .PA10432
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4256 bt475)(\ .PA7806
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4261 bt476)(\ .PA7813
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4266 bt478)(\ .PA7820
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4271 bt479)(\ .PA7827
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt437)(\ .PA10472
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4276 bt480)(\ .PA7834
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4281 bt481)(\ .PA7841
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4286 bt483)(\ .PA7848
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4291 bt484)(\ .PA7855
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4296 bt485)(\ .PA7862
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4301 bt487)(\ .PA7869
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt446)(\ .PA10536
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4306 bt488)(\ .PA7876
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4311 bt489)(\ .PA7883
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4326 bt494)(\ .PA7904
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4331 bt497)(\ .PA7911
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt455)(\ .PA10600
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4336 bt498)(\ .PA7918
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4341 bt501)(\ .PA7925
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4346 bt502)(\ .PA7932
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4351 bt505)(\ .PA7939
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3546 bt737)(\ .PA9164
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt464)(\ .PA10664
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4366 bt510)(\ .PA7960
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3551 bt737)(\ .PA9173
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt320 bt310)(\ .PA9556
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4371 bt513)(\ .PA7967
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3556 bt737)(\ .PA9189
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4376 bt514)(\ .PA7974
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3561 bt737)(\ .PA9198
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4381 bt516)(\ .PA7981
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3566 bt737)(\ .PA9214
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4386 bt518)(\ .PA7988
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3571 bt737)(\ .PA9223
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4391 bt519)(\ .PA7995
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3576 bt737)(\ .PA9239
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt473)(\ .PA10728
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4396 bt521)(\ .PA8002
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3581 bt737)(\ .PA9248
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4401 bt523)(\ .PA8009
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3586 bt737)(\ .PA9264
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4406 bt524)(\ .PA8016
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3591 bt737)(\ .PA9273
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4411 bt525)(\ .PA8023
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3596 bt737)(\ .PA9289
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4416 bt528)(\ .PA8040
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3601 bt737)(\ .PA9298
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4421 bt530)(\ .PA8065
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3606 bt737)(\ .PA9309
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt482)(\ .PA10792
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4426 bt533)(\ .PA8072
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3611 bt737)(\ .PA9323
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4431 bt534)(\ .PA8079
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3616 bt737)(\ .PA9332
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4436 bt537)(\ .PA8086
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3621 bt737)(\ .PA9343
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4441 bt538)(\ .PA8093
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3626 bt737)(\ .PA9364
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4446 bt541)(\ .PA8100
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3631 bt737)(\ .PA9376
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4451 bt542)(\ .PA8107
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3636 bt737)(\ .PA9385
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt492)(\ .PA10856
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4456 bt544)(\ .PA8114
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3641 bt737)(\ .PA9394
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4461 bt546)(\ .PA8121
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3646 bt737)(\ .PA9409
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt496)(\ .PA10881
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4466 bt547)(\ .PA8128
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4471 bt550)(\ .PA8135
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3651 bt737)(\ .PA9425
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt500)(\ .PA10906
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4476 bt551)(\ .PA8142
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3656 bt737)(\ .PA9434
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4481 bt553)(\ .PA8149
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3661 bt737)(\ .PA9450
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt504)(\ .PA10931
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4486 bt555)(\ .PA8156
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3666 bt737)(\ .PA9459
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4491 bt556)(\ .PA8163
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3671 bt737)(\ .PA9475
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3651 bt736)(\ .PA9422
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt299 bt278)(\ .PA9428
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3656 bt736)(\ .PA9431
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3796 bt736)(\ .PA9791
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt301)(\ .PA9443
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3661 bt736)(\ .PA9447
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt303 bt298)(\ .PA9453
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3666 bt736)(\ .PA9456
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3806 bt736)(\ .PA9822
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt305)(\ .PA9468
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3671 bt736)(\ .PA9472
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt307 bt302)(\ .PA9478
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3676 bt736)(\ .PA9481
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt311 bt310)(\ .PA9491
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3681 bt736)(\ .PA9498
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt313)(\ .PA9508
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt314 bt306)(\ .PA9518
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3691 bt736)(\ .PA9521
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt316)(\ .PA9533
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt318 bt313)(\ .PA9543
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3701 bt736)(\ .PA9546
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4376 bt736)(\ .PA10999
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt322 bt310)(\ .PA9573
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4186 bt736)(\ .PA10613
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3711 bt736)(\ .PA9580
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt737 bt278)(\ .PA9302
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3841 bt736)(\ .PA9906
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt279)(\ .PA9317
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3846 bt736)(\ .PA9912
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3721 bt736)(\ .PA9601
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt326 bt310)(\ .PA9611
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3731 bt736)(\ .PA9635
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt327)(\ .PA9641
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3741 bt736)(\ .PA9656
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt334)(\ .PA9683
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt335 bt305)(\ .PA9693
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt337)(\ .PA9708
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3761 bt736)(\ .PA9712
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt339 bt334)(\ .PA9718
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3771 bt736)(\ .PA9738
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt342)(\ .PA9744
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3776 bt736)(\ .PA9747
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt343 bt338)(\ .PA9753
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt255)(\ .PA9152
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3781 bt736)(\ .PA9756
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt346)(\ .PA9779
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt259)(\ .PA9177
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3791 bt736)(\ .PA9782
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt347 bt337)(\ .PA9788
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt263)(\ .PA9202
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3801 bt736)(\ .PA9808
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt350)(\ .PA9814
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt267)(\ .PA9227
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3811 bt736)(\ .PA9831
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt355)(\ .PA9838
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3816 bt736)(\ .PA9847
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt271)(\ .PA9252
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3821 bt736)(\ .PA9856
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt359)(\ .PA9863
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3826 bt736)(\ .PA9872
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt275)(\ .PA9277
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3831 bt736)(\ .PA9881
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt363)(\ .PA9888
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3836 bt736)(\ .PA9897
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt281 bt275)(\ .PA9326
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3851 bt736)(\ .PA9921
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3856 bt736)(\ .PA9927
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3956 bt736)(\ .PA10150
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt284)(\ .PA9367
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3861 bt736)(\ .PA9936
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3866 bt736)(\ .PA9942
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt370 bt358)(\ .PA9948
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3871 bt736)(\ .PA9951
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3876 bt736)(\ .PA9957
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt372 bt354)(\ .PA9963
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt298)(\ .PA9413
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3881 bt736)(\ .PA9966
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3976 bt736)(\ .PA10198
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt374)(\ .PA9978
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3886 bt736)(\ .PA9982
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt376 bt297)(\ .PA9988
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt302)(\ .PA9438
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3891 bt736)(\ .PA9991
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3986 bt736)(\ .PA10223
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt378)(\ .PA10003
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3896 bt736)(\ .PA10007
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt380 bt375)(\ .PA10013
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt306)(\ .PA9463
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3901 bt736)(\ .PA10016
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt382 bt311)(\ .PA10024
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3906 bt736)(\ .PA10029
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4001 bt736)(\ .PA10254
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt384)(\ .PA10039
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3911 bt736)(\ .PA10043
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt385 bt379)(\ .PA10049
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3916 bt736)(\ .PA10052
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4011 bt736)(\ .PA10276
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt387)(\ .PA10064
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3921 bt736)(\ .PA10068
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt389 bt384)(\ .PA10074
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3926 bt736)(\ .PA10077
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4021 bt736)(\ .PA10294
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3931 bt736)(\ .PA10090
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt323)(\ .PA9589
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3936 bt736)(\ .PA10103
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt391)(\ .PA10109
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt324 bt317)(\ .PA9598
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3941 bt736)(\ .PA10115
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3946 bt736)(\ .PA10124
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt382 bt326)(\ .PA10132
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3951 bt736)(\ .PA10137
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3961 bt736)(\ .PA10162
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3966 bt736)(\ .PA10171
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt382 bt332)(\ .PA10179
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3971 bt736)(\ .PA10184
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4061 bt736)(\ .PA10396
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt400)(\ .PA10194
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt401 bt378)(\ .PA10204
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3981 bt736)(\ .PA10207
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt375)(\ .PA9973
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4071 bt736)(\ .PA10411
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt403)(\ .PA10219
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt405 bt400)(\ .PA10229
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3991 bt736)(\ .PA10232
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt379)(\ .PA9998
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4081 bt736)(\ .PA10426
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt3996 bt736)(\ .PA10245
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4006 bt736)(\ .PA10263
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt382 bt345)(\ .PA10271
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4016 bt736)(\ .PA10285
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt382 bt349)(\ .PA10302
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4026 bt736)(\ .PA10307
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4111 bt736)(\ .PA10476
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt414)(\ .PA10317
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4031 bt736)(\ .PA10321
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt415 bt374)(\ .PA10327
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4036 bt736)(\ .PA10330
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4121 bt736)(\ .PA10494
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt417)(\ .PA10342
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4041 bt736)(\ .PA10346
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt419 bt414)(\ .PA10352
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4046 bt736)(\ .PA10355
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4131 bt736)(\ .PA10514
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt421)(\ .PA10367
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt368 bt362)(\ .PA9933
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4051 bt736)(\ .PA10371
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt423 bt418)(\ .PA10377
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4056 bt736)(\ .PA10380
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4141 bt736)(\ .PA10529
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt252 bt251)(\ .PA9140
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt425)(\ .PA10392
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt427 bt422)(\ .PA10402
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4066 bt736)(\ .PA10405
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4076 bt736)(\ .PA10420
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4086 bt736)(\ .PA10435
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4091 bt736)(\ .PA10441
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4171 bt736)(\ .PA10584
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt383)(\ .PA10035
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4096 bt736)(\ .PA10450
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4101 bt736)(\ .PA10456
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt435 bt417)(\ .PA10462
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt388)(\ .PA10059
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4106 bt736)(\ .PA10465
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt438)(\ .PA10482
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt382 bt320)(\ .PA10085
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4116 bt736)(\ .PA10485
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt439 bt274)(\ .PA10491
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4196 bt736)(\ .PA10633
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4126 bt736)(\ .PA10505
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4201 bt736)(\ .PA10642
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4136 bt736)(\ .PA10520
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt287 bt286)(\ .PA9352
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt444 bt441)(\ .PA10526
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4146 bt736)(\ .PA10540
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt447)(\ .PA10546
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4151 bt736)(\ .PA10549
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt448 bt270)(\ .PA10555
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt399)(\ .PA10190
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4156 bt736)(\ .PA10558
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt422)(\ .PA10362
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4226 bt736)(\ .PA10686
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4161 bt736)(\ .PA10569
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4326 bt736)(\ .PA10874
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt451 bt446)(\ .PA10575
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4231 bt736)(\ .PA10697
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt404)(\ .PA10214
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4166 bt736)(\ .PA10578
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt453 bt450)(\ .PA10590
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt382 bt341)(\ .PA10240
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4176 bt736)(\ .PA10593
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4181 bt736)(\ .PA10604
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt456)(\ .PA10610
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt457 bt266)(\ .PA10619
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4191 bt736)(\ .PA10622
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4351 bt736)(\ .PA10940
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt459)(\ .PA10629
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4256 bt736)(\ .PA10741
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4356 bt736)(\ .PA10949
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt460 bt455)(\ .PA10639
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4261 bt736)(\ .PA10750
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt413)(\ .PA10313
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4206 bt736)(\ .PA10648
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt462 bt459)(\ .PA10654
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt418)(\ .PA10337
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4216 bt736)(\ .PA10668
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt465)(\ .PA10674
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4221 bt736)(\ .PA10677
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt466 bt262)(\ .PA10683
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4381 bt736)(\ .PA11010
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt468)(\ .PA10693
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4286 bt736)(\ .PA10796
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4386 bt736)(\ .PA11024
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt469 bt464)(\ .PA10703
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt441)(\ .PA10501
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4291 bt736)(\ .PA10805
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt426)(\ .PA10387
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4236 bt736)(\ .PA10706
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4241 bt736)(\ .PA10712
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt471 bt468)(\ .PA10718
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4246 bt736)(\ .PA10721
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4251 bt736)(\ .PA10732
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt474)(\ .PA10738
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt475 bt258)(\ .PA10747
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4411 bt736)(\ .PA11086
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt477)(\ .PA10757
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4316 bt736)(\ .PA10849
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt433 bt421)(\ .PA10447
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4266 bt736)(\ .PA10761
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4416 bt736)(\ .PA11095
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt478 bt473)(\ .PA10767
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt450)(\ .PA10565
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4321 bt736)(\ .PA10865
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4271 bt736)(\ .PA10770
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4276 bt736)(\ .PA10776
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt480 bt477)(\ .PA10782
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4281 bt736)(\ .PA10785
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt483)(\ .PA10802
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt484 bt254)(\ .PA10811
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt442 bt437)(\ .PA10511
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4296 bt736)(\ .PA10814
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4441 bt736)(\ .PA11160
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt736 bt486)(\ .PA10821
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4301 bt736)(\ .PA10825
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4446 bt736)(\ .PA11176
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt487 bt482)(\ .PA10831
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4306 bt736)(\ .PA10834
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4311 bt736)(\ .PA10840
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt4316 bt737)(\ .PA10852
(decl_atom let482 (\ bb.v0 (\ bb.a0
(decl_atom let483 (\ bb.v1 (\ bb.a1
(decl_atom let3 (\ bb.v2599 (\ bb.a2599
(decl_atom let6 (\ bb.v3625 (\ bb.a3625
(decl_atom let8 (\ bb.v74 (\ bb.a74
(decl_atom let12 (\ bb.v741 (\ bb.a741
(decl_atom let15 (\ bb.v749 (\ bb.a749
(decl_atom let16 (\ bb.v2631 (\ bb.a2631
(decl_atom let18 (\ bb.v3572 (\ bb.a3572
(decl_atom let20 (\ bb.v3586 (\ bb.a3586
(decl_atom let22 (\ bb.v3588 (\ bb.a3588
(decl_atom let24 (\ bb.v3590 (\ bb.a3590
(decl_atom let29 (\ bb.v1312 (\ bb.a1312
(decl_atom let31 (\ bb.v3596 (\ bb.a3596
(decl_atom let33 (\ bb.v3615 (\ bb.a3615
(decl_atom let35 (\ bb.v1340 (\ bb.a1340
(decl_atom let37 (\ bb.v3643 (\ bb.a3643
(decl_atom let39 (\ bb.v3801 (\ bb.a3801
(decl_atom let41 (\ bb.v3913 (\ bb.a3913
(decl_atom let43 (\ bb.v3915 (\ bb.a3915
(decl_atom let45 (\ bb.v3917 (\ bb.a3917
(decl_atom let444 (\ bb.v1362 (\ bb.a1362
(decl_atom let447 (\ bb.v2638 (\ bb.a2638
(decl_atom let449 (\ bb.v760 (\ bb.a760
(decl_atom let452 (\ bb.v3568 (\ bb.a3568
(decl_atom let453 (\ bb.v1300 (\ bb.a1300
(decl_atom let455 (\ bb.v3584 (\ bb.a3584
(decl_atom let457 (\ bb.v1304 (\ bb.a1304
(decl_atom let459 (\ bb.v3594 (\ bb.a3594
(decl_atom let461 (\ bb.v1308 (\ bb.a1308
(decl_atom let463 (\ bb.v3609 (\ bb.a3609
(decl_atom let464 (\ bb.v3599 (\ bb.a3599
(decl_atom let465 (\ bb.v1322 (\ bb.a1322
(decl_atom let467 (\ bb.v3623 (\ bb.a3623
(decl_atom let469 (\ bb.v1336 (\ bb.a1336
(decl_atom let471 (\ bb.v3641 (\ bb.a3641
(decl_atom let473 (\ bb.v1350 (\ bb.a1350
(decl_atom let475 (\ bb.v3647 (\ bb.a3647
(decl_atom let477 (\ bb.v1354 (\ bb.a1354
(decl_atom let479 (\ bb.v3921 (\ bb.a3921
(decl_atom let481 (\ bb.v1358 (\ bb.a1358
(decl_atom let484 (\ bb.v75 (\ bb.a75
(decl_atom let485 (\ bb.v77 (\ bb.a77
(decl_atom let486 (\ bb.v79 (\ bb.a79
(decl_atom let487 (\ bb.v76 (\ bb.a76
(decl_atom let488 (\ bb.v78 (\ bb.a78
(decl_atom let489 (\ bb.v80 (\ bb.a80
(decl_atom let491 (\ bb.v81 (\ bb.a81
(decl_atom let492 (\ bb.v750 (\ bb.a750
(decl_atom let493 (\ bb.v753 (\ bb.a753
(decl_atom let494 (\ bb.v756 (\ bb.a756
(decl_atom let495 (\ bb.v742 (\ bb.a742
(decl_atom let496 (\ bb.v743 (\ bb.a743
(decl_atom let497 (\ bb.v744 (\ bb.a744
(decl_atom let498 (\ bb.v751 (\ bb.a751
(decl_atom let499 (\ bb.v754 (\ bb.a754
(decl_atom let500 (\ bb.v757 (\ bb.a757
(decl_atom let501 (\ bb.v752 (\ bb.a752
(decl_atom let502 (\ bb.v755 (\ bb.a755
(decl_atom let503 (\ bb.v758 (\ bb.a758
(decl_atom let505 (\ bb.v759 (\ bb.a759
(decl_atom let506 (\ bb.v761 (\ bb.a761
(decl_atom let507 (\ bb.v762 (\ bb.a762
(decl_atom let508 (\ bb.v763 (\ bb.a763
(decl_atom let509 (\ bb.v1301 (\ bb.a1301
(decl_atom let510 (\ bb.v1302 (\ bb.a1302
(decl_atom let511 (\ bb.v1303 (\ bb.a1303
(decl_atom let512 (\ bb.v1305 (\ bb.a1305
(decl_atom let513 (\ bb.v1306 (\ bb.a1306
(decl_atom let514 (\ bb.v1307 (\ bb.a1307
(decl_atom let515 (\ bb.v1309 (\ bb.a1309
(decl_atom let516 (\ bb.v1310 (\ bb.a1310
(decl_atom let517 (\ bb.v1311 (\ bb.a1311
(decl_atom let518 (\ bb.v1319 (\ bb.a1319
(decl_atom let519 (\ bb.v1320 (\ bb.a1320
(decl_atom let528 (\ bb.v1321 (\ bb.a1321
(decl_atom let529 (\ bb.v1323 (\ bb.a1323
(decl_atom let530 (\ bb.v1326 (\ bb.a1326
(decl_atom let531 (\ bb.v1329 (\ bb.a1329
(decl_atom let532 (\ bb.v1332 (\ bb.a1332
(decl_atom let533 (\ bb.v1324 (\ bb.a1324
(decl_atom let534 (\ bb.v1327 (\ bb.a1327
(decl_atom let535 (\ bb.v1330 (\ bb.a1330
(decl_atom let536 (\ bb.v1333 (\ bb.a1333
(decl_atom let537 (\ bb.v1325 (\ bb.a1325
(decl_atom let538 (\ bb.v1328 (\ bb.a1328
(decl_atom let539 (\ bb.v1331 (\ bb.a1331
(decl_atom let540 (\ bb.v1334 (\ bb.a1334
(decl_atom let543 (\ bb.v1335 (\ bb.a1335
(decl_atom let544 (\ bb.v1337 (\ bb.a1337
(decl_atom let545 (\ bb.v1338 (\ bb.a1338
(decl_atom let546 (\ bb.v1339 (\ bb.a1339
(decl_atom let547 (\ bb.v1343 (\ bb.a1343
(decl_atom let548 (\ bb.v1345 (\ bb.a1345
(decl_atom let549 (\ bb.v1344 (\ bb.a1344
(decl_atom let550 (\ bb.v1346 (\ bb.a1346
(decl_atom let557 (\ bb.v1349 (\ bb.a1349
(decl_atom let558 (\ bb.v1351 (\ bb.a1351
(decl_atom let559 (\ bb.v1352 (\ bb.a1352
(decl_atom let560 (\ bb.v1353 (\ bb.a1353
(decl_atom let561 (\ bb.v1355 (\ bb.a1355
(decl_atom let562 (\ bb.v1356 (\ bb.a1356
(decl_atom let563 (\ bb.v1357 (\ bb.a1357
(decl_atom let564 (\ bb.v1359 (\ bb.a1359
(decl_atom let565 (\ bb.v1360 (\ bb.a1360
(decl_atom let566 (\ bb.v1361 (\ bb.a1361
(decl_atom let567 (\ bb.v1363 (\ bb.a1363
(decl_atom let568 (\ bb.v2600 (\ bb.a2600
(decl_atom let569 (\ bb.v2602 (\ bb.a2602
(decl_atom let570 (\ bb.v2604 (\ bb.a2604
(decl_atom let571 (\ bb.v2601 (\ bb.a2601
(decl_atom let572 (\ bb.v2603 (\ bb.a2603
(decl_atom let573 (\ bb.v2605 (\ bb.a2605
(decl_atom let575 (\ bb.v2606 (\ bb.a2606
(decl_atom let576 (\ bb.v2632 (\ bb.a2632
(decl_atom let577 (\ bb.v2633 (\ bb.a2633
(decl_atom let578 (\ bb.v2634 (\ bb.a2634
(decl_atom let580 (\ bb.v2635 (\ bb.a2635
(decl_atom let581 (\ bb.v2639 (\ bb.a2639
(decl_atom let582 (\ bb.v3569 (\ bb.a3569
(decl_atom let583 (\ bb.v3573 (\ bb.a3573
(decl_atom let584 (\ bb.v3575 (\ bb.a3575
(decl_atom let585 (\ bb.v3577 (\ bb.a3577
(decl_atom let586 (\ bb.v3579 (\ bb.a3579
(decl_atom let587 (\ bb.v3574 (\ bb.a3574
(decl_atom let588 (\ bb.v3576 (\ bb.a3576
(decl_atom let589 (\ bb.v3578 (\ bb.a3578
(decl_atom let590 (\ bb.v3580 (\ bb.a3580
(decl_atom let593 (\ bb.v3581 (\ bb.a3581
(decl_atom let594 (\ bb.v3585 (\ bb.a3585
(decl_atom let595 (\ bb.v3587 (\ bb.a3587
(decl_atom let596 (\ bb.v3589 (\ bb.a3589
(decl_atom let597 (\ bb.v3591 (\ bb.a3591
(decl_atom let598 (\ bb.v3595 (\ bb.a3595
(decl_atom let599 (\ bb.v3597 (\ bb.a3597
(decl_atom let600 (\ bb.v3598 (\ bb.a3598
(decl_atom let601 (\ bb.v3600 (\ bb.a3600
(decl_atom let602 (\ bb.v3602 (\ bb.a3602
(decl_atom let603 (\ bb.v3604 (\ bb.a3604
(decl_atom let604 (\ bb.v3606 (\ bb.a3606
(decl_atom let605 (\ bb.v3601 (\ bb.a3601
(decl_atom let606 (\ bb.v3603 (\ bb.a3603
(decl_atom let607 (\ bb.v3605 (\ bb.a3605
(decl_atom let608 (\ bb.v3607 (\ bb.a3607
(decl_atom let611 (\ bb.v3608 (\ bb.a3608
(decl_atom let612 (\ bb.v3613 (\ bb.a3613
(decl_atom let618 (\ bb.v3614 (\ bb.a3614
(decl_atom let619 (\ bb.v3616 (\ bb.a3616
(decl_atom let620 (\ bb.v3617 (\ bb.a3617
(decl_atom let621 (\ bb.v3618 (\ bb.a3618
(decl_atom let622 (\ bb.v3619 (\ bb.a3619
(decl_atom let625 (\ bb.v3620 (\ bb.a3620
(decl_atom let626 (\ bb.v3624 (\ bb.a3624
(decl_atom let628 (\ bb.v3629 (\ bb.a3629
(decl_atom let630 (\ bb.v3631 (\ bb.a3631
(decl_atom let631 (\ bb.v3628 (\ bb.a3628
(decl_atom let632 (\ bb.v3630 (\ bb.a3630
(decl_atom let633 (\ bb.v3632 (\ bb.a3632
(decl_atom let635 (\ bb.v3634 (\ bb.a3634
(decl_atom let636 (\ bb.v3627 (\ bb.a3627
(decl_atom let637 (\ bb.v3633 (\ bb.a3633
(decl_atom let638 (\ bb.v3635 (\ bb.a3635
(decl_atom let640 (\ bb.v3637 (\ bb.a3637
(decl_atom let642 (\ bb.v3636 (\ bb.a3636
(decl_atom let643 (\ bb.v3638 (\ bb.a3638
(decl_atom let644 (\ bb.v3642 (\ bb.a3642
(decl_atom let645 (\ bb.v3644 (\ bb.a3644
(decl_atom let646 (\ bb.v3648 (\ bb.a3648
(decl_atom let647 (\ bb.v3802 (\ bb.a3802
(decl_atom let648 (\ bb.v3914 (\ bb.a3914
(decl_atom let649 (\ bb.v3916 (\ bb.a3916
(decl_atom let650 (\ bb.v3918 (\ bb.a3918
(decl_atom let651 (\ bb.v3922 (\ bb.a3922

;; Bit-blasting definitional clauses 

(satlem _ _ (asf _ _ _ bb.a1311 (\ bb.l2622 (ast _ _ _ bb.a1308 (\ bb.l2617 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2617) (iff_elim_1 _ _ .PA9024)) bb.l2622)))))) (\ bb.pb3459
(satlem _ _ (asf _ _ _ bb.a3914 (\ bb.l7828 (ast _ _ _ bb.a3913 (\ bb.l7827 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7827) (iff_elim_1 _ _ .PA13099)) bb.l7828)))))) (\ bb.pb8814
(satlem _ _ (asf _ _ _ bb.a1310 (\ bb.l2620 (ast _ _ _ bb.a3914 (\ bb.l7829 (ast _ _ _ bb.a0 (\ bb.l1 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1) (iff_elim_1 _ _ bb.l7829)) bb.l2620)))))))) (\ bb.pb8812
(satlem _ _ (asf _ _ _ bb.a1309 (\ bb.l2618 (ast _ _ _ bb.a1310 (\ bb.l2621 (ast _ _ _ bb.a1311 (\ bb.l2623 (clausify_false (contra _ (or_elim_1 _ _ bb.l2618 (iff_elim_2 _ _ bb.l2623)) (not_not_intro _ bb.l2621))))))))) (\ bb.pb3456
(satlem _ _ (ast _ _ _ bb.a3595 (\ bb.l7191 (ast _ _ _ bb.a1309 (\ bb.l2619 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2619) (iff_elim_1 _ _ bb.l7191)) bb.l2)))))))) (\ bb.pb8133
(satlem _ _ (ast _ _ _ bb.a3594 (\ bb.l7189 (asf _ _ _ bb.a3595 (\ bb.l7190 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7189) (iff_elim_1 _ _ .PA12602)) bb.l7190)))))) (\ bb.pb8135
(satlem _ _ (asf _ _ _ bb.a763 (\ bb.l1526 (ast _ _ _ bb.a760 (\ bb.l1521 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1521) (iff_elim_1 _ _ .PA8065)) bb.l1526)))))) (\ bb.pb2637
(satlem _ _ (asf _ _ _ bb.a762 (\ bb.l1524 (ast _ _ _ bb.a3802 (\ bb.l7605 (ast _ _ _ bb.a0 (\ bb.l1 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1) (iff_elim_1 _ _ bb.l7605)) bb.l1524)))))))) (\ bb.pb8588
(satlem _ _ (ast _ _ _ bb.a2639 (\ bb.l5279 (ast _ _ _ bb.a761 (\ bb.l1523 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1523) (iff_elim_1 _ _ bb.l5279)) bb.l2)))))))) (\ bb.pb6150
(satlem _ _ (ast _ _ _ bb.a2638 (\ bb.l5277 (asf _ _ _ bb.a2639 (\ bb.l5278 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l5277) (iff_elim_1 _ _ .PA11113)) bb.l5278)))))) (\ bb.pb6152
(satlem _ _ (asf _ _ _ bb.a1307 (\ bb.l2614 (ast _ _ _ bb.a1304 (\ bb.l2609 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2609) (iff_elim_1 _ _ .PA9017)) bb.l2614)))))) (\ bb.pb3453
(satlem _ _ (asf _ _ _ bb.a1306 (\ bb.l2612 (ast _ _ _ bb.a3591 (\ bb.l7183 (ast _ _ _ bb.a0 (\ bb.l1 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1) (iff_elim_1 _ _ bb.l7183)) bb.l2612)))))))) (\ bb.pb8125
(satlem _ _ (asf _ _ _ bb.a3918 (\ bb.l7836 (ast _ _ _ bb.a3917 (\ bb.l7835 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7835) (iff_elim_1 _ _ .PA13105)) bb.l7836)))))) (\ bb.pb8822
(satlem _ _ (ast _ _ _ bb.a3648 (\ bb.l7297 (ast _ _ _ bb.a1355 (\ bb.l2711 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2711) (iff_elim_1 _ _ bb.l7297)) bb.l2)))))))) (\ bb.pb8280
(satlem _ _ (ast _ _ _ bb.a3647 (\ bb.l7295 (asf _ _ _ bb.a3648 (\ bb.l7296 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7295) (iff_elim_1 _ _ .PA12700)) bb.l7296)))))) (\ bb.pb8282
(satlem _ _ (asf _ _ _ bb.a1320 (\ bb.l2640 (ast _ _ _ bb.a1321 (\ bb.l2643 (clausify_false (contra _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l2643))) bb.l2640)))))) (\ bb.pb3472
(satlem _ _ (ast _ _ _ bb.a3614 (\ bb.l7229 (asf _ _ _ bb.a3613 (\ bb.l7226 (clausify_false (contra _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l7229))) bb.l7226)))))) (\ bb.pb8183
(satlem _ _ (ast _ _ _ bb.a3609 (\ bb.l7219 (asf _ _ _ bb.a3614 (\ bb.l7228 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7219) (iff_elim_1 _ _ .PA12633)) bb.l7228)))))) (\ bb.pb8185
(satlem _ _ (asf _ _ _ bb.a81 (\ bb.l162 (ast _ _ _ bb.a74 (\ bb.l149 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l149) (iff_elim_1 _ _ .PA6862)) bb.l162)))))) (\ bb.pb1611
(satlem _ _ (asf _ _ _ bb.a76 (\ bb.l152 (ast _ _ _ bb.a81 (\ bb.l163 (clausify_false (contra _ (and_elim_1 _ _ bb.l163) bb.l152)))))) (\ bb.pb1607
(satlem _ _ (asf _ _ _ bb.a78 (\ bb.l156 (ast _ _ _ bb.a81 (\ bb.l163 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ bb.l163)) bb.l156)))))) (\ bb.pb1608
(satlem _ _ (ast _ _ _ bb.a75 (\ bb.l151 (ast _ _ _ bb.a76 (\ bb.l153 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ bb.l2 (iff_elim_2 _ _ bb.l153)) (not_not_intro _ bb.l151))))))))) (\ bb.pb1601
(satlem _ _ (ast _ _ _ bb.a77 (\ bb.l155 (ast _ _ _ bb.a78 (\ bb.l157 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ bb.l2 (iff_elim_2 _ _ bb.l157)) (not_not_intro _ bb.l155))))))))) (\ bb.pb1603
(satlem _ _ (ast _ _ _ bb.a79 (\ bb.l159 (ast _ _ _ bb.a80 (\ bb.l161 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ bb.l2 (iff_elim_2 _ _ bb.l161)) (not_not_intro _ bb.l159))))))))) (\ bb.pb1605
(satlem _ _ (asf _ _ _ bb.a744 (\ bb.l1488 (ast _ _ _ bb.a741 (\ bb.l1483 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1483) (iff_elim_1 _ _ .PA8033)) bb.l1488)))))) (\ bb.pb2607
(satlem _ _ (asf _ _ _ bb.a752 (\ bb.l1504 (ast _ _ _ bb.a759 (\ bb.l1519 (clausify_false (contra _ (and_elim_1 _ _ bb.l1519) bb.l1504)))))) (\ bb.pb2627
(satlem _ _ (asf _ _ _ bb.a758 (\ bb.l1516 (ast _ _ _ bb.a759 (\ bb.l1519 (clausify_false (contra _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l1519)) bb.l1516)))))) (\ bb.pb2629
(satlem _ _ (asf _ _ _ bb.a1335 (\ bb.l2670 (ast _ _ _ bb.a1322 (\ bb.l2645 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2645) (iff_elim_1 _ _ .PA9060)) bb.l2670)))))) (\ bb.pb3497
(satlem _ _ (asf _ _ _ bb.a1328 (\ bb.l2656 (ast _ _ _ bb.a1335 (\ bb.l2671 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ bb.l2671)) bb.l2656)))))) (\ bb.pb3493
(satlem _ _ (asf _ _ _ bb.a1331 (\ bb.l2662 (ast _ _ _ bb.a1335 (\ bb.l2671 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l2671))) bb.l2662)))))) (\ bb.pb3494
(satlem _ _ (ast _ _ _ bb.a1326 (\ bb.l2653 (asf _ _ _ bb.a3602 (\ bb.l7204 (ast _ _ _ bb.a3603 (\ bb.l7207 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2653) (iff_elim_1 _ _ bb.l7207)) bb.l7204)))))))) (\ bb.pb8145
(satlem _ _ (asf _ _ _ bb.a3627 (\ bb.l7254 (ast _ _ _ bb.a3633 (\ bb.l7267 (clausify_false (contra _ (and_elim_1 _ _ bb.l7267) bb.l7254)))))) (\ bb.pb8242
(satlem _ _ (asf _ _ _ bb.a1332 (\ bb.l2664 (ast _ _ _ bb.a1333 (\ bb.l2667 (ast _ _ _ bb.a1334 (\ bb.l2669 (clausify_false (contra _ (or_elim_1 _ _ bb.l2664 (iff_elim_2 _ _ bb.l2669)) (not_not_intro _ bb.l2667))))))))) (\ bb.pb3489
(satlem _ _ (ast _ _ _ bb.a3585 (\ bb.l7171 (ast _ _ _ bb.a1305 (\ bb.l2611 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2611) (iff_elim_1 _ _ bb.l7171)) bb.l2)))))))) (\ bb.pb8113
(satlem _ _ (asf _ _ _ bb.a1361 (\ bb.l2722 (ast _ _ _ bb.a1358 (\ bb.l2717 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2717) (iff_elim_1 _ _ .PA9117)) bb.l2722)))))) (\ bb.pb3536
(satlem _ _ (ast _ _ _ bb.a751 (\ bb.l1503 (asf _ _ _ bb.a750 (\ bb.l1500 (ast _ _ _ bb.a752 (\ bb.l1505 (clausify_false (contra _ (or_elim_1 _ _ bb.l1500 (iff_elim_2 _ _ bb.l1505)) (not_not_intro _ bb.l1503))))))))) (\ bb.pb2616
(satlem _ _ (ast _ _ _ bb.a3573 (\ bb.l7147 (asf _ _ _ bb.a1324 (\ bb.l2648 (ast _ _ _ bb.a3616 (\ bb.l7233 (clausify_false (contra _ (or_elim_1 _ _ bb.l2648 (iff_elim_2 _ _ bb.l7233)) (not_not_intro _ bb.l7147))))))))) (\ bb.pb8188
(satlem _ _ (asf _ _ _ bb.a3802 (\ bb.l7604 (ast _ _ _ bb.a3801 (\ bb.l7603 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7603) (iff_elim_1 _ _ .PA12931)) bb.l7604)))))) (\ bb.pb8590
(satlem _ _ (ast _ _ _ bb.a3575 (\ bb.l7151 (asf _ _ _ bb.a1327 (\ bb.l2654 (ast _ _ _ bb.a3617 (\ bb.l7235 (clausify_false (contra _ (or_elim_1 _ _ bb.l2654 (iff_elim_2 _ _ bb.l7235)) (not_not_intro _ bb.l7151))))))))) (\ bb.pb8192
(satlem _ _ (ast _ _ _ bb.a754 (\ bb.l1509 (asf _ _ _ bb.a753 (\ bb.l1506 (ast _ _ _ bb.a755 (\ bb.l1511 (clausify_false (contra _ (or_elim_1 _ _ bb.l1506 (iff_elim_2 _ _ bb.l1511)) (not_not_intro _ bb.l1509))))))))) (\ bb.pb2620
(satlem _ _ (ast _ _ _ bb.a3922 (\ bb.l7845 (ast _ _ _ bb.a1359 (\ bb.l2719 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2719) (iff_elim_1 _ _ bb.l7845)) bb.l2)))))))) (\ bb.pb8828
(satlem _ _ (ast _ _ _ bb.a1329 (\ bb.l2659 (asf _ _ _ bb.a3604 (\ bb.l7208 (ast _ _ _ bb.a3605 (\ bb.l7211 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2659) (iff_elim_1 _ _ bb.l7211)) bb.l7208)))))))) (\ bb.pb8149
(satlem _ _ (ast _ _ _ bb.a3634 (\ bb.l7269 (asf _ _ _ bb.a1345 (\ bb.l2690 (clausify_false (contra _ (and_elim_2 _ _ bb.l7269) bb.l2690)))))) (\ bb.pb8246
(satlem _ _ (ast _ _ _ bb.a753 (\ bb.l1507 (asf _ _ _ bb.a3575 (\ bb.l7150 (ast _ _ _ bb.a3576 (\ bb.l7153 (clausify_false (contra _ (or_elim_1 _ _ bb.l7150 (iff_elim_2 _ _ bb.l7153)) (not_not_intro _ bb.l1507))))))))) (\ bb.pb8091
(satlem _ _ (asf _ _ _ bb.a1344 (\ bb.l2688 (ast _ _ _ bb.a1349 (\ bb.l2699 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ bb.l2699)) bb.l2688)))))) (\ bb.pb3514
(satlem _ _ (ast _ _ _ bb.a1323 (\ bb.l2647 (asf _ _ _ bb.a3600 (\ bb.l7200 (ast _ _ _ bb.a3601 (\ bb.l7203 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2647) (iff_elim_1 _ _ bb.l7203)) bb.l7200)))))))) (\ bb.pb8141
(satlem _ _ (ast _ _ _ bb.a1330 (\ bb.l2661 (asf _ _ _ bb.a1329 (\ bb.l2658 (ast _ _ _ bb.a1331 (\ bb.l2663 (clausify_false (contra _ (or_elim_1 _ _ bb.l2658 (iff_elim_2 _ _ bb.l2663)) (not_not_intro _ bb.l2661))))))))) (\ bb.pb3485
(satlem _ _ (ast _ _ _ bb.a2601 (\ bb.l5203 (ast _ _ _ bb.a2603 (\ bb.l5207 (ast _ _ _ bb.a2605 (\ bb.l5211 (asf _ _ _ bb.a2606 (\ bb.l5212 (clausify_false (contra _ bb.l5211 (or_elim_1 _ _ (not_not_intro _ bb.l5207) (not_and_elim _ _ (or_elim_1 _ _ (not_not_intro _ bb.l5203) (not_and_elim _ _ bb.l5212)))))))))))))) (\ bb.pb6073
(satlem _ _ (asf _ _ _ bb.a2605 (\ bb.l5210 (asf _ _ _ bb.a2604 (\ bb.l5208 (asf _ _ _ bb.a79 (\ bb.l158 (clausify_false (contra _ (not_not_elim _ (or_elim_1 _ _ bb.l5208 (iff_elim_2 _ _ (not_iff_elim _ _ bb.l5210)))) bb.l158)))))))) (\ bb.pb6069
(satlem _ _ (asf _ _ _ bb.a759 (\ bb.l1518 (ast _ _ _ bb.a749 (\ bb.l1499 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1499) (iff_elim_1 _ _ .PA8051)) bb.l1518)))))) (\ bb.pb2631
(satlem _ _ (asf _ _ _ bb.a3616 (\ bb.l7232 (ast _ _ _ bb.a3620 (\ bb.l7241 (clausify_false (contra _ (and_elim_1 _ _ bb.l7241) bb.l7232)))))) (\ bb.pb8203
(satlem _ _ (asf _ _ _ bb.a3597 (\ bb.l7194 (ast _ _ _ bb.a3598 (\ bb.l7197 (ast _ _ _ bb.a0 (\ bb.l1 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1) (iff_elim_1 _ _ bb.l7197)) bb.l7194)))))))) (\ bb.pb8137
(satlem _ _ (ast _ _ _ bb.a1327 (\ bb.l2655 (asf _ _ _ bb.a1326 (\ bb.l2652 (ast _ _ _ bb.a1328 (\ bb.l2657 (clausify_false (contra _ (or_elim_1 _ _ bb.l2652 (iff_elim_2 _ _ bb.l2657)) (not_not_intro _ bb.l2655))))))))) (\ bb.pb3481
(satlem _ _ (asf _ _ _ bb.a1338 (\ bb.l2676 (ast _ _ _ bb.a3916 (\ bb.l7833 (ast _ _ _ bb.a0 (\ bb.l1 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1) (iff_elim_1 _ _ bb.l7833)) bb.l2676)))))))) (\ bb.pb8816
(satlem _ _ (asf _ _ _ bb.a3629 (\ bb.l7258 (ast _ _ _ bb.a3630 (\ bb.l7261 (clausify_false (contra _ (and_elim_2 _ _ bb.l7261) bb.l7258)))))) (\ bb.pb8234
(satlem _ _ (ast _ _ _ bb.a1324 (\ bb.l2649 (asf _ _ _ bb.a1323 (\ bb.l2646 (ast _ _ _ bb.a1325 (\ bb.l2651 (clausify_false (contra _ (or_elim_1 _ _ bb.l2646 (iff_elim_2 _ _ bb.l2651)) (not_not_intro _ bb.l2649))))))))) (\ bb.pb3477
(satlem _ _ (ast _ _ _ bb.a3600 (\ bb.l7201 (ast _ _ _ bb.a3629 (\ bb.l7259 (clausify_false (contra _ bb.l7201 (and_elim_1 _ _ bb.l7259))))))) (\ bb.pb8230
(satlem _ _ (ast _ _ _ bb.a3613 (\ bb.l7227 (ast _ _ _ bb.a1332 (\ bb.l2665 (asf _ _ _ bb.a1319 (\ bb.l2638 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2665) (iff_elim_1 _ _ bb.l7227)) bb.l2638)))))))) (\ bb.pb8176
(satlem _ _ (asf _ _ _ bb.a80 (\ bb.l160 (ast _ _ _ bb.a81 (\ bb.l163 (clausify_false (contra _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l163)) bb.l160)))))) (\ bb.pb1609
(satlem _ _ (asf _ _ _ bb.a742 (\ bb.l1484 (ast _ _ _ bb.a743 (\ bb.l1487 (ast _ _ _ bb.a744 (\ bb.l1489 (clausify_false (contra _ (or_elim_1 _ _ bb.l1484 (iff_elim_2 _ _ bb.l1489)) (not_not_intro _ bb.l1487))))))))) (\ bb.pb2604
(satlem _ _ (asf _ _ _ bb.a1353 (\ bb.l2706 (ast _ _ _ bb.a1350 (\ bb.l2701 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2701) (iff_elim_1 _ _ .PA9103)) bb.l2706)))))) (\ bb.pb3524
(satlem _ _ (asf _ _ _ bb.a1334 (\ bb.l2668 (ast _ _ _ bb.a1335 (\ bb.l2671 (clausify_false (contra _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l2671))) bb.l2668)))))) (\ bb.pb3495
(satlem _ _ (asf _ _ _ bb.a1352 (\ bb.l2704 (ast _ _ _ bb.a3597 (\ bb.l7195 (ast _ _ _ bb.a3644 (\ bb.l7289 (clausify_false (contra _ (or_elim_1 _ _ bb.l2704 (iff_elim_2 _ _ bb.l7289)) (not_not_intro _ bb.l7195))))))))) (\ bb.pb8271
(satlem _ _ (asf _ _ _ bb.a3591 (\ bb.l7182 (ast _ _ _ bb.a3590 (\ bb.l7181 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7181) (iff_elim_1 _ _ .PA12596)) bb.l7182)))))) (\ bb.pb8127
(satlem _ _ (ast _ _ _ bb.a2604 (\ bb.l5209 (asf _ _ _ bb.a757 (\ bb.l1514 (ast _ _ _ bb.a2634 (\ bb.l5269 (clausify_false (contra _ (or_elim_1 _ _ bb.l1514 (iff_elim_2 _ _ bb.l5269)) (not_not_intro _ bb.l5209))))))))) (\ bb.pb6137
(satlem _ _ (ast _ _ _ bb.a756 (\ bb.l1513 (asf _ _ _ bb.a3577 (\ bb.l7154 (ast _ _ _ bb.a3578 (\ bb.l7157 (clausify_false (contra _ (or_elim_1 _ _ bb.l7154 (iff_elim_2 _ _ bb.l7157)) (not_not_intro _ bb.l1513))))))))) (\ bb.pb8095
(satlem _ _ (asf _ _ _ bb.a1349 (\ bb.l2698 (ast _ _ _ bb.a1340 (\ bb.l2681 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2681) (iff_elim_1 _ _ .PA9090)) bb.l2698)))))) (\ bb.pb3518
(satlem _ _ (ast _ _ _ bb.a3624 (\ bb.l7249 (ast _ _ _ bb.a1337 (\ bb.l2675 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2675) (iff_elim_1 _ _ bb.l7249)) bb.l2)))))))) (\ bb.pb8214
(satlem _ _ (ast _ _ _ bb.a750 (\ bb.l1501 (asf _ _ _ bb.a3573 (\ bb.l7146 (ast _ _ _ bb.a3574 (\ bb.l7149 (clausify_false (contra _ (or_elim_1 _ _ bb.l7146 (iff_elim_2 _ _ bb.l7149)) (not_not_intro _ bb.l1501))))))))) (\ bb.pb8087
(satlem _ _ (ast _ _ _ bb.a3623 (\ bb.l7247 (asf _ _ _ bb.a3624 (\ bb.l7248 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7247) (iff_elim_1 _ _ .PA12654)) bb.l7248)))))) (\ bb.pb8216
(satlem _ _ (ast _ _ _ bb.a2600 (\ bb.l5201 (asf _ _ _ bb.a751 (\ bb.l1502 (ast _ _ _ bb.a2632 (\ bb.l5265 (clausify_false (contra _ (or_elim_1 _ _ bb.l1502 (iff_elim_2 _ _ bb.l5265)) (not_not_intro _ bb.l5201))))))))) (\ bb.pb6129
(satlem _ _ (asf _ _ _ bb.a3587 (\ bb.l7174 (ast _ _ _ bb.a3586 (\ bb.l7173 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7173) (iff_elim_1 _ _ .PA12590)) bb.l7174)))))) (\ bb.pb8119
(satlem _ _ (asf _ _ _ bb.a1337 (\ bb.l2674 (ast _ _ _ bb.a1338 (\ bb.l2677 (ast _ _ _ bb.a1339 (\ bb.l2679 (clausify_false (contra _ (or_elim_1 _ _ bb.l2674 (iff_elim_2 _ _ bb.l2679)) (not_not_intro _ bb.l2677))))))))) (\ bb.pb3500
(satlem _ _ (asf _ _ _ bb.a3574 (\ bb.l7148 (ast _ _ _ bb.a3581 (\ bb.l7163 (clausify_false (contra _ (and_elim_1 _ _ bb.l7163) bb.l7148)))))) (\ bb.pb8102
(satlem _ _ (asf _ _ _ bb.a3644 (\ bb.l7288 (ast _ _ _ bb.a3643 (\ bb.l7287 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7287) (iff_elim_1 _ _ .PA12694)) bb.l7288)))))) (\ bb.pb8274
(satlem _ _ (asf _ _ _ bb.a1351 (\ bb.l2702 (ast _ _ _ bb.a1352 (\ bb.l2705 (ast _ _ _ bb.a1353 (\ bb.l2707 (clausify_false (contra _ (or_elim_1 _ _ bb.l2702 (iff_elim_2 _ _ bb.l2707)) (not_not_intro _ bb.l2705))))))))) (\ bb.pb3521
(satlem _ _ (asf _ _ _ bb.a2632 (\ bb.l5264 (ast _ _ _ bb.a2635 (\ bb.l5271 (clausify_false (contra _ (and_elim_1 _ _ bb.l5271) bb.l5264)))))) (\ bb.pb6140
(satlem _ _ (asf _ _ _ bb.a0 (\ bb.l0 (clausify_false (contra _ truth bb.l0)))) (\ bb.pb2
(satlem _ _ (asf _ _ _ bb.a1302 (\ bb.l2604 (ast _ _ _ bb.a3589 (\ bb.l7179 (ast _ _ _ bb.a0 (\ bb.l1 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1) (iff_elim_1 _ _ bb.l7179)) bb.l2604)))))))) (\ bb.pb8121
(satlem _ _ (asf _ _ _ bb.a1356 (\ bb.l2712 (ast _ _ _ bb.a3918 (\ bb.l7837 (ast _ _ _ bb.a0 (\ bb.l1 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1) (iff_elim_1 _ _ bb.l7837)) bb.l2712)))))))) (\ bb.pb8820
(satlem _ _ (asf _ _ _ bb.a1303 (\ bb.l2606 (ast _ _ _ bb.a1300 (\ bb.l2601 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2601) (iff_elim_1 _ _ .PA9010)) bb.l2606)))))) (\ bb.pb3447
(satlem _ _ (asf _ _ _ bb.a755 (\ bb.l1510 (ast _ _ _ bb.a759 (\ bb.l1519 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ bb.l1519)) bb.l1510)))))) (\ bb.pb2628
(satlem _ _ (asf _ _ _ bb.a1333 (\ bb.l2666 (ast _ _ _ bb.a3579 (\ bb.l7159 (ast _ _ _ bb.a3619 (\ bb.l7239 (clausify_false (contra _ (or_elim_1 _ _ bb.l2666 (iff_elim_2 _ _ bb.l7239)) (not_not_intro _ bb.l7159))))))))) (\ bb.pb8200
(satlem _ _ (asf _ _ _ bb.a3576 (\ bb.l7152 (ast _ _ _ bb.a3581 (\ bb.l7163 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ bb.l7163)) bb.l7152)))))) (\ bb.pb8103
(satlem _ _ (ast _ _ _ bb.a3568 (\ bb.l7137 (asf _ _ _ bb.a3569 (\ bb.l7138 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7137) (iff_elim_1 _ _ .PA12559)) bb.l7138)))))) (\ bb.pb8080
(satlem _ _ (asf _ _ _ bb.a1339 (\ bb.l2678 (ast _ _ _ bb.a1336 (\ bb.l2673 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2673) (iff_elim_1 _ _ .PA9077)) bb.l2678)))))) (\ bb.pb3503
(satlem _ _ (asf _ _ _ bb.a3605 (\ bb.l7210 (ast _ _ _ bb.a3608 (\ bb.l7217 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l7217))) bb.l7210)))))) (\ bb.pb8159
(satlem _ _ (asf _ _ _ bb.a3916 (\ bb.l7832 (ast _ _ _ bb.a3915 (\ bb.l7831 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7831) (iff_elim_1 _ _ .PA13102)) bb.l7832)))))) (\ bb.pb8818
(satlem _ _ (asf _ _ _ bb.a3598 (\ bb.l7196 (ast _ _ _ bb.a3596 (\ bb.l7193 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7193) (iff_elim_1 _ _ .PA12606)) bb.l7196)))))) (\ bb.pb8139
(satlem _ _ (ast _ _ _ bb.a3569 (\ bb.l7139 (ast _ _ _ bb.a1301 (\ bb.l2603 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2603) (iff_elim_1 _ _ bb.l7139)) bb.l2)))))))) (\ bb.pb8078
(satlem _ _ (ast _ _ _ bb.a3642 (\ bb.l7285 (ast _ _ _ bb.a1351 (\ bb.l2703 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2703) (iff_elim_1 _ _ bb.l7285)) bb.l2)))))))) (\ bb.pb8266
(satlem _ _ (asf _ _ _ bb.a743 (\ bb.l1486 (ast _ _ _ bb.a3587 (\ bb.l7175 (ast _ _ _ bb.a0 (\ bb.l1 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1) (iff_elim_1 _ _ bb.l7175)) bb.l1486)))))))) (\ bb.pb8117
(satlem _ _ (asf _ _ _ bb.a1363 (\ bb.l2726 (ast _ _ _ bb.a1362 (\ bb.l2725 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2725) (iff_elim_1 _ _ .PA9122)) bb.l2726)))))) (\ bb.pb3540
(satlem _ _ (asf _ _ _ bb.a3579 (\ bb.l7158 (ast _ _ _ bb.a3580 (\ bb.l7161 (ast _ _ _ bb.a742 (\ bb.l1485 (clausify_false (contra _ (or_elim_1 _ _ bb.l7158 (iff_elim_2 _ _ bb.l7161)) (not_not_intro _ bb.l1485))))))))) (\ bb.pb8099
(satlem _ _ (ast _ _ _ bb.a3577 (\ bb.l7155 (asf _ _ _ bb.a1330 (\ bb.l2660 (ast _ _ _ bb.a3618 (\ bb.l7237 (clausify_false (contra _ (or_elim_1 _ _ bb.l2660 (iff_elim_2 _ _ bb.l7237)) (not_not_intro _ bb.l7155))))))))) (\ bb.pb8196
(satlem _ _ (ast _ _ _ bb.a757 (\ bb.l1515 (asf _ _ _ bb.a756 (\ bb.l1512 (ast _ _ _ bb.a758 (\ bb.l1517 (clausify_false (contra _ (or_elim_1 _ _ bb.l1512 (iff_elim_2 _ _ bb.l1517)) (not_not_intro _ bb.l1515))))))))) (\ bb.pb2624
(satlem _ _ (asf _ _ _ bb.a1321 (\ bb.l2642 (ast _ _ _ bb.a1312 (\ bb.l2625 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2625) (iff_elim_1 _ _ .PA9037)) bb.l2642)))))) (\ bb.pb3474
(satlem _ _ (asf _ _ _ bb.a2601 (\ bb.l5202 (asf _ _ _ bb.a2600 (\ bb.l5200 (asf _ _ _ bb.a75 (\ bb.l150 (clausify_false (contra _ (not_not_elim _ (or_elim_1 _ _ bb.l5200 (iff_elim_2 _ _ (not_iff_elim _ _ bb.l5202)))) bb.l150)))))))) (\ bb.pb6061
(satlem _ _ (asf _ _ _ bb.a3633 (\ bb.l7266 (ast _ _ _ bb.a3635 (\ bb.l7271 (asf _ _ _ bb.a3634 (\ bb.l7268 (clausify_false (contra _ (or_elim_1 _ _ bb.l7266 bb.l7271) bb.l7268)))))))) (\ bb.pb8250
(satlem _ _ (asf _ _ _ bb.a3606 (\ bb.l7212 (ast _ _ _ bb.a3607 (\ bb.l7215 (ast _ _ _ bb.a1332 (\ bb.l2665 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2665) (iff_elim_1 _ _ bb.l7215)) bb.l7212)))))))) (\ bb.pb8153
(satlem _ _ (ast _ _ _ bb.a2602 (\ bb.l5205 (asf _ _ _ bb.a754 (\ bb.l1508 (ast _ _ _ bb.a2633 (\ bb.l5267 (clausify_false (contra _ (or_elim_1 _ _ bb.l1508 (iff_elim_2 _ _ bb.l5267)) (not_not_intro _ bb.l5205))))))))) (\ bb.pb6133
(satlem _ _ (asf _ _ _ bb.a3589 (\ bb.l7178 (ast _ _ _ bb.a3588 (\ bb.l7177 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7177) (iff_elim_1 _ _ .PA12593)) bb.l7178)))))) (\ bb.pb8123
(satlem _ _ (asf _ _ _ bb.a1301 (\ bb.l2602 (ast _ _ _ bb.a1302 (\ bb.l2605 (ast _ _ _ bb.a1303 (\ bb.l2607 (clausify_false (contra _ (or_elim_1 _ _ bb.l2602 (iff_elim_2 _ _ bb.l2607)) (not_not_intro _ bb.l2605))))))))) (\ bb.pb3444
(satlem _ _ (ast _ _ _ bb.a3584 (\ bb.l7169 (asf _ _ _ bb.a3585 (\ bb.l7170 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7169) (iff_elim_1 _ _ .PA12587)) bb.l7170)))))) (\ bb.pb8115
(satlem _ _ (asf _ _ _ bb.a1360 (\ bb.l2720 (ast _ _ _ bb.a1363 (\ bb.l2727 (ast _ _ _ bb.a0 (\ bb.l1 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l1) (iff_elim_1 _ _ bb.l2727)) bb.l2720)))))))) (\ bb.pb3538
(satlem _ _ (asf _ _ _ bb.a1359 (\ bb.l2718 (ast _ _ _ bb.a1360 (\ bb.l2721 (ast _ _ _ bb.a1361 (\ bb.l2723 (clausify_false (contra _ (or_elim_1 _ _ bb.l2718 (iff_elim_2 _ _ bb.l2723)) (not_not_intro _ bb.l2721))))))))) (\ bb.pb3533
(satlem _ _ (asf _ _ _ bb.a1325 (\ bb.l2650 (ast _ _ _ bb.a1335 (\ bb.l2671 (clausify_false (contra _ (and_elim_1 _ _ bb.l2671) bb.l2650)))))) (\ bb.pb3492
(satlem _ _ (ast _ _ _ bb.a3641 (\ bb.l7283 (asf _ _ _ bb.a3642 (\ bb.l7284 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7283) (iff_elim_1 _ _ .PA12691)) bb.l7284)))))) (\ bb.pb8268
(satlem _ _ (asf _ _ _ bb.a1346 (\ bb.l2692 (ast _ _ _ bb.a1349 (\ bb.l2699 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l2699))) bb.l2692)))))) (\ bb.pb3515
(satlem _ _ (asf _ _ _ bb.a1305 (\ bb.l2610 (ast _ _ _ bb.a1306 (\ bb.l2613 (ast _ _ _ bb.a1307 (\ bb.l2615 (clausify_false (contra _ (or_elim_1 _ _ bb.l2610 (iff_elim_2 _ _ bb.l2615)) (not_not_intro _ bb.l2613))))))))) (\ bb.pb3450
(satlem _ _ (ast _ _ _ bb.a3602 (\ bb.l7205 (ast _ _ _ bb.a3628 (\ bb.l7257 (asf _ _ _ bb.a1343 (\ bb.l2686 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7205) (iff_elim_1 _ _ bb.l7257)) bb.l2686)))))))) (\ bb.pb8226
(satlem _ _ (ast _ _ _ bb.a3921 (\ bb.l7843 (asf _ _ _ bb.a3922 (\ bb.l7844 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7843) (iff_elim_1 _ _ .PA13111)) bb.l7844)))))) (\ bb.pb8830
(satlem _ _ (asf _ _ _ bb.a3628 (\ bb.l7256 (ast _ _ _ bb.a3630 (\ bb.l7261 (clausify_false (contra _ (and_elim_1 _ _ bb.l7261) bb.l7256)))))) (\ bb.pb8233
(satlem _ _ (asf _ _ _ bb.a3630 (\ bb.l7260 (ast _ _ _ bb.a3632 (\ bb.l7265 (asf _ _ _ bb.a3631 (\ bb.l7262 (clausify_false (contra _ (or_elim_1 _ _ bb.l7260 bb.l7265) bb.l7262)))))))) (\ bb.pb8241
(satlem _ _ (ast _ _ _ bb.a3604 (\ bb.l7209 (ast _ _ _ bb.a3627 (\ bb.l7255 (asf _ _ _ bb.a1345 (\ bb.l2690 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7209) (iff_elim_1 _ _ bb.l7255)) bb.l2690)))))))) (\ bb.pb8222
(satlem _ _ (ast _ _ _ bb.a1319 (\ bb.l2639 (ast _ _ _ bb.a1320 (\ bb.l2641 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ bb.l2 (iff_elim_2 _ _ bb.l2641)) (not_not_intro _ bb.l2639))))))))) (\ bb.pb3467
(satlem _ _ (asf _ _ _ bb.a3632 (\ bb.l7264 (ast _ _ _ bb.a3633 (\ bb.l7267 (clausify_false (contra _ (and_elim_2 _ _ bb.l7267) bb.l7264)))))) (\ bb.pb8243
(satlem _ _ (asf _ _ _ bb.a3635 (\ bb.l7270 (ast _ _ _ bb.a3636 (\ bb.l7273 (clausify_false (contra _ (and_elim_2 _ _ bb.l7273) bb.l7270)))))) (\ bb.pb8252
(satlem _ _ (asf _ _ _ bb.a3636 (\ bb.l7272 (ast _ _ _ bb.a3638 (\ bb.l7277 (asf _ _ _ bb.a3637 (\ bb.l7274 (clausify_false (contra _ (or_elim_1 _ _ bb.l7272 bb.l7277) bb.l7274)))))))) (\ bb.pb8259
(satlem _ _ (ast _ _ _ bb.a1 (\ bb.l3 (clausify_false bb.l3))) (\ bb.pb3
(satlem _ _ (asf _ _ _ bb.a3608 (\ bb.l7216 (ast _ _ _ bb.a3599 (\ bb.l7199 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7199) (iff_elim_1 _ _ .PA12618)) bb.l7216)))))) (\ bb.pb8162
(satlem _ _ (asf _ _ _ bb.a3638 (\ bb.l7276 (ast _ _ _ bb.a3625 (\ bb.l7251 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7251) (iff_elim_1 _ _ .PA12669)) bb.l7276)))))) (\ bb.pb8260
(satlem _ _ (ast _ _ _ bb.a1343 (\ bb.l2687 (ast _ _ _ bb.a1344 (\ bb.l2689 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ bb.l2 (iff_elim_2 _ _ bb.l2689)) (not_not_intro _ bb.l2687))))))))) (\ bb.pb3507
(satlem _ _ (asf _ _ _ bb.a2603 (\ bb.l5206 (asf _ _ _ bb.a2602 (\ bb.l5204 (asf _ _ _ bb.a77 (\ bb.l154 (clausify_false (contra _ (not_not_elim _ (or_elim_1 _ _ bb.l5204 (iff_elim_2 _ _ (not_iff_elim _ _ bb.l5206)))) bb.l154)))))))) (\ bb.pb6065
(satlem _ _ (ast _ _ _ bb.a3637 (\ bb.l7275 (ast _ _ _ bb.a3606 (\ bb.l7213 (clausify_false (contra _ bb.l7213 (and_elim_1 _ _ bb.l7275))))))) (\ bb.pb8254
(satlem _ _ (asf _ _ _ bb.a3601 (\ bb.l7202 (ast _ _ _ bb.a3608 (\ bb.l7217 (clausify_false (contra _ (and_elim_1 _ _ bb.l7217) bb.l7202)))))) (\ bb.pb8157
(satlem _ _ (asf _ _ _ bb.a3607 (\ bb.l7214 (ast _ _ _ bb.a3608 (\ bb.l7217 (clausify_false (contra _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l7217))) bb.l7214)))))) (\ bb.pb8160
(satlem _ _ (asf _ _ _ bb.a3603 (\ bb.l7206 (ast _ _ _ bb.a3608 (\ bb.l7217 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ bb.l7217)) bb.l7206)))))) (\ bb.pb8158
(satlem _ _ (asf _ _ _ bb.a3580 (\ bb.l7160 (ast _ _ _ bb.a3581 (\ bb.l7163 (clausify_false (contra _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l7163))) bb.l7160)))))) (\ bb.pb8105
(satlem _ _ (asf _ _ _ bb.a1355 (\ bb.l2710 (ast _ _ _ bb.a1356 (\ bb.l2713 (ast _ _ _ bb.a1357 (\ bb.l2715 (clausify_false (contra _ (or_elim_1 _ _ bb.l2710 (iff_elim_2 _ _ bb.l2715)) (not_not_intro _ bb.l2713))))))))) (\ bb.pb3527
(satlem _ _ (asf _ _ _ bb.a3578 (\ bb.l7156 (ast _ _ _ bb.a3581 (\ bb.l7163 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l7163))) bb.l7156)))))) (\ bb.pb8104
(satlem _ _ (asf _ _ _ bb.a1357 (\ bb.l2714 (ast _ _ _ bb.a1354 (\ bb.l2709 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l2709) (iff_elim_1 _ _ .PA9110)) bb.l2714)))))) (\ bb.pb3530
(satlem _ _ (asf _ _ _ bb.a3581 (\ bb.l7162 (ast _ _ _ bb.a3572 (\ bb.l7145 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7145) (iff_elim_1 _ _ .PA12573)) bb.l7162)))))) (\ bb.pb8107
(satlem _ _ (asf _ _ _ bb.a3617 (\ bb.l7234 (ast _ _ _ bb.a3620 (\ bb.l7241 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ bb.l7241)) bb.l7234)))))) (\ bb.pb8204
(satlem _ _ (ast _ _ _ bb.a2606 (\ bb.l5213 (asf _ _ _ bb.a2599 (\ bb.l5198 (clausify_false (contra _ (or_elim_1 _ _ bb.l5198 (iff_elim_2 _ _ .PA11056)) (not_not_intro _ bb.l5213))))))) (\ bb.pb6075
(satlem _ _ (asf _ _ _ bb.a761 (\ bb.l1522 (ast _ _ _ bb.a762 (\ bb.l1525 (ast _ _ _ bb.a763 (\ bb.l1527 (clausify_false (contra _ (or_elim_1 _ _ bb.l1522 (iff_elim_2 _ _ bb.l1527)) (not_not_intro _ bb.l1525))))))))) (\ bb.pb2634
(satlem _ _ (asf _ _ _ bb.a3619 (\ bb.l7238 (ast _ _ _ bb.a3620 (\ bb.l7241 (clausify_false (contra _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l7241))) bb.l7238)))))) (\ bb.pb8206
(satlem _ _ (asf _ _ _ bb.a3618 (\ bb.l7236 (ast _ _ _ bb.a3620 (\ bb.l7241 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l7241))) bb.l7236)))))) (\ bb.pb8205
(satlem _ _ (asf _ _ _ bb.a3620 (\ bb.l7240 (ast _ _ _ bb.a3615 (\ bb.l7231 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l7231) (iff_elim_1 _ _ .PA12644)) bb.l7240)))))) (\ bb.pb8208
(satlem _ _ (asf _ _ _ bb.a2634 (\ bb.l5268 (ast _ _ _ bb.a2635 (\ bb.l5271 (clausify_false (contra _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l5271)) bb.l5268)))))) (\ bb.pb6142
(satlem _ _ (asf _ _ _ bb.a2633 (\ bb.l5266 (ast _ _ _ bb.a2635 (\ bb.l5271 (clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ bb.l5271)) bb.l5266)))))) (\ bb.pb6141
(satlem _ _ (asf _ _ _ bb.a2635 (\ bb.l5270 (ast _ _ _ bb.a2631 (\ bb.l5263 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l5263) (iff_elim_1 _ _ .PA11104)) bb.l5270)))))) (\ bb.pb6144
(satlem _ _ (ast _ _ _ bb.a3631 (\ bb.l7263 (asf _ _ _ bb.a1343 (\ bb.l2686 (clausify_false (contra _ (and_elim_2 _ _ bb.l7263) bb.l2686)))))) (\ bb.pb8237
(satlem _ _ (ast _ _ _ bb.a1345 (\ bb.l2691 (ast _ _ _ bb.a1346 (\ bb.l2693 (asf _ _ _ bb.a1 (\ bb.l2 (clausify_false (contra _ (or_elim_1 _ _ bb.l2 (iff_elim_2 _ _ bb.l2693)) (not_not_intro _ bb.l2691))))))))) (\ bb.pb3509

 ;; Bit-blasting learned clauses 

(satlem_simplify _ _ _ (Q _ _ (Q _ _ (R _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (Q _ _ (R _ _ (R _ _ (R _ _ (R _ _ (Q _ _ (Q _ _ bb.pb6073 bb.pb6061 bb.v2601) bb.pb6065 bb.v2603) bb.pb6129 bb.v2600) bb.pb6133 bb.v2602) bb.pb2616 bb.v751) bb.pb2620 bb.v754) bb.pb6069 bb.v2605) bb.pb8087 bb.v750) bb.pb8091 bb.v753) bb.pb6137 bb.v2604) bb.pb8188 bb.v3573) bb.pb8192 bb.v3575) bb.pb2624 bb.v757) bb.pb3477 bb.v1324) bb.pb3481 bb.v1327) bb.pb8095 bb.v756) bb.pb8141 bb.v1323) bb.pb8145 bb.v1326) bb.pb8196 bb.v3577) bb.pb8230 bb.v3600) bb.pb8226 bb.v3602) bb.pb3485 bb.v1330) bb.pb8234 bb.v3629) bb.pb8233 bb.v3628) bb.pb8149 bb.v1329) bb.pb8241 bb.v3630) bb.pb8222 bb.v3604) bb.pb8243 bb.v3632) bb.pb8242 bb.v3627) (\ bb.cl8832
(satlem _ _ (ast _ _ _ .a1432 (\ .l2865 (ast _ _ _ .a1438 (\ .l2877 (ast _ _ _ .a321 (\ .l643 (intro_assump_t _ _ _ .l2865 bb.a3568(\ unit3568
(intro_assump_t _ _ _ .l2877 bb.a3588(\ unit3588
(intro_assump_t _ _ _ .l643 bb.a1300(\ unit1300
(satlem_simplify _ _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ bb.pb8080 bb.pb8078 bb.v3569) bb.pb3444 bb.v1301) bb.pb8121 bb.v1302) bb.pb8123 bb.v3589) bb.pb3447 bb.v1303) bb.pb3 bb.v1) bb.pb2 bb.v0) (\ bb.cl8869
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ bb.cl8869 unit1300 bb.v1300)unit3588 bb.v3588)unit3568 bb.v3568)(\ e e)
)))))))))))))))( \ .lemc8870
(satlem _ _ (ast _ _ _ .a1448 (\ .l2897 (ast _ _ _ .a1588 (\ .l3177 (ast _ _ _ .a326 (\ .l653 (intro_assump_t _ _ _ .l2897 bb.a3623(\ unit3623
(intro_assump_t _ _ _ .l3177 bb.a3915(\ unit3915
(intro_assump_t _ _ _ .l653 bb.a1336(\ unit1336
(satlem_simplify _ _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ bb.pb8216 bb.pb8214 bb.v3624) bb.pb3500 bb.v1337) bb.pb8816 bb.v1338) bb.pb8818 bb.v3916) bb.pb3503 bb.v1339) bb.pb3 bb.v1) bb.pb2 bb.v0) (\ bb.cl8854
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ bb.cl8854 unit1336 bb.v1336)unit3915 bb.v3915)unit3623 bb.v3623)(\ e e)
)))))))))))))))( \ .lemc8855
(satlem _ _ (ast _ _ _ .a1592 (\ .l3185 (ast _ _ _ .a331 (\ .l663 (ast _ _ _ .a330 (\ .l661 (intro_assump_t _ _ _ .l3185 bb.a3921(\ unit3921
(intro_assump_t _ _ _ .l663 bb.a1362(\ unit1362
(intro_assump_t _ _ _ .l661 bb.a1358(\ unit1358
(satlem_simplify _ _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ bb.pb8830 bb.pb8828 bb.v3922) bb.pb3533 bb.v1359) bb.pb3538 bb.v1360) bb.pb3540 bb.v1363) bb.pb3536 bb.v1361) bb.pb3 bb.v1) bb.pb2 bb.v0) (\ bb.cl8843
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ bb.cl8843 unit1358 bb.v1358)unit1362 bb.v1362)unit3921 bb.v3921)(\ e e)
)))))))))))))))( \ .lemc8844
(satlem _ _ (ast _ _ _ .a1451 (\ .l2903 (ast _ _ _ .a1443 (\ .l2887 (ast _ _ _ .a1452 (\ .l2905 (ast _ _ _ .a328 (\ .l657 (intro_assump_t _ _ _ .l2903 bb.a3641(\ unit3641
(intro_assump_t _ _ _ .l2887 bb.a3596(\ unit3596
(intro_assump_t _ _ _ .l2905 bb.a3643(\ unit3643
(intro_assump_t _ _ _ .l657 bb.a1350(\ unit1350
(satlem_simplify _ _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ bb.pb8268 bb.pb8266 bb.v3642) bb.pb3521 bb.v1351) bb.pb8271 bb.v1352) bb.pb8137 bb.v3597) bb.pb8139 bb.v3598) bb.pb8274 bb.v3644) bb.pb3524 bb.v1353) bb.pb3 bb.v1) bb.pb2 bb.v0) (\ bb.cl8835
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ bb.cl8835 unit1350 bb.v1350)unit3643 bb.v3643)unit3596 bb.v3596)unit3641 bb.v3641)(\ e e)
)))))))))))))))))))( \ .lemc8836
(satlem _ _ (ast _ _ _ .a1449 (\ .l2899 (ast _ _ _ .a1444 (\ .l2889 (ast _ _ _ .a1434 (\ .l2869 (asf _ _ _ .a947 (\ .l1894 (ast _ _ _ .a1437 (\ .l2875 (ast _ _ _ .a1446 (\ .l2893 (ast _ _ _ .a961 (\ .l1923 (ast _ _ _ .a327 (\ .l655 (ast _ _ _ .a325 (\ .l651 (ast _ _ _ .a185 (\ .l371 (ast _ _ _ .a183 (\ .l367 (ast _ _ _ .a20 (\ .l41 (intro_assump_t _ _ _ .l2899 bb.a3625(\ unit3625
(intro_assump_t _ _ _ .l2889 bb.a3599(\ unit3599
(intro_assump_t _ _ _ .l2869 bb.a3572(\ unit3572
(intro_assump_f _ _ _ .l1894 bb.a2599(\ unit2599
(intro_assump_t _ _ _ .l2875 bb.a3586(\ unit3586
(intro_assump_t _ _ _ .l2893 bb.a3615(\ unit3615
(intro_assump_t _ _ _ .l1923 bb.a2631(\ unit2631
(intro_assump_t _ _ _ .l655 bb.a1340(\ unit1340
(intro_assump_t _ _ _ .l651 bb.a1322(\ unit1322
(intro_assump_t _ _ _ .l371 bb.a749(\ unit749
(intro_assump_t _ _ _ .l367 bb.a741(\ unit741
(intro_assump_t _ _ _ .l41 bb.a74(\ unit74
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ bb.cl8832 bb.pb8250 bb.v3633) bb.pb8252 bb.v3635) bb.pb8259 bb.v3636) bb.pb8260 bb.v3638) bb.pb8254 bb.v3637) bb.pb8153 bb.v3606) bb.pb8160 bb.v3607) bb.pb8159 bb.v3605) bb.pb8158 bb.v3603) bb.pb8157 bb.v3601) bb.pb8162 bb.v3608) bb.pb3489 bb.v1332) bb.pb8200 bb.v1333) bb.pb8099 bb.v3579) bb.pb8105 bb.v3580) bb.pb8104 bb.v3578) bb.pb8103 bb.v3576) bb.pb8102 bb.v3574) bb.pb8107 bb.v3581) bb.pb6075 bb.v2606) bb.pb2604 bb.v742) bb.pb8117 bb.v743) bb.pb2 bb.v0) bb.pb8119 bb.v3587) bb.pb8206 bb.v3619) bb.pb8205 bb.v3618) bb.pb8204 bb.v3617) bb.pb8203 bb.v3616) bb.pb8208 bb.v3620) bb.pb6142 bb.v2634) bb.pb6141 bb.v2633) bb.pb6140 bb.v2632) bb.pb6144 bb.v2635) bb.pb8246 bb.v3634) bb.pb8237 bb.v3631) bb.pb3509 bb.v1345) bb.pb3 bb.v1) bb.pb3507 bb.v1343) bb.pb3 bb.v1) bb.pb3515 bb.v1346) bb.pb3514 bb.v1344) bb.pb3518 bb.v1349) bb.pb3495 bb.v1334) bb.pb3494 bb.v1331) bb.pb3493 bb.v1328) bb.pb3492 bb.v1325) bb.pb3497 bb.v1335) bb.pb2629 bb.v758) bb.pb2628 bb.v755) bb.pb2627 bb.v752) bb.pb2631 bb.v759) bb.pb2607 bb.v744) bb.pb1605 bb.v79) bb.pb3 bb.v1) bb.pb1603 bb.v77) bb.pb3 bb.v1) bb.pb1601 bb.v75) bb.pb3 bb.v1) bb.pb1609 bb.v80) bb.pb1608 bb.v78) bb.pb1607 bb.v76) bb.pb1611 bb.v81) (\ bb.cl8833
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ bb.cl8833 unit74 bb.v74)unit741 bb.v741)unit749 bb.v749)unit1322 bb.v1322)unit1340 bb.v1340)unit2631 bb.v2631)unit3615 bb.v3615)unit3586 bb.v3586)unit2599 bb.v2599)unit3572 bb.v3572)unit3599 bb.v3599)unit3625 bb.v3625)(\ e e)
)))))))))))))))))))))))))))))))))))))))))))))))))))( \ .lemc8834
(satlem _ _ (ast _ _ _ .a1445 (\ .l2891 (ast _ _ _ .a1434 (\ .l2869 (ast _ _ _ .a1437 (\ .l2875 (ast _ _ _ .a1446 (\ .l2893 (ast _ _ _ .a325 (\ .l651 (ast _ _ _ .a324 (\ .l649 (ast _ _ _ .a183 (\ .l367 (intro_assump_t _ _ _ .l2891 bb.a3609(\ unit3609
(intro_assump_t _ _ _ .l2869 bb.a3572(\ unit3572
(intro_assump_t _ _ _ .l2875 bb.a3586(\ unit3586
(intro_assump_t _ _ _ .l2893 bb.a3615(\ unit3615
(intro_assump_t _ _ _ .l651 bb.a1322(\ unit1322
(intro_assump_t _ _ _ .l649 bb.a1312(\ unit1312
(intro_assump_t _ _ _ .l367 bb.a741(\ unit741
(satlem_simplify _ _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ (R _ _ bb.pb8185 bb.pb8183 bb.v3614) bb.pb8176 bb.v3613) bb.pb3489 bb.v1332) bb.pb8200 bb.v1333) bb.pb8099 bb.v3579) bb.pb8105 bb.v3580) bb.pb8107 bb.v3581) bb.pb2604 bb.v742) bb.pb8117 bb.v743) bb.pb8119 bb.v3587) bb.pb8206 bb.v3619) bb.pb8208 bb.v3620) bb.pb3495 bb.v1334) bb.pb3497 bb.v1335) bb.pb3467 bb.v1319) bb.pb3472 bb.v1320) bb.pb3474 bb.v1321) bb.pb2607 bb.v744) bb.pb3 bb.v1) bb.pb2 bb.v0) (\ bb.cl8837
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ bb.cl8837 unit741 bb.v741)unit1312 bb.v1312)unit1322 bb.v1322)unit3615 bb.v3615)unit3586 bb.v3586)unit3572 bb.v3572)unit3609 bb.v3609)(\ e e)
)))))))))))))))))))))))))))))))( \ .lemc8838
(satlem _ _ (ast _ _ _ .a1454 (\ .l2909 (ast _ _ _ .a1589 (\ .l3179 (ast _ _ _ .a329 (\ .l659 (intro_assump_t _ _ _ .l2909 bb.a3647(\ unit3647
(intro_assump_t _ _ _ .l3179 bb.a3917(\ unit3917
(intro_assump_t _ _ _ .l659 bb.a1354(\ unit1354
(satlem_simplify _ _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ bb.pb8282 bb.pb8280 bb.v3648) bb.pb3527 bb.v1355) bb.pb8820 bb.v1356) bb.pb8822 bb.v3918) bb.pb3530 bb.v1357) bb.pb3 bb.v1) bb.pb2 bb.v0) (\ bb.cl8861
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ bb.cl8861 unit1354 bb.v1354)unit3917 bb.v3917)unit3647 bb.v3647)(\ e e)
)))))))))))))))( \ .lemc8862
(satlem _ _ (ast _ _ _ .a1436 (\ .l2873 (ast _ _ _ .a1439 (\ .l2879 (ast _ _ _ .a322 (\ .l645 (intro_assump_t _ _ _ .l2873 bb.a3584(\ unit3584
(intro_assump_t _ _ _ .l2879 bb.a3590(\ unit3590
(intro_assump_t _ _ _ .l645 bb.a1304(\ unit1304
(satlem_simplify _ _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ bb.pb8115 bb.pb8113 bb.v3585) bb.pb3450 bb.v1305) bb.pb8125 bb.v1306) bb.pb8127 bb.v3591) bb.pb3453 bb.v1307) bb.pb3 bb.v1) bb.pb2 bb.v0) (\ bb.cl8839
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ bb.cl8839 unit1304 bb.v1304)unit3590 bb.v3590)unit3584 bb.v3584)(\ e e)
)))))))))))))))( \ .lemc8840
(satlem _ _ (ast _ _ _ .a963 (\ .l1927 (ast _ _ _ .a1531 (\ .l3063 (ast _ _ _ .a186 (\ .l373 (intro_assump_t _ _ _ .l1927 bb.a2638(\ unit2638
(intro_assump_t _ _ _ .l3063 bb.a3801(\ unit3801
(intro_assump_t _ _ _ .l373 bb.a760(\ unit760
(satlem_simplify _ _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ bb.pb6152 bb.pb6150 bb.v2639) bb.pb2634 bb.v761) bb.pb8588 bb.v762) bb.pb8590 bb.v3802) bb.pb2637 bb.v763) bb.pb3 bb.v1) bb.pb2 bb.v0) (\ bb.cl8874
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ bb.cl8874 unit760 bb.v760)unit3801 bb.v3801)unit2638 bb.v2638)(\ e e)
)))))))))))))))( \ .lemc8875
(satlem _ _ (ast _ _ _ .a1442 (\ .l2885 (ast _ _ _ .a1587 (\ .l3175 (ast _ _ _ .a323 (\ .l647 (intro_assump_t _ _ _ .l2885 bb.a3594(\ unit3594
(intro_assump_t _ _ _ .l3175 bb.a3913(\ unit3913
(intro_assump_t _ _ _ .l647 bb.a1308(\ unit1308
(satlem_simplify _ _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ bb.pb8135 bb.pb8133 bb.v3595) bb.pb3456 bb.v1309) bb.pb8812 bb.v1310) bb.pb8814 bb.v3914) bb.pb3459 bb.v1311) bb.pb3 bb.v1) bb.pb2 bb.v0) (\ bb.cl8841
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ bb.cl8841 unit1308 bb.v1308)unit3913 bb.v3913)unit3594 bb.v3594)(\ e e)
)))))))))))))))( \ .lemc8842
;; Printing final unsat proof 
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .lemc8844 .pb333 .v331) .pb332 .v330) (\ .cl8845
(satlem_simplify _ _ _ (R _ _ .pb1492 .cl8845 .v1592) (\ .cl8846
(satlem_simplify _ _ _ (Q _ _ .pb1486 .cl8846 .v1590) (\ .cl8847
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .lemc8842 .cl8847 .v1587) .pb325 .v323) (\ .cl8848
(satlem_simplify _ _ _ (R _ _ .pb1345 .cl8848 .v1442) (\ .cl8849
(satlem_simplify _ _ _ (Q _ _ .pb1342 .cl8849 .v1440) (\ .cl8850
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .lemc8840 .cl8850 .v1439) .pb324 .v322) (\ .cl8851
(satlem_simplify _ _ _ (R _ _ .pb1339 .cl8851 .v1436) (\ .cl8852
(satlem_simplify _ _ _ (Q _ _ .pb1340 .cl8849 .v1440) (\ .cl8853
(satlem_simplify _ _ _ (Q _ _ .pb1488 .cl8846 .v1590) (\ .cl8856
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .lemc8855 .cl8856 .v1588) .pb328 .v326) (\ .cl8857
(satlem_simplify _ _ _ (R _ _ .pb1349 .cl8857 .v1448) (\ .cl8858
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ .lemc8838 .cl8852 .v1434) .cl8853 .v1437) .cl8858 .v1446) .pb327 .v325) .pb326 .v324) .pb185 .v183) (\ .cl8859
(satlem_simplify _ _ _ (R _ _ .pb1347 .cl8859 .v1445) (\ .cl8860
(satlem_simplify _ _ _ (Q _ _ .pb1489 .cl8846 .v1590) (\ .cl8863
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .lemc8862 .cl8863 .v1589) .pb331 .v329) (\ .cl8864
(satlem_simplify _ _ _ (R _ _ .pb1353 .cl8864 .v1454) (\ .cl8865
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ .lemc8836 .cl8860 .v1443) .cl8865 .v1452) .pb330 .v328) (\ .cl8866
(satlem_simplify _ _ _ (R _ _ .pb1351 .cl8866 .v1451) (\ .cl8867
(satlem_simplify _ _ _ (Q _ _ .pb1346 .cl8860 .v1443) (\ .cl8868
(satlem_simplify _ _ _ (Q _ _ .pb1341 .cl8849 .v1440) (\ .cl8871
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .lemc8870 .cl8871 .v1438) .pb323 .v321) (\ .cl8872
(satlem_simplify _ _ _ (R _ _ .pb1336 .cl8872 .v1432) (\ .cl8873
(satlem_simplify _ _ _ (Q _ _ .pb1430 .cl8846 .v1590) (\ .cl8876
(satlem_simplify _ _ _ (Q _ _ (Q _ _ .lemc8875 .cl8876 .v1531) .pb188 .v186) (\ .cl8877
(satlem_simplify _ _ _ (R _ _ .pb902 .cl8877 .v963) (\ .cl8878
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ .lemc8834 .cl8867 .v1449) .cl8868 .v1444) .cl8852 .v1434) .cl8873 .v947) .cl8853 .v1437) .cl8858 .v1446) .cl8878 .v961) .pb329 .v327) .pb327 .v325) .pb187 .v185) .pb185 .v183) .pb22 .v20) (\ empty empty
;;
